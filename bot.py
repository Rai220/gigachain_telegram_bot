from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand
from langchain_openai import ChatOpenAI
import asyncio
import os
from dotenv import load_dotenv, find_dotenv
from graph import graph

load_dotenv(find_dotenv())

TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ GPT-4 —Å –ø–æ–º–æ—â—å—é langchain_openai
llm = ChatOpenAI(model="gpt-4o")

emojis = {
    "web_search": "üåçüîç",
    "retrieve": "üìöüîç",
    "grade_documents": "üìö‚¨ÜÔ∏è",
    "generate": "üß†",
    "transform_query": "üîÑ",
}

@dp.message()
async def handle_message(message: types.Message):
    user_message = message.text
    bot_username = (await bot.get_me()).username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
    if message.chat.type in ('group', 'supergroup', 'channel'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if not (f'@{bot_username}' in user_message):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç

        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –º–æ–¥–µ–ª—å
        user_message = user_message.replace(f'@{bot_username}', '').strip()

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ llm.stream –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
    answer = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    inputs = {"question": user_message}
    for output in graph.stream(inputs):
        for key, value in output.items():
            # print(f"Finished running: {key} {value[0:100]}:")
            await answer.edit_text(f"Current step - {key} " + emojis.get(key, "") + "...")
    await answer.edit_text(value["generation"])

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(handle_message)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
