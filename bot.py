import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from dotenv import find_dotenv, load_dotenv

from graph import graph

load_dotenv(find_dotenv())

TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()


emojis = {
    "web_search": "üåçüîç",
    "retrieve": "üìöüîç",
    "grade_documents": "üìö‚¨ÜÔ∏è",
    "generate": "üìöüß†",
    "self": "üß†üß†",
    "transform_query": "üîÑ",
}


@dp.message()
async def handle_message(message: types.Message):
    user_message = message.text
    if not user_message:
        return
    bot_username = (await bot.get_me()).username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
    if message.chat.type in ("group", "supergroup", "channel"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if not (f"@{bot_username}" in user_message):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç

        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –º–æ–¥–µ–ª—å
        user_message = user_message.replace(f"@{bot_username}", "").strip()

    if user_message.startswith("/start"):
        await message.answer("–Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return
    if user_message.startswith("/"):
        return
    if user_message.strip() == "":
        return

    try:
        # Log the user's request
        logging.warning(
            f"User request: {user_message}, from {message.from_user.id} {message.from_user.username}"
        )

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ llm.stream –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        answer = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        inputs = {"question": user_message}
        last_step = None
        for output in graph.stream(inputs):
            for key, value in output.items():
                if key == last_step:
                    continue
                await answer.edit_text(
                    f"Current step - {key} " + emojis.get(key, "") + "..."
                )
                last_step = key
        await answer.delete()
        await message.answer(value["generation"])
    except Exception as e:
        logging.error(f"Error processing user request: {e}", exc_info=True)
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(handle_message)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
