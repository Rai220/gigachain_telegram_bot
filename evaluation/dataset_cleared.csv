id,question,reference_answer,reference_context,conversation_history,metadata
ff91f4fa-c316-4ae2-91e5-19a8b41cdbff,Какой тариф подключается по умолчанию для новых пользователей GigaChat API?,Каждому новому пользователю по умолчанию подключается тариф Freemium.,"Document 10: lastUpdateDate: 19 июля 2024

import TesterSecretGeneration from '/docs/ru/includes/gigachat/_tester-secret-generation.mdx';

Быстрый старт для физических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-sozdayte-proekt-giga-chat-api}

Проект GigaChat API нужен для получения авторизационных данных, а также для управления платными опциями. С помощью авторизационных данных вы можете получить токен доступа для авторизации запросов к API.

import AuthData from '/docs/ru/includes/gigachat/_auth-data.mdx';

:::note

Если у вас уже есть личный кабинет, авторизуйтесь с помощью SberID или СберБизнес ID и создайте проект GigaChat API по ссылке.

:::

Если у вас нет личного кабинета, для создания проекта:

Зарегистрируйтесь в личном кабинете, используя свой аккаунт Сбер ID.

Нажмите кнопку Создать проект в левом меню.

Выберите GigaChat API в разделе AI-модели.

Ознакомьтесь и примите условия пользовательского соглашения.

В открывшемся окне введите название проекта.

В интерфейсе проекта можно:

Ознакомиться с условиями действующего тарифа. Каждому новому пользователю по умолчанию подключается тариф Freemium. Об условиях тарифа и доступных тарифных планах читайте в разделе Тарифы и оплата.

Приобрести дополнительные пакеты токенов.

Узнать свой идентификатор — значение поля Client ID в панели справа.

Узнать версию API, к которой предоставляется доступ. Версия указана в поле Scope в панели справа. Для физических лиц значение поля — GIGACHAT_API_PERS.

Сгенерировать клиентский ключ.

Для генерации клиентского ключа нажмите кнопку Сгенерировать новый Client Secret.

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получение токена доступа {#shag-2-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_PERS' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также вы сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret) в консоли.

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста и изображений {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API",[],"{'question_type': 'simple', 'seed_document_id': 10, 'topic': 'Сервис GigaChat'}"
0b23c7a3-0910-4442-8b46-edbb9fbee57b,Как долго действителен токен доступа для GigaChat API?,Токен действителен в течение 30 минут.,"Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 10: lastUpdateDate: 19 июля 2024

import TesterSecretGeneration from '/docs/ru/includes/gigachat/_tester-secret-generation.mdx';

Быстрый старт для физических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-sozdayte-proekt-giga-chat-api}

Проект GigaChat API нужен для получения авторизационных данных, а также для управления платными опциями. С помощью авторизационных данных вы можете получить токен доступа для авторизации запросов к API.

import AuthData from '/docs/ru/includes/gigachat/_auth-data.mdx';

:::note

Если у вас уже есть личный кабинет, авторизуйтесь с помощью SberID или СберБизнес ID и создайте проект GigaChat API по ссылке.

:::

Если у вас нет личного кабинета, для создания проекта:

Зарегистрируйтесь в личном кабинете, используя свой аккаунт Сбер ID.

Нажмите кнопку Создать проект в левом меню.

Выберите GigaChat API в разделе AI-модели.

Ознакомьтесь и примите условия пользовательского соглашения.

В открывшемся окне введите название проекта.

В интерфейсе проекта можно:

Ознакомиться с условиями действующего тарифа. Каждому новому пользователю по умолчанию подключается тариф Freemium. Об условиях тарифа и доступных тарифных планах читайте в разделе Тарифы и оплата.

Приобрести дополнительные пакеты токенов.

Узнать свой идентификатор — значение поля Client ID в панели справа.

Узнать версию API, к которой предоставляется доступ. Версия указана в поле Scope в панели справа. Для физических лиц значение поля — GIGACHAT_API_PERS.

Сгенерировать клиентский ключ.

Для генерации клиентского ключа нажмите кнопку Сгенерировать новый Client Secret.

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получение токена доступа {#shag-2-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_PERS' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также вы сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret) в консоли.

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста и изображений {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 46: lastUpdateDate: 9 августа 2024

Работа с API по постоплате {#rabota-s-api-po-postoplate}

Для корпоративных клиентов доступна возможность работы с GigaChat API по постоплатной схеме.

:::note

О том как начать работать с API по предоплатной схеме — в разделе Быстрый старт для ИП и юридических лиц.

:::

Чтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве.

Для этого:

Зарегистрируйтесь или авторизуйтесь в личном кабинете.

Перейдите в корпоративное пространство (постоплата).

Нажмите Создать проект в левом меню.

Выберите GigaChat API Enterprise в разделе AI-модели.

Заполните заявку на получение доступа к GigaChat API по постоплатной схеме.

Перед отправкой ознакомьтесь с условиями использования.

Нажмите кнопку Отправить заявку.

:::tip

Если у вас уже есть личный кабинет, авторизуйтесь и отправьте заявку на доступ к GigaChat API по ссылке.

:::

После отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого:

Скачайте и заполните заявление.

:::note

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета:

ID лицевого счета представлен в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

:::

Отправьте нам заполненное заявление в формате doc/docx по ЭДО.

Рассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.

Дальнейшая работа с API аналогична общему процессу.",[],"{'question_type': 'simple', 'seed_document_id': 15, 'topic': 'Сервис GigaChat'}"
1e15bd11-6e4d-475d-b35b-9f68bf4ea9c9,Какое значение имеет поле 'index' в ответе на запрос создания эмбеддинга?,Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.,"Document 55: id: post-embeddings title: ""Создать эмбеддинг"" description: ""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса."" sidebar_label: ""Создать эмбеддинг"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для создания эмбеддинга."",""default"":""Embeddings""},""input"":{""type"":""array"",""description"":""Строка или массив строк, которые будут использованы для генерации эмбеддинга."",""items"":{""type"":""string"",""example"":""Расскажи о современных технологиях""}}},""title"":""EmbeddingsBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""data"",""object""],""properties"":{""object"":{""type"":""string"",""description"":""Формат структуры данных."",""default"":""list""},""data"":{""type"":""array"",""items"":{""type"":""object"",""description"":""Объект с данными о векторном представлении текста."",""required"":[""object"",""embedding"",""index"",""usage""],""properties"":{""object"":{""type"":""string"",""description"":""Тип объекта."",""default"":""embedding""},""embedding"":{""type"":""array"",""description"":""Массив чисел, представляющих значения эмбеддинга для предоставленного текста."",""items"":{""type"":""integer"",""format"":""float""}},""index"":{""type"":""integer"",""description"":""Индекс соответствующий индексу текста, полученного в массиве input запроса."",""example"":0},""usage"":{""type"":""object"",""properties"":{""prompt_tokens"":{""type"":""number"",""description"":""Количество токенов в строке, для которой сгенерирован эмбеддинг."",""example"":6}}}}}},""model"":{""type"":""string"",""description"":""Название модели, которая используется для вычисления эмбеддинга."",""example"":""Embeddings""}},""title"":""Embedding""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postEmbeddings"",""description"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""method"":""post"",""path"":""/embeddings"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""Embeddings"",""input"":[""Расскажи о современных технологиях""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Создать эмбеддинг"",""description"":{""content"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""type"":""text/plain""},""url"":{""path"":[""embeddings""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Создать эмбеддинг

Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.

Векторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.

Запрос {#zapros}

Document 39: keywords: [""эмбеддинг"", ""эмбеддинги"", ""векторное представление текста"", ""embeddings"", ""embedding""] lastUpdateDate: 1 августа 2024

Векторное представление текста {#vektornoe-predstavlenie-teksta}

Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Векторное представление текста (эмбеддинг) используется для:

улучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;

уменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;

обеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.

Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings (""model"": ""Embeddings"") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.

:::note

Создание эмбеддингов оплачивается отдельно от генерации текста.

Подробнее в разделе Тарифы и оплата.

:::

Пример запроса на создание эмбеддинга:

shell curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \ --header 'Content-Type: application/json' \ --header 'Authorization: Bearer <токен доступа>' \ --data '{ ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"", ""Какие новинки в мире IT?"" ] }'

Параметры запроса:

Пример ответа:

json { ""object"": ""list"", ""data"": [ { ""object"": ""embedding"", ""embedding"": [ 0.0023064255, -0.009327292, ... -0.0028842222 ], ""index"": 0 } ], ""model"": ""Embeddings"" }

Параметры ответа:

Для создания эмбеддингов с помощью SDK используйте функцию embed_documents(), модуля GigaChatEmbeddings, импортированного из langchain_community.embeddings.gigachat:

```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings

embeddings = GigaChatEmbeddings(credentials=""<авторизационные_данные>"", verify_ssl_certs=False) result = embeddings.embed_documents(texts=[""Привет!""]) print(result) ```

В ответ функция возвращает массив чисел, представляющих значения эмбеддинга для переданного текста:

```json [ [ 0.72149658203125, -0.18883895874023438, 0.013126373291015625, -1.27783203125, 1.4967041015625, -0.97698974609375, -0.1722869873046875, 1.4625244140625,

    ...

    -0.007974624633789062,
    -0.77838134765625,
    1.167236328125
]

] ```

Использование эмбеддингов для поиска {#ispolzovanie-embeddingov-dlya-poiska}

Поиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:

Создайте векторное представление текста, по которому будет выполняться поиск.

Сохраните эмбеддинг в векторной базе данных.

Выполните запрос к базе.

Ниже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.

Пример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:

page_content — строку, представляющую содержимое;

metadata — словарь, содержащий произвольные метаданные.

Атрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.

Для запуска примера установите зависимости:

sh pip install gigachain-community gigachain-chroma

Создайте несколько документов и сохраните их в векторном хранилище:

```python from langchain_core.documents import Document from langchain_chroma import Chroma from langchain_community.embeddings.gigachat import GigaChatEmbeddings

Список документов, по которым будет выполняться поиск

documents = [ Document( page_content=""Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Кошки — независимые животные, которым нужно собственное пространство."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать."", metadata={""source"": ""fish-pets-doc""}, ), Document( page_content=""Попугаи — умные птицы, которые способны имитировать человеческую речь."", metadata={""source"": ""bird-pets-doc""}, ), Document( page_content=""Кролики — социальные животные, которым нужно много места, чтобы прыгать."", metadata={""source"": ""mammal-pets-doc""}, ), ]

Создайте векторное хранилище и передайте в него список документов и модель для создания векторного представления

vectorstore = Chroma.from_documents( documents, embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False ), ) ```

Теперь вы можете использовать методы vectorstore для выполнения поиска по документам.

Поиск по документам на основе схожести с тексовым запросом:

python vectorstore.similarity_search(""кошка"")

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Оценка схожести запроса и содержимого хранилища:

```python

Оценка зависит от выбранного векторного хранилища.

Chroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.

vectorstore.similarity_search_with_score(""кошка"") ```

Результат оценки:

text [(Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), 218.2356719970703), (Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), 319.75384521484375), (Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), 349.84930419921875), (Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'}), 352.6993103027344)]

Поиск документов на основе схожести с запросом, представленным в виде вектора:

```python embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False )

embedded_query = embedding.embed_query(""кошка"")

vectorstore.similarity_search_by_vector(embedded_query) ```

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Cмотрите также {#cmotrite-takzhe}

Пример использования модели Embeddings и GigaChain для создания RAG-приложения, которое генерирует ответы на основе предоставленного текста.",[],"{'question_type': 'simple', 'seed_document_id': 55, 'topic': 'Работа с GigaChat API'}"
d91be405-ba32-42d5-b187-a35f92c51e19,Какой пример промпта используется для исправления ошибок в тексте?,"json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте."" }, { ""role"": ""user"", ""content"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны"" }, ], ""temperature"": 0.7 }","Document 25: lastUpdateDate: 4 апреля 2024

Исправление ошибок {#ispravlenie-oshibok}

Пример промпта для исправления ошибок в тексте.

:::note

В демонстрационных целях пример сообщения пользователя (""role"": ""user"") специально содержит ошибки.

:::

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте."" }, { ""role"": ""user"", ""content"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны"" }, ], ""temperature"": 0.7 }

yaml input_variables: [text] output_parser: null template: 'Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте. Текст: {text}' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте."" }, { ""role"": ""user"", ""content"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") prompt = load_prompt('lc://prompts/content/spell_correction.yaml') chain = prompt | giga text = chain.invoke({""text"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны""}) ```

Jupyter-блокнот с шаблоном промпта для исправления текста

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 27: lastUpdateDate: 4 апреля 2024

Генерация вопросов к заданному тексту {#generatsiya-voprosov-k-zadannomu-tsehu}

Пример промпта для генерации различных вопросов к переданному тексту.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Перед тобой некоторая часть целостного документа. Придумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу. Используй информацию ТОЛЬКО из приведенной части документа. Используй непредвзятый и журналистский тон. Не повторяй текст. Формат ответ должен выглядеть вот так: "" Вопрос ... ... Вопрос

Текст документа: {text}

3 вопроса к документу на русском языке:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") generate_question_prompt = load_prompt('lc://prompts/qna/generate_question_prompt.yaml') text = generate_question_prompt.format(text=""... text of your documents ..."") ```

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```",[],"{'question_type': 'simple', 'seed_document_id': 25, 'topic': 'Промпты для GigaChat'}"
ad302d4c-2c4a-4527-b495-9c71e02c9d7f,Какой URL используется для обращения к моделям GigaChat в раннем доступе?,"Для обращения к моделям в раннем доступе используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.","Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}

Document 49: id: post-chat title: ""Получить ответ модели на сообщения"" description: ""Возвращает ответ модели сгенерированный на основе переданных сообщений."" sidebar_label: ""Получить ответ модели на сообщения"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""example"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""required"":[""model"",""messages""],""type"":""object"",""properties"":{""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""messages"":{""type"":""array"",""description"":""Массив сообщений, которыми пользователь обменивался с моделью."",""items"":{""type"":""object"",""properties"":{""role"":{""type"":""string"",""description"":""Роль автора сообщения:\n\n system — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;\n assistant — ответ модели;\n user — сообщение пользователя;\n function — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле content валидный JSON-объект с результатами работы функции.\n\nДля сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.\n"",""enum"":[""system"",""user"",""assistant"",""function""],""example"":""user""},""content"":{""description"":""Содержимое сообщения. Зависит от роли.\n\nЕсли поле передается в сообщении с ролью function, то в нем указывается валидный JSON-объект с аргументами функции, указанной в поле function_call.name.\n\nВ остальных случаях содержит либо системный промпт (сообщение с ролью system), либо текст сообщения пользователя или модели.\n""},""functions_state_id"":{""type"":""string"",""format"":""uuidv4"",""description"":""Идентификатор, который объединяет массив функций, переданных запросе.\nВозвращается в ответе модели (сообщение с \""role\"": \""assistant\"") при вызове встроенных или собственных функций.\nПозволяет сохранить контекст вызова функции и повысить качество работы модели.\nДля этого нужно передать идентификатор в запросе на генерацию, в сообщении с ролью assistant.\n\nПоле заменяет массив data_for_context. В будущем поддержка массива будет прекращена.\n\nСейчас поле работает только при обращении к моделям в раннем доступе.\n"",""example"":""77d3fb14-457a-46ba-937e-8d856156d003""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""message""}},""function_call"":{""description"":""Поле которе отвечает за то, как GigaChat будет работать с функциями.\nМожет быть строкой или объектом.\n\nВозможные значения:\n\n none — режим работы по умолчанию. Если запрос не содержит function_call или значение поля — none, GigaChat не вызовет функции, а просто сгенерирует ответ в соотвествии с полученными сообщениями;\n\n auto — в зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию.\nМодель вызывает встроенные функции, если отсутствует массив functions с описанием пользовательских функций.\nЕсли запрос содержит \""function_call\"": \""auto\"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;\n\n {\""name\"": \""название_функции\""} — принудительная генерация аргументов для указанной функции. Вы можете явно задать часть аргументов с помощью объекта partial_arguments. Остальные аргументы модель сгенерирует самостоятельно. При принудительной генерации, массив functions обязан содержать объект с описанием указанной функции. В противном случае вернется ошибка.\n"",""oneOf"":[{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""Название функции."",""example"":""sbermarket-pizza_order""},""partial_arguments"":{""type"":""object"",""description"":""JSON-объект в котором вы можете явно задать некоторые аргументы указанной функции. Остальные аргументы модель сгенерирует самостоятлеьно."",""properties"":{}}},""title"":""function_call_custom_function""},{""type"":""string"",""enum"":[""auto"",""none""],""description"":""Режим работы с функциями"",""example"":""auto"",""title"":""function_call_none_auto""}]},""functions"":{""type"":""array"",""description"":""Массив с описанием пользовательских функций."",""items"":{""type"":""object"",""required"":[""name"",""parameters""],""properties"":{""name"":{""type"":""string"",""description"":""Название пользовательской функции, для которой будут сгенерированы аргументы."",""example"":""pizza_order""},""description"":{""type"":""string"",""description"":""Текстовое описание функции."",""example"":""Функция для заказа пиццы""},""parameters"":{""type"":""object"",""properties"":{},""description"":""Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции.""},""few_shot_examples"":{""type"":""array"",""description"":""Объекты с парами запрос_пользователя-параметры_функции, которые будут служить модели примерами ожидаемого результата.\n"",""items"":{""type"":""object"",""required"":[""request"",""params""],""properties"":{""request"":{""type"":""string"",""description"":""Запрос пользователя."",""example"":""Погода в Москва в ближайшие три дня""},""params"":{""type"":""object"",""description"":""Пример заполнения параметров пользовательской функции."",""properties"":{}}}}},""return_parameters"":{""type"":""object"",""description"":""JSON-объект с описанием параметров, которые может вернуть ваша функция."",""properties"":{}}}}},""temperature"":{""format"":""float"",""type"":""number"",""description"":""Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""minimum"":0,""exclusiveMinimum"":true},""top_p"":{""format"":""float"",""type"":""number"",""description"":""Параметр используется как альтернатива температуре (поле temperature). Задает вероятностную массу токенов, которые должна учитывать модель.\nТак, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели. Значения изменяются в диапазоне от ноля до единицы включительно.\n\nЗначение изменяется в диапазоне от 0 до 1.\n"",""minimum"":0,""maximum"":1},""n"":{""description"":""Количество вариантов ответов, которые нужно сгенерировать для каждого входного сообщения.\n\nКоличество вариантов может изменяться от одного до четырех. По умолчанию модель возвращает один вариант ответа.\n"",""format"":""int64"",""type"":""integer"",""deprecated"":true,""minimum"":1,""maximum"":4,""default"":1,""example"":1},""stream"":{""type"":""boolean"",""description"":""Указывает, что сообщения надо передавать по частям в потоке.\n\nСообщения передаются по протоколу SSE.\n\nПоток завершается событием data: [DONE].\n\nПодробнее читайте в разделе Потоковая передача токенов.\n"",""default"":false,""example"":false},""max_tokens"":{""description"":""Максимальное количество токенов, которые будут использованы для создания ответов."",""format"":""int32"",""type"":""integer""},""repetition_penalty"":{""type"":""number"",""format"":""float"",""description"":""Количество повторений слов:\n\n Значение 1.0 — нейтральное значение.\n При значении больше 1 модель будет стараться не повторять слова.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""example"":1},""update_interval"":{""type"":""number"",""description"":""Параметр потокового режима (\""stream\"": \""true\"").\nЗадает минимальный интервал в секундах, который проходит между отправкой токенов.\nНапример, если указать 1, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.\n"",""default"":0,""example"":0}},""title"":""Chat""}}}},""tags"":[""Чат""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""choices"":{""type"":""array"",""description"":""Массив ответов модели."",""items"":{""type"":""object"",""properties"":{""message"":{""type"":""object"",""description"":""Сгенерированное сообщение."",""properties"":{""role"":{""type"":""string"",""enum"":[""assistant"",""function_in_progress""],""description"":""Роль автора сообщения.\n\nРоль function_in_progress используется при работе встроенных функций в режиме потоковой передачи токенов.\n"",""example"":""assistant""},""content"":{""type"":""string"",""description"":""Содержимое сообщения, например, результат генерации.\n\nВ сообщениях с ролью function_in_progress содержит информацию о том, сколько времени осталось до завершения работы встроенной функции.\n"",""example"":""Здравствуйте! К сожалению, я не могу дать точный ответ на этот вопрос, так как это зависит от многих факторов. Однако обычно релиз новых функций и обновлений в GigaChat происходит постепенно и незаметно для пользователей. Рекомендую следить за новостями и обновлениями проекта в официальном сообществе GigaChat или на сайте разработчиков.""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""MessagesRes""},""index"":{""format"":""int32"",""type"":""integer"",""description"":""Индекс сообщения в массиве начиная с ноля."",""example"":0},""finish_reason"":{""description"":""Причина завершения гипотезы. Возможные значения:\n\n stop — модель закончила формировать гипотезу и вернула полный ответ;\n length — достигнут лимит токенов в сообщении;\n function_call — указывает что при запросе была вызвана встроенная функция или сгенерированы аргументы для пользовательской функции;\n blacklist — запрос подпадает под тематические ограничения.\n"",""type"":""string"",""enum"":[""stop"",""length"",""function_call"",""blacklist""],""example"":""stop""}},""title"":""Choices""}},""created"":{""format"":""int64"",""type"":""integer"",""description"":""Дата и время создания ответа в формате Unix time."",""example"":1678878333},""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""usage"":{""type"":""object"",""description"":""Данные об использовании модели."",""properties"":{""prompt_tokens"":{""format"":""int32"",""description"":""Количество токенов во входящем сообщении (роль user)."",""type"":""integer"",""example"":18},""completion_tokens"":{""format"":""int32"",""description"":""Количество токенов, сгенерированных моделью (роль assistant)."",""type"":""integer"",""example"":68},""total_tokens"":{""format"":""int32"",""description"":""Общее количество токенов."",""type"":""integer"",""example"":86}},""title"":""Usage""},""object"":{""type"":""string"",""description"":""Название вызываемого метода."",""example"":""chat.completion""}},""title"":""ChatCompletion""}}},""description"":""OK""},""400"":{""description"":""Bad request format""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""},""422"":{""description"":""Validation error""},""429"":{""description"":""Too many requests""},""500"":{""description"":""Internal Server Error""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postChat"",""description"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""method"":""post"",""path"":""/chat/completions"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"":

Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication",[],"{'question_type': 'simple', 'seed_document_id': 54, 'topic': 'API GigaChat'}"
c26d5a7d-5d67-42b6-a430-13a69bdd142f,Что такое эмбеддинг и для чего он используется?,"Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью. Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства. Векторное представление текста (эмбеддинг) используется для улучшения качества поиска, уменьшения размерности данных и обеспечения универсальности в различных задачах обработки естественного языка.","Document 55: id: post-embeddings title: ""Создать эмбеддинг"" description: ""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса."" sidebar_label: ""Создать эмбеддинг"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для создания эмбеддинга."",""default"":""Embeddings""},""input"":{""type"":""array"",""description"":""Строка или массив строк, которые будут использованы для генерации эмбеддинга."",""items"":{""type"":""string"",""example"":""Расскажи о современных технологиях""}}},""title"":""EmbeddingsBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""data"",""object""],""properties"":{""object"":{""type"":""string"",""description"":""Формат структуры данных."",""default"":""list""},""data"":{""type"":""array"",""items"":{""type"":""object"",""description"":""Объект с данными о векторном представлении текста."",""required"":[""object"",""embedding"",""index"",""usage""],""properties"":{""object"":{""type"":""string"",""description"":""Тип объекта."",""default"":""embedding""},""embedding"":{""type"":""array"",""description"":""Массив чисел, представляющих значения эмбеддинга для предоставленного текста."",""items"":{""type"":""integer"",""format"":""float""}},""index"":{""type"":""integer"",""description"":""Индекс соответствующий индексу текста, полученного в массиве input запроса."",""example"":0},""usage"":{""type"":""object"",""properties"":{""prompt_tokens"":{""type"":""number"",""description"":""Количество токенов в строке, для которой сгенерирован эмбеддинг."",""example"":6}}}}}},""model"":{""type"":""string"",""description"":""Название модели, которая используется для вычисления эмбеддинга."",""example"":""Embeddings""}},""title"":""Embedding""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postEmbeddings"",""description"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""method"":""post"",""path"":""/embeddings"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""Embeddings"",""input"":[""Расскажи о современных технологиях""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Создать эмбеддинг"",""description"":{""content"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""type"":""text/plain""},""url"":{""path"":[""embeddings""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Создать эмбеддинг

Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.

Векторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.

Запрос {#zapros}

Document 39: keywords: [""эмбеддинг"", ""эмбеддинги"", ""векторное представление текста"", ""embeddings"", ""embedding""] lastUpdateDate: 1 августа 2024

Векторное представление текста {#vektornoe-predstavlenie-teksta}

Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Векторное представление текста (эмбеддинг) используется для:

улучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;

уменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;

обеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.

Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings (""model"": ""Embeddings"") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.

:::note

Создание эмбеддингов оплачивается отдельно от генерации текста.

Подробнее в разделе Тарифы и оплата.

:::

Пример запроса на создание эмбеддинга:

shell curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \ --header 'Content-Type: application/json' \ --header 'Authorization: Bearer <токен доступа>' \ --data '{ ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"", ""Какие новинки в мире IT?"" ] }'

Параметры запроса:

Пример ответа:

json { ""object"": ""list"", ""data"": [ { ""object"": ""embedding"", ""embedding"": [ 0.0023064255, -0.009327292, ... -0.0028842222 ], ""index"": 0 } ], ""model"": ""Embeddings"" }

Параметры ответа:

Для создания эмбеддингов с помощью SDK используйте функцию embed_documents(), модуля GigaChatEmbeddings, импортированного из langchain_community.embeddings.gigachat:

```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings

embeddings = GigaChatEmbeddings(credentials=""<авторизационные_данные>"", verify_ssl_certs=False) result = embeddings.embed_documents(texts=[""Привет!""]) print(result) ```

В ответ функция возвращает массив чисел, представляющих значения эмбеддинга для переданного текста:

```json [ [ 0.72149658203125, -0.18883895874023438, 0.013126373291015625, -1.27783203125, 1.4967041015625, -0.97698974609375, -0.1722869873046875, 1.4625244140625,

    ...

    -0.007974624633789062,
    -0.77838134765625,
    1.167236328125
]

] ```

Использование эмбеддингов для поиска {#ispolzovanie-embeddingov-dlya-poiska}

Поиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:

Создайте векторное представление текста, по которому будет выполняться поиск.

Сохраните эмбеддинг в векторной базе данных.

Выполните запрос к базе.

Ниже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.

Пример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:

page_content — строку, представляющую содержимое;

metadata — словарь, содержащий произвольные метаданные.

Атрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.

Для запуска примера установите зависимости:

sh pip install gigachain-community gigachain-chroma

Создайте несколько документов и сохраните их в векторном хранилище:

```python from langchain_core.documents import Document from langchain_chroma import Chroma from langchain_community.embeddings.gigachat import GigaChatEmbeddings

Список документов, по которым будет выполняться поиск

documents = [ Document( page_content=""Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Кошки — независимые животные, которым нужно собственное пространство."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать."", metadata={""source"": ""fish-pets-doc""}, ), Document( page_content=""Попугаи — умные птицы, которые способны имитировать человеческую речь."", metadata={""source"": ""bird-pets-doc""}, ), Document( page_content=""Кролики — социальные животные, которым нужно много места, чтобы прыгать."", metadata={""source"": ""mammal-pets-doc""}, ), ]

Создайте векторное хранилище и передайте в него список документов и модель для создания векторного представления

vectorstore = Chroma.from_documents( documents, embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False ), ) ```

Теперь вы можете использовать методы vectorstore для выполнения поиска по документам.

Поиск по документам на основе схожести с тексовым запросом:

python vectorstore.similarity_search(""кошка"")

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Оценка схожести запроса и содержимого хранилища:

```python

Оценка зависит от выбранного векторного хранилища.

Chroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.

vectorstore.similarity_search_with_score(""кошка"") ```

Результат оценки:

text [(Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), 218.2356719970703), (Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), 319.75384521484375), (Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), 349.84930419921875), (Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'}), 352.6993103027344)]

Поиск документов на основе схожести с запросом, представленным в виде вектора:

```python embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False )

embedded_query = embedding.embed_query(""кошка"")

vectorstore.similarity_search_by_vector(embedded_query) ```

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Cмотрите также {#cmotrite-takzhe}

Пример использования модели Embeddings и GigaChain для создания RAG-приложения, которое генерирует ответы на основе предоставленного текста.",[],"{'question_type': 'simple', 'seed_document_id': 55, 'topic': 'Работа с GigaChat API'}"
f599aecb-5b75-4827-a9a4-0b70707c0cea,Как можно создать аудиомедитацию в GigaChat?,"Чтобы создать медитацию с помощью GigaChat, не нужно писать промпт — он генерируется автоматически. Нейросеть спросит, что вы чувствуете, какого результата ожидаете, и в какой атмосфере будет проходить практика. После этого сервис автоматически сгенерирует запрос для ИИ, и вы получите персонализированную медитацию. На следующем шаге вы получите аудиофайл с медитацией, которую читает Агата — ваш ментальный ИИ-наставник. Можно сразу прослушать аудиозапись, скачать её в формате .wav (наравне с .mp3, он воспроизводится любым плеером на компьютере и смартфоне) или поделиться ссылкой на результат.","Document 4: Главная

База знаний

Медитация от страха и тревоги

База знаний

Медитация от страха и тревоги

Опубликованно:

27 мая 2024

Изменено:

14 августа 2024

14 августа 2024

Содержание раздела

Создание аудиомедитации в GigaChat

Подготовка к практике

Расслабляющая атмосфера

Удобная поза

Вдох-выдох

Когда и кому подходит медиация от страха и тревоги

Утром

В течение дня

Не оставляют тревожные мысли? Используйте GigaChat для медитаций, чтобы избавиться от необъективного страха и вернуться в состояние внутреннего покоя.

GigaChat за несколько минут создаст персонализированную аудиомедиацию, направленную на восстановление нервной системы. Без сложных промтов! Просто скажите, что чувствуете.

GigaChat — генерация картинок, текстов и многого другого

Попробовать в браузере\ \

Встраивайте GigaChat API в свои проекты

0 ₽

400 ₽ за 3 мес.

400 ₽ за 6 мес.

1500 ₽ за 3 мес.

50 000 токенов

Генерация текста GigaChat Pro

950 000 токенов

Генерация текста GigaChat Lite

1 поток

Одновременные запросы

Еще тарифы\ \ Попробовать GigaChat API

Как медитация помогает снизить тревогу

Никакой магии! Медитация — это оздоровительная психологическая практика, расслабляющая ум и тело. Она помогает сосредоточиться на настоящем моменте и забыть о тревогах.

Если гипноз часто ассоциируется с потерей контроля, то медитативные упражнения, наоборот, способствуют повышению уровня саморегуляции. Вы учитесь погружаться в момент. Вы держите под контролем разум и чувства, но делаете это без напряжения.

Когда вы находитесь «здесь и сейчас», в голове не остаётся места для беспокойных мыслей. Это способствует снижению тревожности, негативных эмоций и стресса.

Создание аудиомедитации в GigaChat

Ссылка на онлайн-конструктор ИИ-медитаций есть на главной странице GigaChat.

Чтобы создать медитацию с помощью GigaChat, не нужно писать промпт — он генерируется автоматически. Нейросеть спросит, что вы чувствуете, какого результата ожидаете, и в какой атмосфере будет проходить практика. После этого сервис автоматически сгенерирует запрос для ИИ, и вы получите персонализированную медитацию.

На следующем шаге вы получите аудиофайл с медитацией, которую читает Агата — ваш ментальный ИИ-наставник. Можно сразу прослушать аудиозапись, скачать её в формате .wav (наравне с .mp3, он воспроизводится любым плеером на компьютере и смартфоне) или поделиться ссылкой на результат.

Подготовка к практике

Расслабляющая атмосфера

Выберите тихое место, где вас не будут отвлекать посторонние звуки и люди. Отключите уведомления, чтобы полностью сконцентрироваться на процессе и избавиться от потенциальных помех. Включите спокойную музыку, которая направит вас к нужным эмоциям. Используйте ароматические свечи или эфирные масла для расслабления рецепторов. Упражнения из комплекса растяжки или медитативные позы из йоги также помогут настроиться на нужный лад.

Удобная поза

Если вы сидите, то стопы должны полностью касаться пола, а спина — иметь опору. Если лежите, то тело должно быть ровным, без перекосов, а руки — находиться вдоль тела или на животе.

Важно, чтобы вы чувствовали себя комфортно. Если необходимо, положите под шею, поясницу или колени подушку (валик, свёрнутое полотенце), чтобы снять нагрузку.

Вдох-выдох

Закройте глаза и сделайте несколько глубоких вдохов через нос и выдохов через рот. Направьте внимание на внутренние ощущения: следите за тем, как на вдохе воздух наполняет тело, а на выдохе уходит напряжение. Продолжайте дышать таким образом в течение нескольких минут. Затем включите медитацию.

Когда и кому подходит медиация от страха и тревоги

Утром

Стресс на работе, многозадачность, ответственность — всё это вызывает тревожные мысли в начале нового дня. Успокаивающие утренние практики помогают приглушить беспокойство, сосредоточиться на задачах и адекватнее оценить предстоящий день.

В течение дня

Использование коротких практик на протяжении дня, особенно в моменты стресса, помогает не накапливать тревогу, а сразу снимать напряжение и проводить день в уравновешенном состоянии.

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Создание аудиомедитации в GigaChat

Подготовка к практике

Расслабляющая атмосфера

Удобная поза

Вдох-выдох

Когда и кому подходит медиация от страха и тревоги

Утром

В течение дня",[],"{'question_type': 'simple', 'seed_document_id': 4, 'topic': 'Сервис GigaChat'}"
54411bb2-4593-4181-8b74-609d77459600,Какая структура промпта используется для генерации интентов?,"json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }","Document 18: lastUpdateDate: 4 апреля 2024

Генерация разных вариантов вопросов {#generatsiya-raznyh-variantov-voprosov}

Пример промпта для генерации различных вариаций вопроса.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], }

```yaml input_variables: [question] output_parser: null template: 'Ты эксперт по страхованию. Твоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных. Генерируя разные версии вопроса пользователя, твоя цель — помочь найти его в страховом договоре. Используй для этого юридический лексикон. Предоставь вопросы в виде списка JSON.

Пример: [""Вопрос1"", ""Вопрос2""]

Вопрос: [{question}] AI:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat from langchain.retrievers.multi_query import JSONLineListOutputParser

giga = GigaChat(credentials=""<авторизационные_данные>"") insurance_prompt = load_prompt( 'lc://prompts/retrievers/multi_query/insurance_agent.yaml' ) llm_chain = LLMChain( llm=giga, prompt=insurance_prompt, output_parser=JSONLineListOutputParser(), )

print(llm_chain.run(question=""Страхуются ли музыкальные инструменты?"")) ```

Document 27: lastUpdateDate: 4 апреля 2024

Генерация вопросов к заданному тексту {#generatsiya-voprosov-k-zadannomu-tsehu}

Пример промпта для генерации различных вопросов к переданному тексту.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Перед тобой некоторая часть целостного документа. Придумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу. Используй информацию ТОЛЬКО из приведенной части документа. Используй непредвзятый и журналистский тон. Не повторяй текст. Формат ответ должен выглядеть вот так: "" Вопрос ... ... Вопрос

Текст документа: {text}

3 вопроса к документу на русском языке:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") generate_question_prompt = load_prompt('lc://prompts/qna/generate_question_prompt.yaml') text = generate_question_prompt.format(text=""... text of your documents ..."") ```

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```

Document 28: lastUpdateDate: 4 апреля 2024

Генерация сущностей {#generatsiya-sushnostey}

Пример промпта для генерации сущностей. Промпт содержит инструкцию по количеству синонимов сущности и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} объектов для сущности ""{subject}"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{""entity"": ""название объекта"", ""synonyms"": [""синоним1"", ""синоним2""]}].' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/entity_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""автомобиль"") ```",[],"{'question_type': 'simple', 'seed_document_id': 18, 'topic': 'Промпты для GigaChat'}"
893510b2-dc07-40b1-9f66-23cfe8bf9af8,Какой метод используется для подсчета количества токенов в строках?,Метод POST v1/tokens/count используется для подсчета количества токенов в строках.,"Document 52: id: post-tokens-count title: ""Подсчитать количество токенов"" description: ""Возвращает объект с информацией о количестве токенов, подсчитанных заданной моделью в строках. Строки передаются в массиве input."" sidebar_label: ""Подсчитать количество токенов"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Чат""],""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""model"",""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для подсчета количества токенов."",""example"":""GigaChat""},""input"":{""type"":""array"",""description"":""Строка или массив строк, в которых надо подсчитать количество токенов."",""items"":{""type"":""string"",""example"":""Я к вам пишу — чего же боле?""}}},""title"":""TokensCountBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""object"":{""type"":""string"",""description"":""Описание того, какая информация содержится в объекте."",""default"":""tokens""},""tokens"":{""type"":""integer"",""description"":""Количество токенов в соответствующей строке."",""example"":7},""characters"":{""type"":""integer"",""description"":""Количество символов в соответствующей строке."",""example"":36}}},""title"":""TokensCount""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postTokensCount"",""description"":""Возвращает объект с информацией о количестве токенов, подсчитанных заданной моделью в строках. Строки передаются в массиве input."",""method"":""post"",""path"":""/tokens/count"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""input"":[""Я к вам пишу — чего же боле?""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Подсчитать количество токенов"",""description"":{""content"":""Возвращает объект с информацией о количестве токенов, подсчитанных заданной моделью в строках. Строки передаются в массиве input."",""type"":""text/plain""},""url"":{""path"":[""tokens"",""count""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Подсчитать количество токенов

Возвращает объект с информацией о количестве токенов, подсчитанных заданной моделью в строках. Строки передаются в массиве input.

Запрос {#zapros}",[],"{'question_type': 'simple', 'seed_document_id': 52, 'topic': 'API GigaChat'}"
ed079dec-1f02-4865-adb2-a2f0736ca0a6,Какой метод HTTP используется для получения изображения по идентификатору?,GET,"Document 53: id: get-file-id title: ""Получить изображение по идентификатору"" description: ""Возвращает файл изображения в бинарном представлении, в формате JPG."" sidebar_label: ""Получить изображение по идентификатору"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Файлы""],""parameters"":[{""name"":""file_id"",""description"":""Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""schema"":{""type"":""string""},""in"":""path"",""required"":true}],""responses"":{""200"":{""content"":{""image/jpg"":{}},""description"":""OK""},""400"":{""description"":""Invalid model ID""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getFileId"",""description"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""method"":""get"",""path"":""/files/{file_id}/content"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить изображение по идентификатору"",""description"":{""content"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""type"":""text/plain""},""url"":{""path"":[""files"","":file_id"",""content""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[{""disabled"":false,""description"":{""content"":""(Required) Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""type"":""text/plain""},""type"":""any"",""value"":"""",""key"":""file_id""}]},""header"":[{""key"":""Accept"",""value"":""image/jpg""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить изображение по идентификатору

Возвращает файл изображения в бинарном представлении, в формате JPG.

Изображения создаются с помощью запроса POST /chat/completions.

Подробнее читайте в разделе Генерация изображений.

:::note

Консоль запроса отключена из-за бинарного формата ответа.

:::

Запрос {#zapros}",[],"{'question_type': 'simple', 'seed_document_id': 53, 'topic': 'API GigaChat'}"
03016ee3-8a65-4df5-b762-a5c293e6c66a,Какой формат изображения возвращается при запросе по идентификатору файла?,"Возвращается файл изображения в бинарном представлении, в формате JPG.","Document 53: id: get-file-id title: ""Получить изображение по идентификатору"" description: ""Возвращает файл изображения в бинарном представлении, в формате JPG."" sidebar_label: ""Получить изображение по идентификатору"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Файлы""],""parameters"":[{""name"":""file_id"",""description"":""Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""schema"":{""type"":""string""},""in"":""path"",""required"":true}],""responses"":{""200"":{""content"":{""image/jpg"":{}},""description"":""OK""},""400"":{""description"":""Invalid model ID""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getFileId"",""description"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""method"":""get"",""path"":""/files/{file_id}/content"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить изображение по идентификатору"",""description"":{""content"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""type"":""text/plain""},""url"":{""path"":[""files"","":file_id"",""content""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[{""disabled"":false,""description"":{""content"":""(Required) Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""type"":""text/plain""},""type"":""any"",""value"":"""",""key"":""file_id""}]},""header"":[{""key"":""Accept"",""value"":""image/jpg""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить изображение по идентификатору

Возвращает файл изображения в бинарном представлении, в формате JPG.

Изображения создаются с помощью запроса POST /chat/completions.

Подробнее читайте в разделе Генерация изображений.

:::note

Консоль запроса отключена из-за бинарного формата ответа.

:::

Запрос {#zapros}",[],"{'question_type': 'simple', 'seed_document_id': 53, 'topic': 'API GigaChat'}"
054f2801-b7c9-43c6-82e9-c7abded53872,Как можно войти в GigaChat?,Войти в GigaChat можно двумя способами — по телефону или Сбер ID. Для входа по телефону нужно ввести номер в поле ввода и вписать СМС-код. Для входа по Сбер ID нужно отсканировать QR-код с помощью камеры телефона и следовать инструкциям.,"Document 8: Вход в GigaChat

После этого вы увидите окно авторизации. Войти в GigaChat можно двумя способами — по телефону или Сбер ID.

1. Вход по телефону

Введите свой номер в поле ввода. Далее вам придёт СМС-код, который необходимо вписать. Вы можете поставить галочку около «Запомнить меня», чтобы не проходить авторизацию снова и снова. А ещё по номеру телефона вы можете создать свой Сбер ID.

2. Вход по Сбер ID

Справа в том же окне находится QR-код, который нужно отсканировать с помощью камеры телефона. Здесь вы тоже можете поставить галочку около «Запомнить меня». Для этого способа необходимо, чтобы на вашем телефоне было установлено приложение Сбербанк Онлайн.

QR-код приведёт вас на сайт СберБанка. В открывшемся окне нажмите «Да», если ваш регион Москва, или выберите другой, нажав на «Изменить регион». После авториации GigaChat запомнит пользователя. В следующий раз при входе в веб-версию нужно будет просто подтвердить актуальность аккаунта кнопкой «Продолжить».

Выглядит страшно, но всё не так, как кажется! Это просто формальности. Нажмите «Принять» на экране.

Затем нажмите на зелёную кнопку «Открыть СберБанк Онлайн», чтобы перейти в мобильное приложение банка.

Далее вы увидите уведомление: «Открыть эту страницу в приложении „Онлайн“?» Нажмите «Открыть».

И наконец, финальное сообщение с подтверждением вашего Сбер ID в самом приложении СберБанка. Нажмите «Подтвердить».

Если всё прошло успешно, вы увидите такое оповещение. Вы восхитительны!

Если у вас нет Сбер ID, создайте его на странице авторизации. Это быстро и просто. Вам понадобится сим-карта мобильного оператора России .

После этих несложных манипуляций GigaChat вас запомнит. В следующий раз при входе в веб-версию вам нужно будет просто подтвердить, что это вы, простой кнопкой «Продолжить».

Теперь вы можете начать диалог с GigaChat. Окно для ввода запросов — внизу экрана, как и в любом мессенджере. Всё для вашего удобства :)

Ваша личная шпаргалка

А сейчас давайте разберёмся, что вы можете увидеть на экране. Это будет ваша шпаргалка, которая заранее ответит на все ваши вопросы — что, как и зачем.

1. Кнопка «Новый чат»

Нажмите «Новый чат», если хотите сменить тему разговора или вовсе начать новый:

Общение с GigaChat

Общение с персонажами

AI-открытки или медитации

2. Список чатов «Все чаты»:

Все чаты хранятся в истории слева от диалога с GigaChat. Нажав на три точки в выделенном диалоге, можно поделиться чатом.

3. «Избранное»

Сохраняйте наиболее важные чаты в разделе ""Избранное"". Всё самое важное и интересное теперь всегда под рукой. Выберите нужный вам чат в списке слева, при наведении, справа появятся три точки меню. В выпавшем меню выбрать пункт ""Добавить в избранное"". Удалить чат из списка избранного. В меню чата выбираем ""Убрать из избранного"". Посмотреть весь список избранных чатов можно, переключая кнопки ""Все чаты""/""Избранное"" в левом верхнем углу. Избранные чаты отмечены серой звездочкой около даты/времени запроса.

4. Профиль пользователя

Информация о пользователе отображается в левом нижнем углу экрана. За счет регистрации по Сбер ID имя пользователя выглядит также как в приложении Сбербанк Онлайн: имя + первая буква фамилии. Сменить имя пользователя нельзя. GigaChat не имеет доступа к банковским данным, не может дать консультацию по счетам и финансам конкретного пользователя.

5. Приветствие и Саджесты

«Как вам GigaChat?» — можно пройти опрос и поделиться опытом работы с GigaChat. Мы учтём все ваши пожелания!

FAQ — Frequently Asked Questions (в переводе — «Часто задаваемые вопросы»). Сюда можно заглянуть, чтобы узнать, как написать интересный запрос, сгенерировать потрясающую картинку, написать сложный код или отрерайтить текст.

«Поддержка» — по всем вопросам по работе GigaChat можно обратиться именно сюда. Наша прекрасная команда обязательно вам поможет!

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Ещё по теме

Как работать с изображениями\ \ ﻿\ \ Написали подробные инструкции с примерами и иллюстрациями

Примеры удачных запросов\ \ ﻿\ \ Cобрали целый каталог

Как формулировать запросы\ \ ﻿\ \ Написали понятные инструкции

1. Вход по телефону

2. Вход по Сбер ID

Ваша личная шпаргалка

1. Кнопка «Новый чат»

2. Список чатов «Все чаты»:

3. «Избранное»

4. Профиль пользователя

5. Приветствие и Саджесты

Document 7: Не работает GigaChat? Проверьте, что отключен VPN

Если это не помогло, напишите боту в Telegram

Написать в поддержку

Что такое GigaChat?

Это русскоязычная мультимодальная нейросетевая модель, которая умеет отвечать на вопросы, вести диалог, писать код, рисовать картинки по запросу.

Где я могу пообщаться с GigaChat?

Начать диалог с GigaChat можно на сайте и ботах Telegram или «ВКонтакте »

Как пользоваться GigaChat, если вы не из России?

Для использования GigaChat понадобятся российский IP-адрес и авторизация через Сбер ID.

На территории Российской Федерации GigaChat работает без ограничений.

У меня не работает GigaChat, что делать?

Проверьте, что у вас отключен VPN.

Если это не помогло, напишите боту поддержки GigaChat в Telegram

Как получить Сбер ID

Если вы клиент Сбера и используете приложение СберБанк Онлайн или СБОЛ, то Сбер ID — это номер вашего телефона.

Как подключить Сбер ID:

Зайдите на сайт Сбера или на страницу авторизации GigaChat

Нажмите на кнопку «Войти по Сбер ID».

Введите номер телефона или согласитесь запустить приложение СберБанк Онлайн, следуйте подсказкам.

Всё готово — Сбер ID есть, вы вошли в сервис.

Я не клиент банка, как мне получить Сбер ID?

Сбер ID могут получить не только клиенты Сбера —для регистрации достаточно сим-карты российского оператора связи.

Почему GigaChat всегда отвечает по разному?

Даже если спрашивать GigaChat одно и то же, каждый его ответ будет уникальным. Это действительно так, вам не показалось. GigaChat почти никогда не повторяется.

Всё дело в том, что GigaChat — это генеративная модель, а не поисковая система. Он создает новый ответ с нуля, пишет его сам в реальном времени. Поисковые системы, например Google или Яндекс, ищут готовые материалы, которые были написаны людьми. Они не создают ничего нового. А GigaChat может рассказывать одинаковую информацию разными словами, совсем как вы. Ещё он постоянно узнаёт новое и жадно учится, поэтому его ответы меняются со временем, по мере роста его экспертизы.

Что такое промпт?

Промпт — это текстовый запрос, на основе которого GigaChat генерирует ответ.

Как работает GigaChat?

В основе GigaChat лежит GigaChat версии 29В (с 29 млрд параметров) и Кандинский версии 3.1 — нейросетевая модель для генерации изображений. Подробнее о том, как создавался и работает GigaChat в нашей статье на Хабр .

Что умеет GigaChat?

Он отвечает на вопросы, может написать код, письмо или целую песню. Поможет составить поздравление с любым праздником или меню на неделю. А ещё с помощью GigaChat можно решить профильные задачи: написать продающий текст, слоганы для рекламной кампании, описания карточек товаров для маркетплейса или посты для соцсетей.

Как удалить диалог с GigaChat?

Есть два способа удалить диалог:

Откройте диалог, нажмите на иконку мусорной корзины (она в верхнем правом углу, рядом с кнопкой «Поделиться») и нажмите «Удалить».

Наведите стрелку на нужный диалог в списке чатов слева. В правом верхнем углу этого диалога появятся три точки, нажмите на них и нажмите «Удалить».

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Ещё по теме

Как работать с изображениями\ \ ﻿\ \ Написали подробные инструкции с примерами и иллюстрациями

Примеры удачных запросов\ \ ﻿\ \ Cобрали целый каталог

Как формулировать запросы\ \ ﻿\ \ Написали понятные инструкции

Где я могу пообщаться с GigaChat?

Как пользоваться GigaChat, если вы не из России?

У меня не работает GigaChat, что делать?

Как получить Сбер ID

Я не клиент банка, как мне получить Сбер ID?

Почему GigaChat всегда отвечает по разному?

Что такое промпт?

Как работает GigaChat?

Что умеет GigaChat?

Как удалить диалог с GigaChat?

Document 9: Главная

База знаний

База знаний

БАЗА ЗНАНИЙ

Главная Общие вопросы Туториалы AI-Помощники Статьи

Каталог готовых запросов для GigaChat \ \ Готовые промпты помогут работать с нейросетью быстрее и качественнее\ \

— GigaChat, с чего начать?

GigaChat: с чего начать\ \ Проверьте, что VPN выключен и авторизуйтесь по Сбер ID

Как формулировать запросы\ \ Написали понятные инструкции

Общие вопросы \ и ответы\ \ Узнайте, как работает \ и что умеет GigaChat

— Как мне создать текст, картинку или код?

Как работать с текстом\ \ Рассказываем, что GigaChat \ умеет и как написать запрос, чтобы он точно понял задание

Как работать \ с изображениями\ \ Написали подробные инструкции с примерами и иллюстрациями

Как работать с кодом\ \ Напишет, исправит \ и проанализирует код. Покажем примеры запросов

— Какие есть AI-помощники?

\ \ Кот Баюн\ \ Создаст сказку и озвучит её

Статьи

Смотреть больше\ \

Топ-12 нейросетей на русском языке\ \ Список популярных \ онлайн-сервисов на базе искусственного интеллекта на русском языке

Генерация сценариев в нейросети GigaChat\ \ GigaChat пишет сценарии для рилсов, видео, а также сюжеты для фильмов

GigaChat \ для веб-разработки и дизайна\ \ Как использовать GigaChat при разработке и продвижении \ сайтов

Часто задаваемые вопросы

Почему надо регистрироваться?

После регистрации вы сможете пользоваться GigaChat без ограничений. Все чаты и созданные диалоги с персонажами будут храниться в одном месте — к ним всегда можно вернуться и продолжить разговор там, где вы закончили.

Чат безопасен? Данные не украдут?

Доступ к истории ваших чатов имеете только вы. Другие люди могут увидеть часть диалога или результат вашего совместного творчества с GigaChat, если вы нажмёте на кнопку «Поделиться».

GigaChat бесплатный навсегда?

Да. Пользоваться GigaChat можно абсолютно бесплатно, без лимитов и ограничений. Правда-правда. Без подвохов.

Что ещё умеет GigaChat?

GigaChat умеет рисовать картинки, писать и править код, сочинять оригинальные тексты — прозу и стихи, создавать открытки и поздравления, генерировать медитации и сказки, озвучивать их. Поможет подготовиться к собеседованию, выступлению перед классом или признанию в чувствах. Возможно, GigaChat научился ещё чему-то, даже пока вы читали этот ответ. Так что заглядывайте почаще и пробуйте новое.

Авторизация по Сбер ID безопасна?

Войти в GigaChat можно по Сбер ID, для этого совсем не нужно быть клиентом банка. Вход по Сбер ID = вход по номеру телефона, но безопаснее. Сервис надёжно шифрует вашу личную информацию и использует протоколы защищённой передачи данных. Их нельзя перехватить, а мы видим только ваши имя и номер телефона.

GigaChat — полностью бесплатное российское решение

Перейти в чат

Что такое GigaChat API и как его использовать?

Интегрируйте GigaChatв корпоративный софт, создайте чат-бота, делегируйте работус документами

Документация

Бот GigaChat в Telegram\ \ Бот GigaChat в VK\ \

в GigaChat

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо",[],"{'question_type': 'simple', 'seed_document_id': 8, 'topic': 'Сервис GigaChat'}"
72d4fa82-472f-42fe-866f-4438c9fb0383,Какой пример промпта используется для генерации синонимов?,"json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }","Document 31: lastUpdateDate: 8 августа 2024

Генерация синонимов {#generatsiya-sinonimov}

Пример промпта для генерации синонимов. Промпт содержит инструкцию по количеству синонимов и формату ответа, а также примеры синонимов.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject, examples] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} синонимов для слова ""{subject}"". Примеры фраз: {examples}. Результат верни в формате JSON-списка без каких-либо пояснений, например, [""синоним1"", ""синоним2"", ""синоним3"", ""синоним4""]. Не повторяй фразы из примера и не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/synonyms_generation_with_examples.yaml') text = synonyms_with_examples.format(dataset_size_min=5, dataset_size_max=10, subject=""кошка"", examples='[""кот"", ""котенок""]') ```

Document 28: lastUpdateDate: 4 апреля 2024

Генерация сущностей {#generatsiya-sushnostey}

Пример промпта для генерации сущностей. Промпт содержит инструкцию по количеству синонимов сущности и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} объектов для сущности ""{subject}"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{""entity"": ""название объекта"", ""synonyms"": [""синоним1"", ""синоним2""]}].' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/entity_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""автомобиль"") ```

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```

Document 18: lastUpdateDate: 4 апреля 2024

Генерация разных вариантов вопросов {#generatsiya-raznyh-variantov-voprosov}

Пример промпта для генерации различных вариаций вопроса.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], }

```yaml input_variables: [question] output_parser: null template: 'Ты эксперт по страхованию. Твоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных. Генерируя разные версии вопроса пользователя, твоя цель — помочь найти его в страховом договоре. Используй для этого юридический лексикон. Предоставь вопросы в виде списка JSON.

Пример: [""Вопрос1"", ""Вопрос2""]

Вопрос: [{question}] AI:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat from langchain.retrievers.multi_query import JSONLineListOutputParser

giga = GigaChat(credentials=""<авторизационные_данные>"") insurance_prompt = load_prompt( 'lc://prompts/retrievers/multi_query/insurance_agent.yaml' ) llm_chain = LLMChain( llm=giga, prompt=insurance_prompt, output_parser=JSONLineListOutputParser(), )

print(llm_chain.run(question=""Страхуются ли музыкальные инструменты?"")) ```",[],"{'question_type': 'simple', 'seed_document_id': 31, 'topic': 'Промпты для GigaChat'}"
ed3c334e-f0dc-4115-8ce8-336088e609ac,Какой адрес используется для обращения к моделям в раннем доступе?,Для обращения к моделям в раннем доступе используйте адрес https://gigachat-preview.devices.sberbank.ru/,"Document 51: import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить ответ модели на сообщения

Возвращает ответ модели сгенерированный на основе переданных сообщений.

Запрос на генерацию можно передавать моделям в раннем доступе. Для обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Запрос {#zapros}",[],"{'question_type': 'simple', 'seed_document_id': 51, 'topic': 'Others'}"
79bc4393-ee9b-42d3-b90e-0fa79276ba4e,Какой URL используется для обращения к моделям GigaChat в раннем доступе?,Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.,"Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}

Document 49: id: post-chat title: ""Получить ответ модели на сообщения"" description: ""Возвращает ответ модели сгенерированный на основе переданных сообщений."" sidebar_label: ""Получить ответ модели на сообщения"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""example"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""required"":[""model"",""messages""],""type"":""object"",""properties"":{""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""messages"":{""type"":""array"",""description"":""Массив сообщений, которыми пользователь обменивался с моделью."",""items"":{""type"":""object"",""properties"":{""role"":{""type"":""string"",""description"":""Роль автора сообщения:\n\n system — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;\n assistant — ответ модели;\n user — сообщение пользователя;\n function — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле content валидный JSON-объект с результатами работы функции.\n\nДля сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.\n"",""enum"":[""system"",""user"",""assistant"",""function""],""example"":""user""},""content"":{""description"":""Содержимое сообщения. Зависит от роли.\n\nЕсли поле передается в сообщении с ролью function, то в нем указывается валидный JSON-объект с аргументами функции, указанной в поле function_call.name.\n\nВ остальных случаях содержит либо системный промпт (сообщение с ролью system), либо текст сообщения пользователя или модели.\n""},""functions_state_id"":{""type"":""string"",""format"":""uuidv4"",""description"":""Идентификатор, который объединяет массив функций, переданных запросе.\nВозвращается в ответе модели (сообщение с \""role\"": \""assistant\"") при вызове встроенных или собственных функций.\nПозволяет сохранить контекст вызова функции и повысить качество работы модели.\nДля этого нужно передать идентификатор в запросе на генерацию, в сообщении с ролью assistant.\n\nПоле заменяет массив data_for_context. В будущем поддержка массива будет прекращена.\n\nСейчас поле работает только при обращении к моделям в раннем доступе.\n"",""example"":""77d3fb14-457a-46ba-937e-8d856156d003""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""message""}},""function_call"":{""description"":""Поле которе отвечает за то, как GigaChat будет работать с функциями.\nМожет быть строкой или объектом.\n\nВозможные значения:\n\n none — режим работы по умолчанию. Если запрос не содержит function_call или значение поля — none, GigaChat не вызовет функции, а просто сгенерирует ответ в соотвествии с полученными сообщениями;\n\n auto — в зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию.\nМодель вызывает встроенные функции, если отсутствует массив functions с описанием пользовательских функций.\nЕсли запрос содержит \""function_call\"": \""auto\"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;\n\n {\""name\"": \""название_функции\""} — принудительная генерация аргументов для указанной функции. Вы можете явно задать часть аргументов с помощью объекта partial_arguments. Остальные аргументы модель сгенерирует самостоятельно. При принудительной генерации, массив functions обязан содержать объект с описанием указанной функции. В противном случае вернется ошибка.\n"",""oneOf"":[{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""Название функции."",""example"":""sbermarket-pizza_order""},""partial_arguments"":{""type"":""object"",""description"":""JSON-объект в котором вы можете явно задать некоторые аргументы указанной функции. Остальные аргументы модель сгенерирует самостоятлеьно."",""properties"":{}}},""title"":""function_call_custom_function""},{""type"":""string"",""enum"":[""auto"",""none""],""description"":""Режим работы с функциями"",""example"":""auto"",""title"":""function_call_none_auto""}]},""functions"":{""type"":""array"",""description"":""Массив с описанием пользовательских функций."",""items"":{""type"":""object"",""required"":[""name"",""parameters""],""properties"":{""name"":{""type"":""string"",""description"":""Название пользовательской функции, для которой будут сгенерированы аргументы."",""example"":""pizza_order""},""description"":{""type"":""string"",""description"":""Текстовое описание функции."",""example"":""Функция для заказа пиццы""},""parameters"":{""type"":""object"",""properties"":{},""description"":""Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции.""},""few_shot_examples"":{""type"":""array"",""description"":""Объекты с парами запрос_пользователя-параметры_функции, которые будут служить модели примерами ожидаемого результата.\n"",""items"":{""type"":""object"",""required"":[""request"",""params""],""properties"":{""request"":{""type"":""string"",""description"":""Запрос пользователя."",""example"":""Погода в Москва в ближайшие три дня""},""params"":{""type"":""object"",""description"":""Пример заполнения параметров пользовательской функции."",""properties"":{}}}}},""return_parameters"":{""type"":""object"",""description"":""JSON-объект с описанием параметров, которые может вернуть ваша функция."",""properties"":{}}}}},""temperature"":{""format"":""float"",""type"":""number"",""description"":""Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""minimum"":0,""exclusiveMinimum"":true},""top_p"":{""format"":""float"",""type"":""number"",""description"":""Параметр используется как альтернатива температуре (поле temperature). Задает вероятностную массу токенов, которые должна учитывать модель.\nТак, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели. Значения изменяются в диапазоне от ноля до единицы включительно.\n\nЗначение изменяется в диапазоне от 0 до 1.\n"",""minimum"":0,""maximum"":1},""n"":{""description"":""Количество вариантов ответов, которые нужно сгенерировать для каждого входного сообщения.\n\nКоличество вариантов может изменяться от одного до четырех. По умолчанию модель возвращает один вариант ответа.\n"",""format"":""int64"",""type"":""integer"",""deprecated"":true,""minimum"":1,""maximum"":4,""default"":1,""example"":1},""stream"":{""type"":""boolean"",""description"":""Указывает, что сообщения надо передавать по частям в потоке.\n\nСообщения передаются по протоколу SSE.\n\nПоток завершается событием data: [DONE].\n\nПодробнее читайте в разделе Потоковая передача токенов.\n"",""default"":false,""example"":false},""max_tokens"":{""description"":""Максимальное количество токенов, которые будут использованы для создания ответов."",""format"":""int32"",""type"":""integer""},""repetition_penalty"":{""type"":""number"",""format"":""float"",""description"":""Количество повторений слов:\n\n Значение 1.0 — нейтральное значение.\n При значении больше 1 модель будет стараться не повторять слова.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""example"":1},""update_interval"":{""type"":""number"",""description"":""Параметр потокового режима (\""stream\"": \""true\"").\nЗадает минимальный интервал в секундах, который проходит между отправкой токенов.\nНапример, если указать 1, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.\n"",""default"":0,""example"":0}},""title"":""Chat""}}}},""tags"":[""Чат""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""choices"":{""type"":""array"",""description"":""Массив ответов модели."",""items"":{""type"":""object"",""properties"":{""message"":{""type"":""object"",""description"":""Сгенерированное сообщение."",""properties"":{""role"":{""type"":""string"",""enum"":[""assistant"",""function_in_progress""],""description"":""Роль автора сообщения.\n\nРоль function_in_progress используется при работе встроенных функций в режиме потоковой передачи токенов.\n"",""example"":""assistant""},""content"":{""type"":""string"",""description"":""Содержимое сообщения, например, результат генерации.\n\nВ сообщениях с ролью function_in_progress содержит информацию о том, сколько времени осталось до завершения работы встроенной функции.\n"",""example"":""Здравствуйте! К сожалению, я не могу дать точный ответ на этот вопрос, так как это зависит от многих факторов. Однако обычно релиз новых функций и обновлений в GigaChat происходит постепенно и незаметно для пользователей. Рекомендую следить за новостями и обновлениями проекта в официальном сообществе GigaChat или на сайте разработчиков.""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""MessagesRes""},""index"":{""format"":""int32"",""type"":""integer"",""description"":""Индекс сообщения в массиве начиная с ноля."",""example"":0},""finish_reason"":{""description"":""Причина завершения гипотезы. Возможные значения:\n\n stop — модель закончила формировать гипотезу и вернула полный ответ;\n length — достигнут лимит токенов в сообщении;\n function_call — указывает что при запросе была вызвана встроенная функция или сгенерированы аргументы для пользовательской функции;\n blacklist — запрос подпадает под тематические ограничения.\n"",""type"":""string"",""enum"":[""stop"",""length"",""function_call"",""blacklist""],""example"":""stop""}},""title"":""Choices""}},""created"":{""format"":""int64"",""type"":""integer"",""description"":""Дата и время создания ответа в формате Unix time."",""example"":1678878333},""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""usage"":{""type"":""object"",""description"":""Данные об использовании модели."",""properties"":{""prompt_tokens"":{""format"":""int32"",""description"":""Количество токенов во входящем сообщении (роль user)."",""type"":""integer"",""example"":18},""completion_tokens"":{""format"":""int32"",""description"":""Количество токенов, сгенерированных моделью (роль assistant)."",""type"":""integer"",""example"":68},""total_tokens"":{""format"":""int32"",""description"":""Общее количество токенов."",""type"":""integer"",""example"":86}},""title"":""Usage""},""object"":{""type"":""string"",""description"":""Название вызываемого метода."",""example"":""chat.completion""}},""title"":""ChatCompletion""}}},""description"":""OK""},""400"":{""description"":""Bad request format""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""},""422"":{""description"":""Validation error""},""429"":{""description"":""Too many requests""},""500"":{""description"":""Internal Server Error""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postChat"",""description"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""method"":""post"",""path"":""/chat/completions"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"":

Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication",[],"{'question_type': 'simple', 'seed_document_id': 54, 'topic': 'API GigaChat'}"
ab2e18e2-c33e-49bf-a6c0-5084aeb866ca,"Каким образом следует передавать историю чата при использовании GigaChat API, если необходимо учитывать предыдущие запросы и ответы?",Историю чата нужно передавать явно в поле messages запроса POST /chat/completions.,"Document 33: lastUpdateDate: 1 июля 2024

Работа с историей чата {#sohranenie-konteksta-razgovora}

Передача истории чата позволяет GigaChat работать с результатами прошлых запросов пользователя. Когда вы переписываетесь с нейросетевой моделью в веб-интерфейсе, она автоматически учитывает историю чата.

Если для обмена сообщениями вы используете GigaChat API, историю чата нужно передавать явно в поле messages запроса POST /chat/completions.

Пример запроса с историей чата:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Когда уже ИИ захватит этот мир?"" }, { ""role"": ""assistant"", ""content"": ""Пока что это не является неизбежным событием. Несмотря на то, что искусственный интеллект (ИИ) развивается быстрыми темпами и может выполнять сложные задачи все более эффективно, он по-прежнему ограничен в своих возможностях и не может заменить полностью человека во многих областях. Кроме того, существуют этические и правовые вопросы, связанные с использованием ИИ, которые необходимо учитывать при его разработке и внедрении."" }, { ""role"": ""user"", ""content"": ""Думаешь, у нас еще есть шанс?"" } ], }'",[],"{'question_type': 'complex', 'seed_document_id': 33, 'topic': 'Работа с GigaChat API'}"
9bd44a55-3935-429c-84a9-96a16bdf24ef,"Как долго действует токен доступа для авторизации запросов к GigaChat API, если он был получен с использованием POST-запроса и Bearer-схемы?",Токен действителен в течение 30 минут.,"Document 10: lastUpdateDate: 19 июля 2024

import TesterSecretGeneration from '/docs/ru/includes/gigachat/_tester-secret-generation.mdx';

Быстрый старт для физических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-sozdayte-proekt-giga-chat-api}

Проект GigaChat API нужен для получения авторизационных данных, а также для управления платными опциями. С помощью авторизационных данных вы можете получить токен доступа для авторизации запросов к API.

import AuthData from '/docs/ru/includes/gigachat/_auth-data.mdx';

:::note

Если у вас уже есть личный кабинет, авторизуйтесь с помощью SberID или СберБизнес ID и создайте проект GigaChat API по ссылке.

:::

Если у вас нет личного кабинета, для создания проекта:

Зарегистрируйтесь в личном кабинете, используя свой аккаунт Сбер ID.

Нажмите кнопку Создать проект в левом меню.

Выберите GigaChat API в разделе AI-модели.

Ознакомьтесь и примите условия пользовательского соглашения.

В открывшемся окне введите название проекта.

В интерфейсе проекта можно:

Ознакомиться с условиями действующего тарифа. Каждому новому пользователю по умолчанию подключается тариф Freemium. Об условиях тарифа и доступных тарифных планах читайте в разделе Тарифы и оплата.

Приобрести дополнительные пакеты токенов.

Узнать свой идентификатор — значение поля Client ID в панели справа.

Узнать версию API, к которой предоставляется доступ. Версия указана в поле Scope в панели справа. Для физических лиц значение поля — GIGACHAT_API_PERS.

Сгенерировать клиентский ключ.

Для генерации клиентского ключа нажмите кнопку Сгенерировать новый Client Secret.

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получение токена доступа {#shag-2-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_PERS' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также вы сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret) в консоли.

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста и изображений {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API",[],"{'question_type': 'complex', 'seed_document_id': 10, 'topic': 'Сервис GigaChat'}"
81e21914-60c3-4078-9541-b5d5a8b5263c,"Какой параметр необходимо включить в запрос POST /chat/completions для генерации изображения с помощью GigaChat, и какое значение ему присвоить?","Для создания изображения в запросе нужно передать параметр ""function_call"": ""auto"", с помощью которого модель определяет необходимость вызова функции text2image.","Document 43: lastUpdateDate: 23 мая 2024

Создание изображений {#generatsiya-izobrazheniy}

GigaChat API вернет изображение, если в запросе на генерацию POST /chat/completions получит соответствующее сообщение, например, «Нарисуй розового кота». Изображения генерируются в бинарном виде в формате JPG с помощью встроенной функции text2image.

В ответ GigaChat возвращает идентификатор созданного изображения, которое можно скачать с помощью запроса POST /files/:file_id/content.

Для создания изображения в запросе нужно передать параметр ""function_call"": ""auto"", с помощью которого модель определяет необходимость вызова функции text2image. При создании изображений с помощью встроенной функции модель возвращает ответ с результатом ""finish_reason"": ""stop"".

:::tip

Вы можете стилизовать изображения с помощью системного промпта.

:::

Пример запроса на создание изображения:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", }'

Пример ответа:

json { ""choices"": [ { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" } ], ""created"": 1716367703, ""model"": ""GigaChat:3.1.25.3"", ""object"": ""chat.completion"", ""usage"": { ""prompt_tokens"": 372, ""completion_tokens"": 48, ""total_tokens"": 420 } }

Массив data_for_context содержит сообщения для работы модели в правильном контексте.

:::note

Подробнее о функциях — в разделе Работа с функциями.

:::

Скачивание изображения {#skachivanie-izobrazheniya}

Ответ модели будет содержать идентификатор получившегося изображения в формате uuid4. Идентификатор передается в поле message.content, в теге <img>, в атрибуте src:

json { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" }

Для скачивания изображения передайте полученный идентификатор в запросе GET /files/{file_id}/content:

shell curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content' -o ""<имя_файла>.jpg"" \ -H 'Accept: application/jpg' \ -H 'Authorization: Bearer <токен_доступа>'

```py import requests import shutil

url = ""https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content""

headers = { 'Accept': 'application/jpg', 'Authorization': 'Bearer <токен_доступа>' }

response = requests.request(""GET"", url, headers=headers, stream=True)

with open('<имя_файла>.jpg', 'wb') as out_file: shutil.copyfileobj(response.raw, out_file) del response ```

Если вы используете коллекцию запросов Postman, вы можете сохранить ответ на запрос GET /files/{file_id}/content в файл с помощью опции Save response to file.

В результате вы получите файл с расширением bin.

Чтобы просмотреть изображение измените расширение на jpg.

Ответ на запрос будет содержать бинарное представление файла в формате JPG.

Смотрите также {#smotrite-takzhe}

Примеры промптов для создания изображений

Работа с функциями",[],"{'question_type': 'complex', 'seed_document_id': 43, 'topic': 'Работа с GigaChat API'}"
ae7a7f0b-eafc-47e2-920e-42871858b8c6,"Какие бизнес-задачи может решать GigaChat, учитывая его возможности в разных отраслях и условиях?","GigaChat может ускорить процессы, автоматизировать рутину, подсказывать идеи, оценивать качество общения и CSI с помощью ИИ, автоматизировать общение с клиентами, обрабатывать данные и выдавать финансовые сводки, подготавливать сценарии для UAT на основе бизнес-требований, осуществлять умный поиск по документам, отвечать на вопросы по законодательной базе, предоставлять советы по эксплуатации оборудования, оптимизировать закупки ресурсов, создавать посты и рекламу, классифицировать информацию, и многое другое.","Document 6: напарник в работе, учёбе и дома =================================

GigaChat — бесплатная нейросеть без vpn на русском языке, которая общается как человек

Войти в GigaChat Попробовать прямо здесь

Станьте лучшим с GigaChat

Нейросеть подкинет вам идей, поможет развиваться, выполнит скучные задачи, освободит время и развлечёт

Нарисует картинки

Напишет тексты

Обучит английскому

Придумает шутки

Даст идею для старт-апа

Решит уравнение

Расскажет сказки

Придумает слоган

Оживите нейросеть, выбрав характер

Персонажи — тот же GigaChat, но с душой и талантами

Хвалёнушка

Контент-мейкер

Кот Баюн

GigaChat

Поведение человека

Позитивная

Эмпатичная

Активный собеседник

Войти и поболтать

Легко начать без знаний и обучения

Умеет читать текст в файлах

Объяснит простым языком

Помогает с учёбой

Переведи файлы на английский

Краткое содержание:

A neural network is an artificial neural network, a self—learning system built on the principle of organization and functioning of biological neural networks.

Как назвать сына?

Сейчас в моде древнерусские имена. Как насчёт Ярополк?

Напиши самые редкие имена

Как убедить мужа назвать сына Эдвардом?

Как понять теорему Пифагора?

В прямоугольном треугольнике квадрат длины гипотенузы (это самый длинный отрезок, который соединяет противо-лежащие углы) равен сумме квадратов длин катетов (отрезков, примыкающихк прямому углу).

Войти в GigaChat Попробовать прямо здесь

Генерирует картинки в любом стиле

Ещё вариант

Нарисуй: взрослый лев стоит на обрыве, саванна, закат

Ещё вариант

Нарисуй: мужчина в плаще, воротник стоит, в шляпе-федоре, крупный план, черно-белая картинка

Ещё вариант

Нарисуй: девушка с короткими синими волосами распадается на пиксели, стиль киберпанк

Ещё вариант

Нарисуй могучее дерево, растущее до облаков, крона мягко-жёлтого цвета, стиль Artstation

Ещё вариант

Сгенерируй милого робота-пылесоса в стиле 3D, будто он сделан по технологии 80-х

Ещё вариант

Нарисуй: взрослый лев стоит на обрыве, саванна, закат

Ещё вариант

Нарисуй: мужчина в плаще, воротник стоит, в шляпе-федоре, крупный план, черно-белая картинка

Ещё вариант

Нарисуй: девушка с короткими синими волосами распадается на пиксели, стиль киберпанк

Ещё вариант

Нарисуй могучее дерево, растущее до облаков, крона мягко-жёлтого цвета, стиль Artstation

Ещё вариант

Сгенерируй милого робота-пылесоса в стиле 3D, будто он сделан по технологии 80-х

Поможет в любом вопросе

Объясни детям, что такое электролиз

Составь чеклист ремонта ванной

Составь объявление для рекламы кофейни «Идеальная чашка»

Составь список тем для курсовой работы по предмету «Менеджмент»

Мне нужен референс для портрета

У меня был тяжелый день...

Придумай пост на тему сидячего образа жизни в стиле инфлюенсера

Войти в GigaChat Попробовать прямо здесь

Испытайте сейчас, зарегистрируйтесь потом

Привет, это GigaChat! Я создан, чтобы покорить ваше сердечко и стать идеальным помощником! Могу писать тексты и краткие пересказы, создавать картинки, объяснять программный код или помочь с домашним заданием. А ещё распознаю речь и озвучиваю ответы.

Что умеет GigaChat?

Придумай 5 идей для путешествий

Зачем жирафу длинная шея?

Войти

В полную версию

Версия без ограничений и с сохранением диалогов

Часто задаваемые вопросы

Почему надо регистрироваться?

После регистрации вы сможете пользоваться GigaChat без ограничений. Все чаты и созданные диалоги с персонажами будут храниться в одном месте — к ним всегда можно вернуться и продолжить разговор там, где вы закончили.

Чат безопасен? Данные не украдут?

Доступ к истории ваших чатов имеете только вы. Другие люди могут увидеть часть диалога или результат вашего совместного творчества с GigaChat, если вы нажмёте на кнопку «Поделиться».

GigaChat бесплатный навсегда?

Да. Пользоваться GigaChat можно абсолютно бесплатно, без лимитов и ограничений. Правда-правда. Без подвохов.

Что ещё умеет GigaChat?

GigaChat умеет рисовать картинки, писать и править код, сочинять оригинальные тексты — прозу и стихи, создавать открытки и поздравления, генерировать медитации и сказки, озвучивать их. Поможет подготовиться к собеседованию, выступлению перед классом или признанию в чувствах. Возможно, GigaChat научился ещё чему-то, даже пока вы читали этот ответ. Так что заглядывайте почаще и пробуйте новое.

Авторизация по Сбер ID безопасна?

Войти в GigaChat можно по Сбер ID, для этого совсем не нужно быть клиентом банка. Вход по Сбер ID = вход по номеру телефона, но безопаснее. Сервис надёжно шифрует вашу личную информацию и использует протоколы защищённой передачи данных. Их нельзя перехватить, а мы видим только ваши имя и номер телефона.

Чем отличается GigaChat от ChatGPT и ruGPT-3?

GigaChat и ChatGPT — это нейросетевые языковые модели или, проще говоря, нейросети. Отличие в том, что GigaChat — русскоязычная модель, а ChatGPT — англоязычная. GigaChat обучается на русскоязычных текстах и поэтому лучше понимает русскую речь. ChatGPT тоже может общаться на русском, но с ограничениями, поскольку обучается в первую очередь на англоязычных базах. GigaChat постепенно совершенствуется. При первом запуске сервис работал на основе ruGPT-3 — русскоязычного аналога ChatGPT. Сейчас его исходный код находится в открытом доступе и может применяться разработчиками в личных и коммерческих целях.

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо

Document 9: Главная

База знаний

База знаний

БАЗА ЗНАНИЙ

Главная Общие вопросы Туториалы AI-Помощники Статьи

Каталог готовых запросов для GigaChat \ \ Готовые промпты помогут работать с нейросетью быстрее и качественнее\ \

— GigaChat, с чего начать?

GigaChat: с чего начать\ \ Проверьте, что VPN выключен и авторизуйтесь по Сбер ID

Как формулировать запросы\ \ Написали понятные инструкции

Общие вопросы \ и ответы\ \ Узнайте, как работает \ и что умеет GigaChat

— Как мне создать текст, картинку или код?

Как работать с текстом\ \ Рассказываем, что GigaChat \ умеет и как написать запрос, чтобы он точно понял задание

Как работать \ с изображениями\ \ Написали подробные инструкции с примерами и иллюстрациями

Как работать с кодом\ \ Напишет, исправит \ и проанализирует код. Покажем примеры запросов

— Какие есть AI-помощники?

\ \ Кот Баюн\ \ Создаст сказку и озвучит её

Статьи

Смотреть больше\ \

Топ-12 нейросетей на русском языке\ \ Список популярных \ онлайн-сервисов на базе искусственного интеллекта на русском языке

Генерация сценариев в нейросети GigaChat\ \ GigaChat пишет сценарии для рилсов, видео, а также сюжеты для фильмов

GigaChat \ для веб-разработки и дизайна\ \ Как использовать GigaChat при разработке и продвижении \ сайтов

Часто задаваемые вопросы

Почему надо регистрироваться?

После регистрации вы сможете пользоваться GigaChat без ограничений. Все чаты и созданные диалоги с персонажами будут храниться в одном месте — к ним всегда можно вернуться и продолжить разговор там, где вы закончили.

Чат безопасен? Данные не украдут?

Доступ к истории ваших чатов имеете только вы. Другие люди могут увидеть часть диалога или результат вашего совместного творчества с GigaChat, если вы нажмёте на кнопку «Поделиться».

GigaChat бесплатный навсегда?

Да. Пользоваться GigaChat можно абсолютно бесплатно, без лимитов и ограничений. Правда-правда. Без подвохов.

Что ещё умеет GigaChat?

GigaChat умеет рисовать картинки, писать и править код, сочинять оригинальные тексты — прозу и стихи, создавать открытки и поздравления, генерировать медитации и сказки, озвучивать их. Поможет подготовиться к собеседованию, выступлению перед классом или признанию в чувствах. Возможно, GigaChat научился ещё чему-то, даже пока вы читали этот ответ. Так что заглядывайте почаще и пробуйте новое.

Авторизация по Сбер ID безопасна?

Войти в GigaChat можно по Сбер ID, для этого совсем не нужно быть клиентом банка. Вход по Сбер ID = вход по номеру телефона, но безопаснее. Сервис надёжно шифрует вашу личную информацию и использует протоколы защищённой передачи данных. Их нельзя перехватить, а мы видим только ваши имя и номер телефона.

GigaChat — полностью бесплатное российское решение

Перейти в чат

Что такое GigaChat API и как его использовать?

Интегрируйте GigaChatв корпоративный софт, создайте чат-бота, делегируйте работус документами

Документация

Бот GigaChat в Telegram\ \ Бот GigaChat в VK\ \

в GigaChat

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо

Document 7: Не работает GigaChat? Проверьте, что отключен VPN

Если это не помогло, напишите боту в Telegram

Написать в поддержку

Что такое GigaChat?

Это русскоязычная мультимодальная нейросетевая модель, которая умеет отвечать на вопросы, вести диалог, писать код, рисовать картинки по запросу.

Где я могу пообщаться с GigaChat?

Начать диалог с GigaChat можно на сайте и ботах Telegram или «ВКонтакте »

Как пользоваться GigaChat, если вы не из России?

Для использования GigaChat понадобятся российский IP-адрес и авторизация через Сбер ID.

На территории Российской Федерации GigaChat работает без ограничений.

У меня не работает GigaChat, что делать?

Проверьте, что у вас отключен VPN.

Если это не помогло, напишите боту поддержки GigaChat в Telegram

Как получить Сбер ID

Если вы клиент Сбера и используете приложение СберБанк Онлайн или СБОЛ, то Сбер ID — это номер вашего телефона.

Как подключить Сбер ID:

Зайдите на сайт Сбера или на страницу авторизации GigaChat

Нажмите на кнопку «Войти по Сбер ID».

Введите номер телефона или согласитесь запустить приложение СберБанк Онлайн, следуйте подсказкам.

Всё готово — Сбер ID есть, вы вошли в сервис.

Я не клиент банка, как мне получить Сбер ID?

Сбер ID могут получить не только клиенты Сбера —для регистрации достаточно сим-карты российского оператора связи.

Почему GigaChat всегда отвечает по разному?

Даже если спрашивать GigaChat одно и то же, каждый его ответ будет уникальным. Это действительно так, вам не показалось. GigaChat почти никогда не повторяется.

Всё дело в том, что GigaChat — это генеративная модель, а не поисковая система. Он создает новый ответ с нуля, пишет его сам в реальном времени. Поисковые системы, например Google или Яндекс, ищут готовые материалы, которые были написаны людьми. Они не создают ничего нового. А GigaChat может рассказывать одинаковую информацию разными словами, совсем как вы. Ещё он постоянно узнаёт новое и жадно учится, поэтому его ответы меняются со временем, по мере роста его экспертизы.

Что такое промпт?

Промпт — это текстовый запрос, на основе которого GigaChat генерирует ответ.

Как работает GigaChat?

В основе GigaChat лежит GigaChat версии 29В (с 29 млрд параметров) и Кандинский версии 3.1 — нейросетевая модель для генерации изображений. Подробнее о том, как создавался и работает GigaChat в нашей статье на Хабр .

Что умеет GigaChat?

Он отвечает на вопросы, может написать код, письмо или целую песню. Поможет составить поздравление с любым праздником или меню на неделю. А ещё с помощью GigaChat можно решить профильные задачи: написать продающий текст, слоганы для рекламной кампании, описания карточек товаров для маркетплейса или посты для соцсетей.

Как удалить диалог с GigaChat?

Есть два способа удалить диалог:

Откройте диалог, нажмите на иконку мусорной корзины (она в верхнем правом углу, рядом с кнопкой «Поделиться») и нажмите «Удалить».

Наведите стрелку на нужный диалог в списке чатов слева. В правом верхнем углу этого диалога появятся три точки, нажмите на них и нажмите «Удалить».

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Ещё по теме

Как работать с изображениями\ \ ﻿\ \ Написали подробные инструкции с примерами и иллюстрациями

Примеры удачных запросов\ \ ﻿\ \ Cобрали целый каталог

Как формулировать запросы\ \ ﻿\ \ Написали понятные инструкции

Где я могу пообщаться с GigaChat?

Как пользоваться GigaChat, если вы не из России?

У меня не работает GigaChat, что делать?

Как получить Сбер ID

Я не клиент банка, как мне получить Сбер ID?

Почему GigaChat всегда отвечает по разному?

Что такое промпт?

Как работает GigaChat?

Что умеет GigaChat?

Как удалить диалог с GigaChat?

Document 5: ИНТЕГРИРУЙТЕ ИИ В СВОЙ БИЗНЕС ===============================

GigaChat B2B — нейросеть ДЛЯ БИЗНЕСА Ускорит процессы, автоматизирует рутину, подскажет идеи

Клиентское обслуживание

Оценит качество общения и CSI с помощью ИИ Автоматизирует общение с клиентами

Финансовые задачи

Обрабатывает данные и выдаёт финансовую сводку Подготовка сценариев для UAT на основе бизнес-требований

Юридические задачи

Умный поиск по документам

Отвечает на вопросы по законодательной базе

Промышленные задачи

Предоставляет советы по эксплуатации оборудования

Оптимизирует закупки ресурсов

Ритейл

Медиа

Логистика

Телеком

IT и технологии

Продажи

Страхование

Маркетинг

HR

Связаться с нами

Подскажем, как GigaChat будетработать в вашей компании,и поможем с интеграцией

Настроен под бизнес

Модель обучали на бизнес и рабочих задачах

Нарисует креативы

Фотография из Японии с горой Фудзи, розовые цвета, сакуры на переднем плане, ночь

Напишет код

Напиши программу на Python для слияния нескольких словарей в один

def merge_dicts (first_dict, second_dict): result = {} for key, value in first_dict.items (): if key, not in second_dict: # Пример использования first_dict = {'a': 1, 'b': 2, 'c': 3} second_dict = {'d': 4, 'e': 5, 'f': 6} merged_dict = merge_dicts(first_dict, second_dict) print(merged_dict) #{'a': 1, 'b': 2, ('d', 4), ('e', 5), ('f', 6)}

Напишет бизнес-тексты

Сформируй топ-3 Buyer Persona для покупателей электросамокатов

Молодые люди и подростки: они часто используют электросамокаты для передвижения по городу, так как для управления не нужны автомобильные права.

Люди, которые живут в условиях ограниченного пространства: например, в маленьких квартирах, где сложно разместить более габаритный транспорт вроде велосипеда.

Люди, которые работают в центре города: им нужно быстро перемещаться между различными точками и избегать пробок на дорогах.

Ответит клиентам

Даст бизнес-идею

Автома­тичес­ки сформирует отчёты

Создаст посты и рекламу

Настроен для работы с вашими данными

Классифи­ци­рует информа­цию

Кейсы

Крупный банк автоматизировал 10% коммуникаций с клиентами

GigaChat высвободитл операторов на обработку коммуникаций с клиентами

Экономия

в месяц

Jivo обрабатывает большое количество входящих запросовклиентов, без увеличения штата

GigaChat автоматически формирует готовый ответ оператору на основе информации о бизнесе и контексте текущего диалога с клиентом

Среднее время ответа оператора

было 17 минут

Компания БСГ автоматизировала процесс дистанционного управления дождевальными машинами

Теперь машины управляются голосом с помощью обычного мобильного телефона

Упрощает ирригационные работы на площади более

Подробнее

Крупный банк сократил трудозатраты на анализ запроса пользователей и уточнение деталей закупки

GigaChat автоматически формирует ТЗ по входному запросу. Анализирует соответствие коммерческого предложения ТЗ

Время на анализ и уточнение деталей

было до 5 часов

Нефтегазохимический холдинг сократил количество дублирующих закупок

GigaChat помог заменить текстовое описание номенклатурных позиций на описание по техническим характеристикам

Уменьшение закупочных цен

SaluteBot ускорил разработку сценариев чат-ботов

GigaChat автоматически генерирует тренировочные фразы для интентов и сущностей (ноутбук, телефон, автомобили и т.д.)

Сократили время разработки сценария

было до 5 часов

Холдинг создал инструмент для консолидации знаний и быстрого доступа к ним

Умный поиск по базе знаний для поддержки принятия решений с возможностью калькуляции удобрений в зависимости от культуры, региона и других факторов

Доступ к нужной информации

было 24 часа

СберПраво

Умный поиск с GigaChat подбирает необходимую информацию по запросу и сокращает время на рутинные операции юриста

Трудозатраты юриста на анализ правовых источников

было 30–45 минут

Крупный банк автоматизировал 10% коммуникаций с клиентами

GigaChat высвободитл операторов на обработку коммуникаций с клиентами

Экономия

в месяц

Jivo обрабатывает большое количество входящих запросовклиентов, без увеличения штата

GigaChat автоматически формирует готовый ответ оператору на основе информации о бизнесе и контексте текущего диалога с клиентом

Среднее время ответа оператора

было 17 минут

Компания БСГ автоматизировала процесс дистанционного управления дождевальными машинами

Теперь машины управляются голосом с помощью обычного мобильного телефона

Упрощает ирригационные работы на площади более

Подробнее

Крупный банк сократил трудозатраты на анализ запроса пользователей и уточнение деталей закупки

GigaChat автоматически формирует ТЗ по входному запросу. Анализирует соответствие коммерческого предложения ТЗ

Время на анализ и уточнение деталей

было до 5 часов

Нефтегазохимический холдинг сократил количество дублирующих закупок

GigaChat помог заменить текстовое описание номенклатурных позиций на описание по техническим характеристикам

Уменьшение закупочных цен

SaluteBot ускорил разработку сценариев чат-ботов

GigaChat автоматически генерирует тренировочные фразы для интентов и сущностей (ноутбук, телефон, автомобили и т.д.)

Сократили время разработки сценария

было до 5 часов

Холдинг создал инструмент для консолидации знаний и быстрого доступа к ним

Умный поиск по базе знаний для поддержки принятия решений с возможностью калькуляции удобрений в зависимости от культуры, региона и других факторов

Доступ к нужной информации

было 24 часа

СберПраво

Умный поиск с GigaChat подбирает необходимую информацию по запросу и сокращает время на рутинные операции юриста

Трудозатраты юриста на анализ правовых источников

было 30–45 минут

Подро­бная докумен­тация

Статьи об интеграции GigaChat API в вашу инфраструктуру

Посмотреть

Партнёры

Форматы поставки

Попробуйте GigaChat API

Giga Public

CLOUD

Попробуй­те версию для физичес­ких лиц. Без допол­нитель­ной платы, 1 000 000 токенов в год.

Если токены кончатся, их можно доку­пить Тарифы Giga Public

Попробовать

Удобно для компаний любого масштаба

Giga Private

CLOUD

Для компаний любого размера

Быстрый старт работы с моделью и масштабируемость в частном облаке с различными опциями безопасности

Giga OnPrem

ON-PREM

Для компаний любого размера

Развёртывание модели в контуре на вашем оборудовании.

Необходимо соответствие оборудования требованиям платформы и наличие профессиональной команды

Giga Server

ON-PREM

Для средних и крупных компаний

Оперативное развёртывание модели на серверах с возможностью использования собственного базового оборудования (необходимо наличие стоек в ЦОД). Баланс стоимости и производительности

Giga Cube

ON-PREM

Для крупных компаний

Поставка в ЦОД по модели plug and play. Максимально быстрый старт работы с моделью на отлаженном, мощном оборудовании, возможность масштабирования вплоть до построения отказоустойчивых кластеров. Необходимость наличия соответствующего ЦОД

Связаться с нами

Подскажем, какой формат поставки вам подходит, и поможем с интеграцией

Часто задаваемые вопросы

Какую модель выбрать: GigaChat Lite или GigaChat Pro?

GigaChat Lite подойдёт для решения более тривиальных задач, требующих при этом максимальной скорости работы модели, вместе с тем сервис менее требователен к «железу» и доступен по более низкой цене.

GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повысилось качество суммаризации, рерайтинга и редактирования текстов, ответов на различные вопросы. Что особенно актуально для бизнеса — модель отлично ориентируется во многих прикладных доменах — в частности, в экономических и юридических вопросах.

Работа с моделями и стоимость генерации подробно описана в документации .

Имеет ли модель доступ в интернет?

Из коробки модель не имеет доступа в Интернет и формирует ответ на основании контекста и той информации, на которой проходила обучение

Будут ли защищены корпоративные данные?

Ваши данные в полной безопасности — по умолчанию мы не храним и не используем ваши запросы и ответы для дообучения модели

Есть ли решение On-Prem?

Оставьте заявку, возможные варианты поставки решения On-Prem обсуждаются индивидуально

Остались вопросы?

Оставьте контактные данные, наши менеджеры с вами свяжутся

Имя

Рабочая почта

Рабочий телефон

Даю согласие на получение обратной связи по заявке. Согласие на обработку персональных данных

Даю согласие на получение рекламных сообщений и маркетинговых предложений

Отправить

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо",[],"{'question_type': 'complex', 'seed_document_id': 6, 'topic': 'Сервис GigaChat'}"
6a4d7f14-3be6-4378-9386-b505cee09b0d,"Какую модель следует использовать для создания векторных представлений текстов в GigaChat, учитывая, что она должна быть доступна по умолчанию?",Для векторного представления текстов доступна модель Embeddings.,"Document 32: lastUpdateDate: 9 августа 2024

История обновлений {#istoriya-obnovleniy}

2024 {#2024}

Август {#avgust}

09.08.2024 {#09-08-2024}

Добавлены примеры описания составных функций.

Июль {#iyul}

30.07.2024 {#30-07-2024}

Добавлена возможность отправлять запросы к новым версиям моделей, которые находятся в раннем доступе. Ранний доступ позволяет самостоятельно убедиться в повышенной производительности и ознакомиться с новыми возможностями моделей.

Для сохранения контекста при работе с функциями добавлено новое поле functions_state_id. В будущем поле functions_state_id заменит массив data_for_context.

25.07.2024 {#25-07-2024}

Добавлена возможность использовать GigaChat API по предоплатной схеме. Для этого нужно создать корпоративное пространство с поддержкой работы по предоплате. Для тарификации по предоплатной схеме запросы нужно отправлять к соответствующей версии API scope=GIGACHAT_API_B2B. Подробнее — в быстром старте для ИП и юрлиц.

05.07.2024 {#05-07-2024}

Параметр n (количество вариантов ответов модели) отмечен как deprecated. После отключения параметра все модели будут возвращать только один вариант ответа.

01.07.2024 {#01-07-2024}

Добавлены образцы описания функций

Июнь {#iyun}

Май {#may}

22.05.2024 {#22-05-2024}

Теперь во все модели добавлена поддержка функций, поэтому обновлена документация по созданию изображений — оставлено описание создания изображения только с помощью встроенной функции.

Март {#mart}

27.03.2024 {#27-03-2024}

Добавлена возможность работать со встроенными и собственными функциями.

25.03.2024 {#25-03-2024}

Переработан раздел с примерами промптов. Добавлена новая разводящая страница с фильтрацией промптов по категориям.

22.03.2024 {#22-03-2024}

Опубликована английская версия документации GigaChain.

19.03.2024 {#19-03-2024}

Добавлено описание мониторинга потребления токенов, доступное для ИП и юридических лиц.

Февраль {#fevral}

14.02.2024 {#14-02-2024}

Описан выбор моделей с помощью API и SDK.

9.02.2024 {#9-02-2024}

Добавлены разделы Быстрый старт для физлиц и Быстрый старт для ИП и юрлиц.

Описана возможность отключать цензора при работе с версией API для ИП и юридических лиц.

7.02.2024 {#7-02-2024}

Добавлены промпты для обработки текстов и генерации:

перевод;

стилизация;

генерация таблиц;

генерация описания товаров;

суммаризация.

6.02.2024 {#6-02-2024}

Описаны доступные модели GigaChat.

Январь {#yanvar}

19.01.2024 {#19-01-2024}

Обновили структуру документации.

Обновили дизайн и функциональность справки REST API GigaChat. В новой документации появилась возможность отправлять запросы к API.

15.01.2024 {#15-01-2024}

GigaChat научился создавать векторное представление текста (эмбеддинги). О работе с эмбеддингами с помощью GigaChat API и GigaChain — в разделе Векторное представление текста.

Добавлена возможность создавать изображения с помощью GigaChat API.

12.01.2024 {#12-01-2024}

Опубликован каталог промптов.

2023 {#2023}

Декабрь {#dekabr}

22.12.2023 {#22-12-2023}

Опубликована документация GigaServe — python-библиотеки, которая позволяет размещать цепочки и runnable-интерфейсы GigaChain и предоставлять к ним доступ через REST API.

04.12.2023 {#04-12-2023}

Теперь для доступа к GigaChat вы можете использовать не только REST API, но и GRPC.

Сентябрь {#sentyabr}

20.09.2023 {#20-09-2023}

Теперь для работы с GigaChat вы можете использовать REST API и SDK GigaChain. Для работы с API вы можете использовать специально подготовленную коллекцию запросов Postman.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата",[],"{'question_type': 'complex', 'seed_document_id': 32, 'topic': 'Others'}"
6ac6abbb-712e-4378-a06e-5c1bf8e460fa,"Какие сведения и инструкции по интеграции с GigaChat можно найти в разделе GigaChat API, и когда он был обновлен в последний раз?","Раздел содержит описание и инструкции по работе с GigaChat API, которые применяются для интеграции вашего продукта и сервиса GigaChat.","Document 35: title: GigaChat API entryPage: true description: Раздел содержит описание и инструкции по работе с GigaChat API, которые применяются для интеграции вашего продукта и сервиса GigaChat. lastUpdateDate: 26 февраля 2024

import { entryPageContent } from './_data.tsx'",[],"{'question_type': 'complex', 'seed_document_id': 35, 'topic': 'Сервис GigaChat'}"
8c0ad04c-14c5-4099-af3b-1e52347780a7,"Какие шаги необходимо предпринять юридическим лицам для отключения цензора, учитывая, что требуется согласование владельца продукта?","Цензор может быть отключен только для юридических лиц (корпоративных пространств) с согласования владельца продукта, необходимо прислать 2-3 примера сработки цензора, полное описание сценария применения (кто пользователи, какой алгоритм применения ГигаЧат). Другим способом отключить его нельзя.","Document 1: Общие понятия

client_id - идентификатор проекта ГигаЧат АПИ, находится в проекте в личном кабинете (на 20/08/2024) в правом верхнем углу под строкой «используйте ключи для подключения сервиса». Для поиска внут¸ри журналов, для поиска сообщений, ошибок обычно запрашивается именно он. Внутри одного корпоративного пространства может быть до 5 разных проектов ГигаЧат. Чтобы в корпоративном пространстве можно было добавлять больше 5 проектов - необходимо запрашивать доступ дополнительно. У физлиц проект может быть (на данный момент) только один.

workspace_id - идентификатор пространства внутри Студии. Может помочь при решении вопросов для юрлиц по организации доступа, оформлению корпоративного пространства. В остальных случаях смотрите client_id

Цензор - он же этический, он же тематический фильтр. Подсистема которая блокирует отправку сообщений если там содержится потенциально опасная информация. О том какие темы могут его триггерить можно почитать по ссылке https://developers.sber.ru/docs/ru/gigachat/limitations#tematicheskie-ogranicheniya-zaprosov

О том что цензор сработал можно узнать по ошибке blacklist в ответе модели.

Цензор может быть отключен только для юридических лиц (корпоративных пространств) с согласования владельца продукта, необходимо прислать 2-3 примера сработки цензора, полное описание сценария применения (кто пользователи, какой алгоритм применения ГигаЧат). Другим способом отключить его нельзя.

Потоки - количество единовременно обрабатываемых запросов. Для физлиц - 1 поток, для юрлиц - 10 потоков. Количество потоков привязано к конкретному client_id проекта GigaChat API (для Enablers) и Common Name сертификата (для Банка). Увеличение количества потоков для Enablers возможно только для корпоративных пространств (юрлиц) через согласованием с владельцем продукта, для физлиц такой процедуры не предусмотрено даже если они покупают платные пакеты. Для расширения количества потоков необходимо предоставить Владельцу Продукта информацию о сценарии, DAU/MAU системы для которой запрашивается доступ и расчет требуемого количества потоков (почему хотят именно N потоков)

Инстансы - экземпляры ГигаЧат, внутри Банка их пять (ИФТ в Дельта, ПСИ и ПРОМ в Сигма, ПСИ и ПРОМ в Альфа), также есть публично доступный инстанс в сетевом регионе Enablers. Доступ к Enablers пользователь (в том числе и внутрибанковский) оформляет самостоятельно через Студию. Доступ к банковским инстансам оформляется через заявки на отдел сопровождение. (см API)

GigaChain / ГигаЧейн - библиотека для языка Python нашей разработки. Адрес для внешних потребителей https://github.com/ai-forever/gigachain/ сама по себе не предоставляет доступ к ГигаЧат, при работе с ней также требуются авторизационные данные. Содержит огромное количество примеров кода в разной степени применимости в разных процессах. Любые вопросы по ней отправляются Поддержкой на команду GigaChain

ENABLERS - публично доступный инстанс ГигаЧат

1.2. Детальней про ошибки при работе с API

400, scope from db not fully includes consumed scope

Что происходит:

Пользователь не читал документацию и указал неверное значение параметра scope.

Что делать?

Указать корректный параметр scope согласно документации https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/post-token#zapros

Версия API. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

Если пользователь работает через библиотеку GigaChain и получает эту ошибку, то скорее всего параметр scope там вообще не указан и нужно добавить его в программный код в раздел параметров модели.

401, credentials doesn't match db data

Что происходит:

Неверное значение параметра «авторизационные данные»

Что делать:

Рекомендовать вернуться в личный кабинет и сгенерировать заново авторизационные данные «получить новый client_secret», либо убедиться что сформированный токен не «протух» (он живет 30 минут)

Вполне возможна ситуация, когда человек заблуждается относительно природы доступа к АПИ, он считает что оформил корпоративный доступ, а по факту он зашел со SberID как физ.лицо, поэтому рекомендуем ему попробовать сначала одно, затем другое значение.

402, Payment Required​, Лимит по тарифу исчерпан

У пользователя кончились токены модели, к которой он пытается обращаться. Скорее всего он не указал в программном коде (или готовом сервисе) другую модель к которой надо обращаться. Посоветуйте прислать снимок экрана из личного кабинета так чтобы было видно сколько токенов в каком пакете у него осталось. Если он настаивает что все делает корректно - запрашивайте авторизационные данные и выполняйте вызов разных моделей самостоятельно. Следующим шагом заходите в статистику и смотрите сколько там фактически было истрачено. В редких случаях проблема может потребовать обращения к службе сопровождения.

429, Too many requests. Слишком много запросов.

Пользователь пытается выполнить большее количество одновременных запросов, чем разрешено его идентификатору. По умолчанию для физлиц - 1 одновременный поток, для юрлиц - 10 потоков. Для внутриБанковских потребителей - устанавливается по согласованию с Владельцем Продукта.

«ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain»

Это ошибка присоединения к API возникает из-за сертификатов МинЦифры РФ, которые система пользователя приняла за самописные сертификаты.

Что делать? Рекомендовать к прочтению https://developers.sber.ru/docs/ru/gigachat/certificates и устанавливать в коде приложения (или в настройках виртуального окружения). ВАЖНО! Пользователи часто ставят сертификаты только на уровне ОС (операционной системы), этого недостаточно, так как у средств разработки чаще всего свои venv (виртуальные окружения) в которых свои доверенные сертификаты. ВАЖНО! Конечно, пользователь может просто отключить проверку сертификатов на своей стороне (verify_ssl_certs=False например), но это НЕ РЕКОМЕНДУЕМОЕ ПОВЕДЕНИЕ!.

Для пользователей GigaChain можно посоветовать утилиту gigachain-cli которая решает эти проблемы

1.3. Любые вопросы на тему «у меня не работает вызов к АПИ/API»

Это могут быть ошибки например 401, 402, 403, 404. В 99.9% случаев это либо неверно сформированная строка вызова либо некорректно указанная модель либо протухший токен авторизации. Проще говоря - пользователь не читал или плохо читал документацию по обращению к API по ссылке https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/gigachat-api

Что делать?

Запросить полный вид ошибки от сервиса и полный вид запроса включая данные авторизации. Нет ничего страшного в том что пользователь присылает нам авторизационные данные - это сильно проще чем вытаскивать логи. Пользователь может заново перегенерировать авторизационные данные в Личном Кабинете студии после закрытия заявки.

После получения строк вызова сравнить их с актуальными вызовами из документа который будет передаваться отдельно. Документ держать актуальным при изменении методов.

Используйте авторизационные данные пользователя для того чтобы выполнить запросы авторизации и обращения к модели. Если CURL сложно - используйте Postman.

https://developers.sber.ru/docs/ru/gigachat/api/postman-request-collection

Очень частая ошибка при вызове Curl в Windows [(58) schannel: Failed to import cert file cert.pem, last error is 0x80092002

Что происходит:

При попытке отправки запроса в API с помощью curl на Windows возникает ошибка curl: (58) schannel: Failed to import cert file cert.pem, last error is

0x80092002. Ошибка происходит, потому что версия используемая версия curl не поддерживает формат хранения сертификата pem(стандарт OpenPGP).

Что делать:

Необходимо переконвертировать сертификат в по стандарту pkc#12:

openssl pkcs12 -export -out cert.p12 -in cert.pem -inkey private.key.

Далее используем сертификат в новом формате в качестве значения параметра –cert, например

curl https://gigachat-ift.sberdevices.delta.sbrf.ru/v1/models --cert cert.p12 --key private.key

Самый простой способ - использовать/заказать в Друге виртуальную Linux машину

1.5. Любые вопросы про библиотеки GigaChain или библиотеку GigaChat

Сначала советуем пользователям удалить все библиотеки LangChain и переустановить/обновить GigaChain следующими командами

pip uninstall langchain langchain-core langchain-community langchain-eperimental (любые другие библиотеки langchain которые он еще мог поставить)

pip install -U gigachain-community

Если не помогло, то все последующие вопросы отправлять команде поддержки GigaChain

Перед отправкой на команду ГигаЧейна всех пользователей:

просить выполнить следующие команды и присылать результат работы:

pip install -U gigachain-cli

gigachain info

В ответ утилита будет выдавать небольшой лог, который надо приложить к обращениям.

Вопросы про Кандинский/генерацию изображений

«Картинка не того размера, не того формата»

Через ГигаЧат API в данный момент рисуется только 640 на 480. Любые другие соотношения сторон, разрешение - только при работе напрямую с Fusionbrain API (Кандинским)

«Сколько хранится картинка»

На данный момент все картинки хранятся без срока давности.

«Картинка которую я сгенерировал - может быть доступна кому-то еще?»

Нет.

Проблема кодировки отправляемого сообщения через curl на Windows

Что происходит:

При попытке отправки запроса в API с помощью curl на Windows с использование кирилицы не правильно воспринмается вопрос/ответ с крокозябрами или совершенно не соответвуюе вопросу.

Пример: curl --cert cert.p12 --key private.key --data ""{\""model\"":\""GigaChat:latest\"",\""messages\"": [{\""role\"": \""user\"", \""content\"": \""repeAT THIS: Попугая хороший\""}],\""n\"":1,\""top_p\"":0.47,\""stream\"":false}"" -v https://goprodigy-ci01808661-gigachat.apps.ift-terra000017-eds.ocp.delta.sbrf.ru/v1/chat/completions

Content ответа: ""Повторите это:  ""

Смена charset в командой строке не решвет проблему. Проблема связана с особенностью данной версии curl.

Что делать:

Подавать json из файла.

Пример: curl --cert client.p12 --key private.key --data @data.txt -v https://goprodigy-ci01808661-gigachat.apps.ift-terra000017-eds.ocp.delta.sbrf.ru/v1/chat/completions

Что делать если внешнему пользователю ничего не помогло

Даже после всех инструкций у пользователя не получается выполнить запрос самостоятельно. Или пользователь присылает какой-то свой код на любом языке программирования

Рекомендовать

использовать готовые примеры с сайта https://developers.sber.ru/docs/ru/gigachat/api/authorization

использовать коллекцию PostMan https://developers.sber.ru/docs/ru/gigachat/api/postman-request-collection при необходимости смотреть видео по использованию коллекции PostMan (там же)

использовать готовые примеры из библиотеки GigaChain https://github.com/ai-forever/gigachain/

Только если пользователь все попробовал – пусть присылает данные, под которыми работает (client_id, а также запрос ЦЕЛИКОМ и ответ ЦЕЛИКОМ на почту gigachat@sberbank.ru

Мы не обучаем пользователей программированию, наша ответственность – чтобы он выполнил успешно один запрос и получил ответ, все что дальше и как он будет использовать реализацию этого вызова – его зона ответственности.

Частые вопросы внешних пользователей

«Пропали токены, нет пакетов которые я вчера купил, исчез мой проект GigaChat API» и схожие обращения

Запросить снимок экрана, так чтобы было видно client_id, Workspace_id, остаток по пакетам. При необходимости список покупок. Уточнить не поменял ли пользователь параметры входа (например раньше ходил через СберИД а сейчас через логин/пароль). После чего посмотреть потребление по указанным данным client_id, возможно пользователь перепутал разные учетные записи. Если все совпадает то писать в канал ММ

«Юридические вопросы, коммерческое использование» и тд

Предлагаем ознакомиться с юридическими документами https://developers.sber.ru/docs/ru/policies/gigachat-agreement/individuals (для физиков), https://developers.sber.ru/docs/ru/policies/gigachat-agreement/permissible-use-ai и https://developers.sber.ru/docs/ru/policies/gigachat-agreement/corporate-clients-beta (ЮЛ).

Если вы не можете найти ответы на вопросы внутри этих документов, то перенаправляйте обращение к Доленко Дмитрий Дмитриевич Dolenko.D.D@sberbank.ru

«Отменить покупку пакета с токенами/вернуть деньги»

Если пользователь (физлицо) хочет вернуть деньги или отменить покупку - надо подсветить https://developers.sber.ru/docs/ru/policies/gigachat-agreement/individuals пункт 4 11",[],"{'question_type': 'complex', 'seed_document_id': 1, 'topic': 'Others'}"
aed156a4-af06-4ee7-800f-b0d4e38329be,"Какие шаги нужно выполнить, чтобы получить токен доступа для авторизации запросов к GigaChat API, и какие обязательные заголовки должны быть включены в запрос?","Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Accept: application/json' \
-H 'RqUID: <идентификатор_запроса>' \
-H 'Authorization: Basic <авторизационные_данные>' \
--data-urlencode 'scope=GIGACHAT_API_PERS'","Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'complex', 'seed_document_id': 47, 'topic': 'API GigaChat'}"
a66667da-94ba-4f0f-8810-c960f9d19a99,"Какой пример запроса для генерации таблицы, используя формат markdown и заданные названия строк или столбцов, приведен в контексте?","sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat-Pro"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 1000, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Создай таблицу в формате markdown с указанными названиями столбцов и строк на основе текста сообщения пользователя. Количество строк и столбцов должно !строго соответствовать заданному в сообщении. Оформление таблицы должно быть консистентным."" }, { ""role"": ""user"", ""content"": ""Столбцы: Предмет мебели, Краткое описание. В обычной квартире могут быть представлены самые разные предметы мебели. Например столы, стулья или кресла. Стол — предмет мебели, имеющий приподнятую горизонтальную или наклонную поверхность и предназначенный для размещения предметов, выполнения работ, принятия пищи, игр, рисования, обучения и другой деятельности. Стул — предмет мебели для сидения одного человека, с опорой для спины с подлокотниками или без них. Кресло — предмет мебели для комфортного продолжительного сидения, со спинкой, c подлокотниками или без них."" } ] }'","Document 26: lastUpdateDate: 27 марта 2024

Стилизация текста {#stilizatsiya-teksta}

Пример промпта для переписывания текста с учетом заданного стиля.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля."" }, { ""role"": ""user"", ""content"": ""Перепиши текст как научную статью. Текст: Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [text, style] output_parser: null messages: - role: system prompt: template: 'Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля.' - role: user prompt: template: 'Текст: {text}. Стиль: {style}.' template_format: f-string _type: chat

Шаблон содержит переменные:

text — текст, который нужно переписать. Обязательное поле;

style — стиль итогового текста. Обязательное поле.

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля."" }, { ""role"": ""user"", ""content"": ""Перепиши текст как научную статью. Текст: Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"")

prompt = load_prompt(""lc://prompts/content/text_rewrite.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."", ""style"": ""Научная статья"" } ).content ```

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 27: lastUpdateDate: 4 апреля 2024

Генерация вопросов к заданному тексту {#generatsiya-voprosov-k-zadannomu-tsehu}

Пример промпта для генерации различных вопросов к переданному тексту.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Перед тобой некоторая часть целостного документа. Придумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу. Используй информацию ТОЛЬКО из приведенной части документа. Используй непредвзятый и журналистский тон. Не повторяй текст. Формат ответ должен выглядеть вот так: "" Вопрос ... ... Вопрос

Текст документа: {text}

3 вопроса к документу на русском языке:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") generate_question_prompt = load_prompt('lc://prompts/qna/generate_question_prompt.yaml') text = generate_question_prompt.format(text=""... text of your documents ..."") ```

Document 22: lastUpdateDate: 13 февраля 2024

Генерация таблиц {#generatsiya-tablits}

Пример промпта для генерации таблиц.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat-Pro"", ""messages"": [ { ""role"": ""system"", ""content"": ""Заполни таблицу в формате markdown с указанными названиями строк или столбцов на основе сообщения пользователя."" }, { ""role"": ""user"", ""content"": ""Столбцы: Предмет мебели, Краткое описание. В обычной квартире могут быть представлены самые разные предметы мебели. Например столы, стулья или кресла. Стол — предмет мебели, имеющий приподнятую горизонтальную или наклонную поверхность и предназначенный для размещения предметов, выполнения работ, принятия пищи, игр, рисования, обучения и другой деятельности. Стул — предмет мебели для сидения одного человека, с опорой для спины с подлокотниками или без них. Кресло — предмет мебели для комфортного продолжительного сидения, со спинкой, c подлокотниками или без них."" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Заполни таблицу в формате markdown с указанными названиями строк или столбцов на основе сообщения пользователя.' - role: user prompt: template: '{text}' template_format: f-string _type: chat

Шаблон содержит переменные:

text — текст обращения пользователя. Обязательное поле;

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat-Pro"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 1000, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Создай таблицу в формате markdown с указанными названиями столбцов и строк на основе текста сообщения пользователя. Количество строк и столбцов должно !строго соответствовать заданному в сообщении. Оформление таблицы должно быть консистентным."" }, { ""role"": ""user"", ""content"": ""Столбцы: Предмет мебели, Краткое описание. В обычной квартире могут быть представлены самые разные предметы мебели. Например столы, стулья или кресла. Стол — предмет мебели, имеющий приподнятую горизонтальную или наклонную поверхность и предназначенный для размещения предметов, выполнения работ, принятия пищи, игр, рисования, обучения и другой деятельности. Стул — предмет мебели для сидения одного человека, с опорой для спины с подлокотниками или без них. Кресло — предмет мебели для комфортного продолжительного сидения, со спинкой, c подлокотниками или без них."" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"", model=""GigaChat-Pro"")

prompt = load_prompt(""lc://prompts/content/table_generation.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Столбцы: Предмет мебели, Краткое описание. В обычной квартире могут быть представлены самые разные предметы мебели. Например столы, стулья или кресла. Стол — предмет мебели, имеющий приподнятую горизонтальную или наклонную поверхность и предназначенный для размещения предметов, выполнения работ, принятия пищи, игр, рисования, обучения и другой деятельности. Стул — предмет мебели для сидения одного человека, с опорой для спины с подлокотниками или без них. Кресло — предмет мебели для комфортного продолжительного сидения, со спинкой, c подлокотниками или без них."" } ).content ```",[],"{'question_type': 'complex', 'seed_document_id': 26, 'topic': 'Промпты для GigaChat'}"
6ed87ea3-55c5-40c3-81a0-d88a154834a5,"Перечислите все языки, которые поддерживаются GigaChat, учитывая текущие ограничения платформы.",GigaChat поддерживает русский и английский языки.,"Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс

Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.",[],"{'question_type': 'complex', 'seed_document_id': 44, 'topic': 'Сервис GigaChat'}"
46d71208-948a-4249-85b9-f2e4a8512ac7,"Какие конкретные методы улучшения промптов можно использовать для повышения точности ответов GigaChat на арифметические задачи, учитывая архитектурные особенности модели?","Для улучшения точности ответов модели GigaChat на арифметические задачи рекомендуется предоставлять более подробные инструкции. Например, вместо простого запроса '10*10?' следует использовать уточненный промпт: 'Используй десятичную систему исчисления. Убедись, что ответ математически верен. 10*10'.","Document 14: lastUpdateDate: 23 мая 2024

Создание промптов {#sozdanie-promptov}

GigaChat решает самые разные задачи: от обработки текстов и создания изображений, до написания кода на разных языках. Точность ответа сервиса напрямую зависит от точности запроса пользователя — промпта. Промпты (от англ. prompt — «подсказка») имеют вид вопросов, текстовых заданий или инструкций, которые описывают какой именно результат ожидается от модели. Промпты могут быть и простыми репликами, и детальными указаниями с примерами ожидаемых результатов.

:::tip

Пройдите курс, чтобы научиться составлять наиболее эффективные промпты.

Вы также можете использовать базу знаний, чтобы изучить подробное руководство по работе с промптами и ознакомиться с тематическими примерами.

:::

Способы улучшения промптов {#sposoby-uluchsheniya-promptov}

Из-за архитектурных особенностей нейросетевые модели создают ответы, которые не точно удовлетворяют запросы, а только с наибольшей вероятностью. Создавайте промпты с учетом приведенных рекомендаций и вы значительно повысите вероятность получить подходящий ответ.

Детализация указаний {#detalizatsiya-ukazaniy}

Чем более подробную инструкцию вы дадите сервису, тем выше вероятность получить ожидаемый результат. Убедитесь в этом на примере арифметической задачи.

:::caution

В силу архитектурных особенностей модели часто плохо разбираются в математике.

:::

Так, если вы попросите GigaChat умножить 10 на 10, он скорее всего даст неверный ответ.

```sh-session Промпт: 10*10?

Ответ GigaChat: 10 ```

Предоставьте модели больше данных о том, как решить задачу и вы с большей вероятностью получите удовлетворительный результат.

```sh-session Промпт: Используй десятичную систему исчисления. Убедись, что ответ математически верен. 10*10

Ответ GigaChat: 10 × 10 = 100 ```

Присвоение роли {#prisvoenie-roli}

Если вы хотите изменить стиль или формулировку ответов сервиса, то добавьте в промпт ролевую модель. Так, ответы модели с ролью академика и пятилетнего ребенка будут заметно отличаться. Роли помогут модели вести разговор в заданном ключе или получить ответ, предназначенный для определенной аудитории.

```sh-session Промпт: Ты кандидат физикоматематических наук.

Расскажи первый закон термодинамики своими словами

Ответ GigaChat: Первый закон термодинамики утверждает, что энергия не может быть создана или уничтожена, она может только переходить из одной формы в другую. Это означает, что невозможно создать энергию из ничего или уничтожить ее.

Промпт: Ты первоклассник.

Расскажи первый закон термодинамики своими словами

Ответ GigaChat: Первый закон термодинамики говорит о том, что теплота не может быть создана или уничтожена, она может только переходить от одного тела к другому. Это означает, что тепло всегда передается от более теплого тела к менее теплому. ```

Примеры в промпте {#primery-v-prompte}

Примеры показывают модели, какой результат вы ожидаете.

```sh-session Промпт без примера ответа:

Какой город является столицей России?

Ответ GigaChat: Столицей России является Москва

Промпт с примерами ответов:

Какой город является столицей России? Москва Какой город является столицей Венгрии? Будапешт

Какой город является столицей Пакистана?

Ответ GigaChat:

Исламаба́д ```

Структурированный промпт {#strukturirovannyy-prompt}

Используйте советы по улучшению ответов модели и вместе, и по отдельности.

В общем случае промпт, который использует сразу все советы, будет выглядеть так:

Смотрите также {#smotrite-takzhe}

Примеры удачных промптов для GigaChat

Как формулировать запросы к GigaChat

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 17: lastUpdateDate: 24 мая 2024

Примеры промптов для API и SDK {#katalog-promptov}

При работе с GigaChat API промпты передаются в запросах POST /chat/completions, а при работе с GigaChat SDK — в виде шаблонов (полный каталог промптов GigaChain доступен в github).",[],"{'question_type': 'complex', 'seed_document_id': 14, 'topic': 'Промпты для GigaChat'}"
527f5c4a-1a87-418c-b907-2ad3597ca565,"Какие шаги нужно выполнить для включения потоковой генерации токенов в GigaChat, если используется протокол server-sent events?",Для включения потоковой генерации токенов в GigaChat в запросе POST /chat/completions нужно передать параметр 'stream': true.,"Document 34: lastUpdateDate: 18 июля 2024

Потоковая генерация токенов {#potokovaya-peredacha-tokenov}

Режим получения потока токенов поможет обрабатывать ответ GigaChat по мере его генерации.

При включении этого режима GigaChat передает токены в потоке коротких сообщений, формат которых соответствует протоколу server-sent events. Последним в потоке будет событие data: [DONE].

Вы можете включить потоковую генерацию токенов. Для этого в запросе POST /chat/completions нужно передать параметр ""stream"": true.

Пример запроса:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [{""role"": ""user"", ""content"": ""Say this is a test!""}], ""stream"": true }'

Пример потока событий:

```json data: { ""choices"": [ { ""delta"": { ""content"": ""GigaСhat"", ""role"": ""assistant"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" спешит"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" на"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" помощь"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: [DONE] ```

Для поддержки потоковой генерации токенов с помощью GigaChain нужно унаследоваться от класса BaseCallbackHandler и инициализировать модуль GigaChat в режиме обработки потока токенов streaming=True:

```py from langchain.schema import HumanMessage from langchain.callbacks.base import BaseCallbackHandler from langchain.chat_models.gigachat import GigaChat

class StreamHandler(BaseCallbackHandler): def init(self, initial_text=""""): pass

def on_llm_new_token(self, token: str, **kwargs) -> None:
    print(f""{token} -"", end="""", flush=True)

chat = GigaChat(credentials='<авторизационные_данные>', streaming=True, callbacks=[StreamHandler()])

chat([HumanMessage(content=""Напиши краткое содержание романа «Евгений Онегин»"")]) ```

Document 45: lastUpdateDate: 1 июля 2024

Выбор модели для генерации {#vybor-modeli-dlya-generatsii}

При работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.

Чтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""<название_модели>"", ""messages"": [ { ""role"": ""user"", ""content"": ""Привет! Расскажи о себе."" } ], ""n"": 1, ""stream"": false, ""max_tokens"": 512, ""repetition_penalty"": 1, ""update_interval"": 0 }'

GigaChain по умолчанию работает с базовой моделью GigaChat. Чтобы явно задать модель, передайте параметр model при инициализации GigaChat:

```py from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials='<авторизационные_данные>', model='<название_модели>', verify_ssl_certs=False) ```

Возможные значения поля model:

GigaChat — базовая модель для решения более простых задач;

GigaChat-Plus — модель с увеличенным контекстом. Подходит, например, для суммаризации больших документов;

GigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи.

Смотрите также {#smotrite-takzhe}

Модели GigaChat

Тарифы и оплата

Быстрый старт GigaChain",[],"{'question_type': 'complex', 'seed_document_id': 34, 'topic': 'Работа с GigaChat API'}"
03f37d5a-ecc5-4b7e-987c-c18ecd8d9c5f,"Какие конкретные метрики применялись для автоматической оценки модели GigaChat, учитывая, что оценка проводилась по нескольким методам?","Метрики, использованные при автоматической оценке: перплексия на отложенной выборке; сравнение ответов модели с эталонами при помощи метрик дистанции; оценка при помощи модели-оракула; описательные статистики, например, средняя длина ответа и лексическое разнообразие; контрастивная оценка; общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.","Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс",[],"{'question_type': 'complex', 'seed_document_id': 13, 'topic': 'Сервис GigaChat'}"
62a29adf-dd47-4b38-9fdd-a6d5f76c6ad6,Какие параметры нужно передать в заголовке запроса для получения токена доступа и какие значения может принимать параметр scope при запросе токена доступа?,"В заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API. Также нужно передать уникальный идентификатор запроса в формате uuid4 в заголовке RqUID. Параметр scope может принимать следующие значения: GIGACHAT_API_PERS (доступ для физических лиц), GIGACHAT_API_B2B (доступ для ИП и юридических лиц по предоплате), GIGACHAT_API_CORP (доступ для ИП и юридических лиц по постоплате).","Document 48: id: post-token title: ""Получить токен доступа"" description: ""Возвращает токен доступа для авторизации запросов к API."" sidebar_label: ""Получить токен доступа"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Авторизация""],""servers"":[{""url"":""https://ngw.devices.sberbank.ru:9443/api/v2""}],""parameters"":[{""name"":""RqUID"",""in"":""header"",""description"":""Уникальный идентификатор запроса. Соответствует формату uuid4.\n\nПараметр для журналирования входящих вызовов и разбора инцидентов.\nДля создания уникального идентификатора можно использовать стандартные библиотеки и классы для генерации UUID и GUID.\n\nПример: 6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e.\n"",""required"":true,""schema"":{""type"":""string"",""format"":""uuid"",""pattern"":""(([0-9a-fA-F-])36)"",""example"":""6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e""}}],""requestBody"":{""content"":{""application/x-www-form-urlencoded"":{""schema"":{""type"":""object"",""properties"":{""scope"":{""description"":""Версия API. Возможные значения:\n\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n"",""type"":""string"",""enum"":[""GIGACHAT_API_PERS"",""GIGACHAT_API_B2B"",""GIGACHAT_API_CORP""],""example"":""GIGACHAT_API_PERS""}},""required"":[""scope""]}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""access_token"":{""type"":""string"",""description"":""Токен для авторизации запросов."",""example"":""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw""},""expires_at"":{""format"":""int64"",""description"":""Дата и время истечения действия токена в формате Unix time."",""type"":""integer"",""example"":1679471442}},""title"":""Token""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Базовая аутентификация"":[""client_id"",""client_secret""]}],""operationId"":""postToken"",""description"":""Возвращает токен доступа для авторизации запросов к API.\nТокен доступа действителен в течение 30 минут.\n\nВ заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nКонсоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n"",""method"":""post"",""path"":""/oauth"",""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить токен доступа"",""description"":{""content"":""Возвращает токен доступа для авторизации запросов к API.\nТокен доступа действителен в течение 30 минут.\n\nВ заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nКонсоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n"",""type"":""text/plain""},""url"":{""path"":[""oauth""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""disabled"":false,""description"":{""content"":""(Required) Уникальный идентификатор запроса. Соответствует формату uuid4.\n\nПараметр для журналирования входящих вызовов и разбора инцидентов.\nДля создания уникального идентификатора можно использовать стандартные библиотеки и классы для генерации UUID и GUID.\n\nПример: 6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e.\n"",""type"":""text/plain""},""key"":""RqUID"",""value"":""""},{""key"":""Content-Type"",""value"":""application/x-www-form-urlencoded""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""urlencoded"",""urlencoded"":[]},""auth"":{""type"":""basic"",""basic"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить токен доступа

Возвращает токен доступа для авторизации запросов к API. Токен доступа действителен в течение 30 минут.

В заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

Консоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Какие параметры нужно передать в заголовке запроса для получения токена доступа?', 'answer': 'В заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API. Также нужно передать уникальный идентификатор запроса в формате uuid4 в заголовке RqUID.'}, {'question': 'Какие значения может принимать параметр scope при запросе токена доступа?', 'answer': 'Параметр scope может принимать следующие значения: GIGACHAT_API_PERS (доступ для физических лиц), GIGACHAT_API_B2B (доступ для ИП и юридических лиц по предоплате), GIGACHAT_API_CORP (доступ для ИП и юридических лиц по постоплате).'}], 'seed_document_id': 48, 'topic': 'API GigaChat'}"
d0433946-f105-43cb-b8fa-73664c01e4cd,Какой URL используется для обращения к моделям в раннем доступе и что нужно добавить к названию модели для использования в раннем доступе?,"Для обращения к моделям в раннем доступе используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.","Document 51: import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить ответ модели на сообщения

Возвращает ответ модели сгенерированный на основе переданных сообщений.

Запрос на генерацию можно передавать моделям в раннем доступе. Для обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Какой URL используется для обращения к моделям в раннем доступе?', 'answer': 'Для обращения к моделям в раннем доступе используйте адрес https://gigachat-preview.devices.sberbank.ru/.'}, {'question': 'Что нужно добавить к названию модели для использования в раннем доступе?', 'answer': 'К названию модели, которое передается в поле model, добавьте постфикс -preview.'}], 'seed_document_id': 51, 'topic': 'Others'}"
5693ae95-04ab-4979-97f3-f3599c6ff702,Какие языки поддерживает GigaChat и какие данные использовались для обучения модели GigaChat?,"GigaChat поддерживает русский и английский языки, а для обучения модели использовались данные из книг, новостей, разговорной речи, научных статей и других доменов на русском и английском языках, объемом 300 Гб.","Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс",[],"{'question_type': 'double', 'original_questions': [{'question': 'Какие языки поддерживает GigaChat?', 'answer': 'GigaChat поддерживает русский и английский языки.'}, {'question': 'Какие данные использовались для обучения модели GigaChat?', 'answer': 'Корпус данных, использованных для обучения, включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб.'}], 'seed_document_id': 13, 'topic': 'Сервис GigaChat'}"
f242a9bc-f8db-435b-9704-bab1bda2e69d,Какую роль выполняет поле 'functions_state_id' в сообщении с ролью 'assistant' и какие модели можно использовать для запроса на генерацию ответа в GigaChat?,"Поле 'functions_state_id' используется для сохранения контекста вызова функции и повышения качества работы модели, заменяя массив 'data_for_context' и возвращаясь в ответе модели при вызове встроенных или собственных функций. Для запроса на генерацию ответа можно использовать следующие модели: GigaChat, GigaChat-Plus, GigaChat-Pro, и Embeddings, при этом к моделям в раннем доступе нужно добавлять постфикс -preview.","Document 49: id: post-chat title: ""Получить ответ модели на сообщения"" description: ""Возвращает ответ модели сгенерированный на основе переданных сообщений."" sidebar_label: ""Получить ответ модели на сообщения"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""example"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""required"":[""model"",""messages""],""type"":""object"",""properties"":{""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""messages"":{""type"":""array"",""description"":""Массив сообщений, которыми пользователь обменивался с моделью."",""items"":{""type"":""object"",""properties"":{""role"":{""type"":""string"",""description"":""Роль автора сообщения:\n\n system — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;\n assistant — ответ модели;\n user — сообщение пользователя;\n function — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле content валидный JSON-объект с результатами работы функции.\n\nДля сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.\n"",""enum"":[""system"",""user"",""assistant"",""function""],""example"":""user""},""content"":{""description"":""Содержимое сообщения. Зависит от роли.\n\nЕсли поле передается в сообщении с ролью function, то в нем указывается валидный JSON-объект с аргументами функции, указанной в поле function_call.name.\n\nВ остальных случаях содержит либо системный промпт (сообщение с ролью system), либо текст сообщения пользователя или модели.\n""},""functions_state_id"":{""type"":""string"",""format"":""uuidv4"",""description"":""Идентификатор, который объединяет массив функций, переданных запросе.\nВозвращается в ответе модели (сообщение с \""role\"": \""assistant\"") при вызове встроенных или собственных функций.\nПозволяет сохранить контекст вызова функции и повысить качество работы модели.\nДля этого нужно передать идентификатор в запросе на генерацию, в сообщении с ролью assistant.\n\nПоле заменяет массив data_for_context. В будущем поддержка массива будет прекращена.\n\nСейчас поле работает только при обращении к моделям в раннем доступе.\n"",""example"":""77d3fb14-457a-46ba-937e-8d856156d003""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""message""}},""function_call"":{""description"":""Поле которе отвечает за то, как GigaChat будет работать с функциями.\nМожет быть строкой или объектом.\n\nВозможные значения:\n\n none — режим работы по умолчанию. Если запрос не содержит function_call или значение поля — none, GigaChat не вызовет функции, а просто сгенерирует ответ в соотвествии с полученными сообщениями;\n\n auto — в зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию.\nМодель вызывает встроенные функции, если отсутствует массив functions с описанием пользовательских функций.\nЕсли запрос содержит \""function_call\"": \""auto\"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;\n\n {\""name\"": \""название_функции\""} — принудительная генерация аргументов для указанной функции. Вы можете явно задать часть аргументов с помощью объекта partial_arguments. Остальные аргументы модель сгенерирует самостоятельно. При принудительной генерации, массив functions обязан содержать объект с описанием указанной функции. В противном случае вернется ошибка.\n"",""oneOf"":[{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""Название функции."",""example"":""sbermarket-pizza_order""},""partial_arguments"":{""type"":""object"",""description"":""JSON-объект в котором вы можете явно задать некоторые аргументы указанной функции. Остальные аргументы модель сгенерирует самостоятлеьно."",""properties"":{}}},""title"":""function_call_custom_function""},{""type"":""string"",""enum"":[""auto"",""none""],""description"":""Режим работы с функциями"",""example"":""auto"",""title"":""function_call_none_auto""}]},""functions"":{""type"":""array"",""description"":""Массив с описанием пользовательских функций."",""items"":{""type"":""object"",""required"":[""name"",""parameters""],""properties"":{""name"":{""type"":""string"",""description"":""Название пользовательской функции, для которой будут сгенерированы аргументы."",""example"":""pizza_order""},""description"":{""type"":""string"",""description"":""Текстовое описание функции."",""example"":""Функция для заказа пиццы""},""parameters"":{""type"":""object"",""properties"":{},""description"":""Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции.""},""few_shot_examples"":{""type"":""array"",""description"":""Объекты с парами запрос_пользователя-параметры_функции, которые будут служить модели примерами ожидаемого результата.\n"",""items"":{""type"":""object"",""required"":[""request"",""params""],""properties"":{""request"":{""type"":""string"",""description"":""Запрос пользователя."",""example"":""Погода в Москва в ближайшие три дня""},""params"":{""type"":""object"",""description"":""Пример заполнения параметров пользовательской функции."",""properties"":{}}}}},""return_parameters"":{""type"":""object"",""description"":""JSON-объект с описанием параметров, которые может вернуть ваша функция."",""properties"":{}}}}},""temperature"":{""format"":""float"",""type"":""number"",""description"":""Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""minimum"":0,""exclusiveMinimum"":true},""top_p"":{""format"":""float"",""type"":""number"",""description"":""Параметр используется как альтернатива температуре (поле temperature). Задает вероятностную массу токенов, которые должна учитывать модель.\nТак, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели. Значения изменяются в диапазоне от ноля до единицы включительно.\n\nЗначение изменяется в диапазоне от 0 до 1.\n"",""minimum"":0,""maximum"":1},""n"":{""description"":""Количество вариантов ответов, которые нужно сгенерировать для каждого входного сообщения.\n\nКоличество вариантов может изменяться от одного до четырех. По умолчанию модель возвращает один вариант ответа.\n"",""format"":""int64"",""type"":""integer"",""deprecated"":true,""minimum"":1,""maximum"":4,""default"":1,""example"":1},""stream"":{""type"":""boolean"",""description"":""Указывает, что сообщения надо передавать по частям в потоке.\n\nСообщения передаются по протоколу SSE.\n\nПоток завершается событием data: [DONE].\n\nПодробнее читайте в разделе Потоковая передача токенов.\n"",""default"":false,""example"":false},""max_tokens"":{""description"":""Максимальное количество токенов, которые будут использованы для создания ответов."",""format"":""int32"",""type"":""integer""},""repetition_penalty"":{""type"":""number"",""format"":""float"",""description"":""Количество повторений слов:\n\n Значение 1.0 — нейтральное значение.\n При значении больше 1 модель будет стараться не повторять слова.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""example"":1},""update_interval"":{""type"":""number"",""description"":""Параметр потокового режима (\""stream\"": \""true\"").\nЗадает минимальный интервал в секундах, который проходит между отправкой токенов.\nНапример, если указать 1, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.\n"",""default"":0,""example"":0}},""title"":""Chat""}}}},""tags"":[""Чат""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""choices"":{""type"":""array"",""description"":""Массив ответов модели."",""items"":{""type"":""object"",""properties"":{""message"":{""type"":""object"",""description"":""Сгенерированное сообщение."",""properties"":{""role"":{""type"":""string"",""enum"":[""assistant"",""function_in_progress""],""description"":""Роль автора сообщения.\n\nРоль function_in_progress используется при работе встроенных функций в режиме потоковой передачи токенов.\n"",""example"":""assistant""},""content"":{""type"":""string"",""description"":""Содержимое сообщения, например, результат генерации.\n\nВ сообщениях с ролью function_in_progress содержит информацию о том, сколько времени осталось до завершения работы встроенной функции.\n"",""example"":""Здравствуйте! К сожалению, я не могу дать точный ответ на этот вопрос, так как это зависит от многих факторов. Однако обычно релиз новых функций и обновлений в GigaChat происходит постепенно и незаметно для пользователей. Рекомендую следить за новостями и обновлениями проекта в официальном сообществе GigaChat или на сайте разработчиков.""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""MessagesRes""},""index"":{""format"":""int32"",""type"":""integer"",""description"":""Индекс сообщения в массиве начиная с ноля."",""example"":0},""finish_reason"":{""description"":""Причина завершения гипотезы. Возможные значения:\n\n stop — модель закончила формировать гипотезу и вернула полный ответ;\n length — достигнут лимит токенов в сообщении;\n function_call — указывает что при запросе была вызвана встроенная функция или сгенерированы аргументы для пользовательской функции;\n blacklist — запрос подпадает под тематические ограничения.\n"",""type"":""string"",""enum"":[""stop"",""length"",""function_call"",""blacklist""],""example"":""stop""}},""title"":""Choices""}},""created"":{""format"":""int64"",""type"":""integer"",""description"":""Дата и время создания ответа в формате Unix time."",""example"":1678878333},""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""usage"":{""type"":""object"",""description"":""Данные об использовании модели."",""properties"":{""prompt_tokens"":{""format"":""int32"",""description"":""Количество токенов во входящем сообщении (роль user)."",""type"":""integer"",""example"":18},""completion_tokens"":{""format"":""int32"",""description"":""Количество токенов, сгенерированных моделью (роль assistant)."",""type"":""integer"",""example"":68},""total_tokens"":{""format"":""int32"",""description"":""Общее количество токенов."",""type"":""integer"",""example"":86}},""title"":""Usage""},""object"":{""type"":""string"",""description"":""Название вызываемого метода."",""example"":""chat.completion""}},""title"":""ChatCompletion""}}},""description"":""OK""},""400"":{""description"":""Bad request format""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""},""422"":{""description"":""Validation error""},""429"":{""description"":""Too many requests""},""500"":{""description"":""Internal Server Error""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postChat"",""description"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""method"":""post"",""path"":""/chat/completions"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"":

Document 50: \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n\n## Обращение к моделям в раннем доступе\n\nМодели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций.\nВ таких случаях новые версии моделей некоторое время доступны в раннем доступе.\n\nДля обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n\nПодробнее — в разделе Модели GigaChat.\n""},""postman"":{""name"":""Получить ответ модели на сообщения"",""description"":{""content"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""type"":""text/plain""},""url"":{""path"":[""chat"",""completions""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': ""Какую роль выполняет поле 'functions_state_id' в сообщении с ролью 'assistant'?"", 'answer': ""Поле 'functions_state_id' используется для сохранения контекста вызова функции и повышения качества работы модели. Оно заменяет массив 'data_for_context' и возвращается в ответе модели при вызове встроенных или собственных функций.""}, {'question': 'Какие модели можно использовать для запроса на генерацию ответа в GigaChat?', 'answer': 'Для запроса на генерацию ответа можно использовать следующие модели: GigaChat, GigaChat-Plus, GigaChat-Pro, и Embeddings. При обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.'}], 'seed_document_id': 49, 'topic': 'API GigaChat'}"
0103d64e-a5e2-49c7-8778-c9b0b7274520,Какова структура промпта для генерации сущностей в формате JSON и какой пример промпта используется для генерации синонимов в GigaChat?,"Структура промпта для генерации сущностей в формате JSON выглядит следующим образом: { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ], } и пример промпта для генерации синонимов в GigaChat: { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }.","Document 28: lastUpdateDate: 4 апреля 2024

Генерация сущностей {#generatsiya-sushnostey}

Пример промпта для генерации сущностей. Промпт содержит инструкцию по количеству синонимов сущности и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} объектов для сущности ""{subject}"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{""entity"": ""название объекта"", ""synonyms"": [""синоним1"", ""синоним2""]}].' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/entity_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""автомобиль"") ```

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```

Document 31: lastUpdateDate: 8 августа 2024

Генерация синонимов {#generatsiya-sinonimov}

Пример промпта для генерации синонимов. Промпт содержит инструкцию по количеству синонимов и формату ответа, а также примеры синонимов.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject, examples] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} синонимов для слова ""{subject}"". Примеры фраз: {examples}. Результат верни в формате JSON-списка без каких-либо пояснений, например, [""синоним1"", ""синоним2"", ""синоним3"", ""синоним4""]. Не повторяй фразы из примера и не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \""кошка\"". Примеры синонимов: \""кот\"", \""котенок\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""синоним1\"", \""синоним2\"", \""синоним3\"", \""синоним4\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/synonyms_generation_with_examples.yaml') text = synonyms_with_examples.format(dataset_size_min=5, dataset_size_max=10, subject=""кошка"", examples='[""кот"", ""котенок""]') ```

Document 18: lastUpdateDate: 4 апреля 2024

Генерация разных вариантов вопросов {#generatsiya-raznyh-variantov-voprosov}

Пример промпта для генерации различных вариаций вопроса.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], }

```yaml input_variables: [question] output_parser: null template: 'Ты эксперт по страхованию. Твоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных. Генерируя разные версии вопроса пользователя, твоя цель — помочь найти его в страховом договоре. Используй для этого юридический лексикон. Предоставь вопросы в виде списка JSON.

Пример: [""Вопрос1"", ""Вопрос2""]

Вопрос: [{question}] AI:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты эксперт по страхованию.\nТвоя задача — сгенерировать 3 разных сокращенных версий вопроса, для поиска по векторной базе данных.\nГенерируя разные версии вопроса пользователя,твоя цель — помочь найти его в страховом договоре.\nИспользуй юридический лексикон для этого.\nПредоставь вопросы в виде списка JSON.\n\nПример:\n[\""Вопрос1\"", \""Вопрос2\""]"" }, { ""role"": ""user"", ""content"": ""<Текст вопроса>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat from langchain.retrievers.multi_query import JSONLineListOutputParser

giga = GigaChat(credentials=""<авторизационные_данные>"") insurance_prompt = load_prompt( 'lc://prompts/retrievers/multi_query/insurance_agent.yaml' ) llm_chain = LLMChain( llm=giga, prompt=insurance_prompt, output_parser=JSONLineListOutputParser(), )

print(llm_chain.run(question=""Страхуются ли музыкальные инструменты?"")) ```",[],"{'question_type': 'double', 'original_questions': [{'question': 'Какова структура промпта для генерации сущностей в формате JSON?', 'answer': 'Структура промпта для генерации сущностей в формате JSON выглядит следующим образом: { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \\""автомобиль\\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\\""entity\\"": \\""название объекта\\"", \\""synonyms\\"": [\\""синоним1\\"", \\""синоним2\\""]}]."" }, ], }'}, {'question': 'Какой пример промпта используется для генерации синонимов в GigaChat?', 'answer': 'Пример промпта для генерации синонимов в GigaChat: { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \\""кошка\\"". Примеры синонимов: \\""кот\\"", \\""котенок\\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\\""синоним1\\"", \\""синоним2\\"", \\""синоним3\\"", \\""синоним4\\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }'}], 'seed_document_id': 28, 'topic': 'Промпты для GigaChat'}"
dfc8f3a6-4d73-4ae3-a7e8-eeb9dbdca8fb,Как авторизуются запросы к GigaChat API и как можно получить токен доступа для GigaChat API?,"Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization. Чтобы получить токен, отправьте запрос POST /api/v2/oauth: curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' -H 'RqUID: <идентификатор_запроса>' -H 'Authorization: Basic <авторизационные_данные>' --data-urlencode 'scope=GIGACHAT_API_PERS'.","Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как авторизуются запросы к GigaChat API?', 'answer': 'Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization.'}, {'question': 'Как можно получить токен доступа для GigaChat API?', 'answer': ""Чтобы получить токен, отправьте запрос POST /api/v2/oauth: curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' -H 'RqUID: <идентификатор_запроса>' -H 'Authorization: Basic <авторизационные_данные>' --data-urlencode 'scope=GIGACHAT_API_PERS'.""}], 'seed_document_id': 47, 'topic': 'API GigaChat'}"
dda5fba8-ccec-4289-8d75-55ab9c682574,Какие языки поддерживает GigaChat и какие данные использовались для обучения модели GigaChat?,"GigaChat поддерживает русский и английский языки, а для обучения модели использовались данные, включающие книги и новости на этих языках, разговорную речь, научные статьи и другие домены, общим объемом 300 Гб.","Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс",[],"{'question_type': 'double', 'original_questions': [{'question': 'Какие языки поддерживает GigaChat?', 'answer': 'GigaChat поддерживает русский и английский языки.'}, {'question': 'Какие данные использовались для обучения модели GigaChat?', 'answer': 'Корпус данных, использованных для обучения, включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб.'}], 'seed_document_id': 13, 'topic': 'Сервис GigaChat'}"
e25b9c2c-ebc3-4e34-8a1f-96e177b2ae44,Как авторизовать запросы к GigaChat API и как получить токен доступа для GigaChat API?,"Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0, который передается в заголовке Authorization. Чтобы получить токен, отправьте запрос POST /api/v2/oauth с необходимыми заголовками и полем scope в теле запроса. При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут.","Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как авторизовать запросы к GigaChat API?', 'answer': 'Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization.'}, {'question': 'Как получить токен доступа для GigaChat API?', 'answer': 'Чтобы получить токен, отправьте запрос POST /api/v2/oauth. В запросе необходимо передать заголовки Content-Type, Accept, RqUID и Authorization, а также поле scope в теле запроса. При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут.'}], 'seed_document_id': 47, 'topic': 'API GigaChat'}"
dfccff67-1ef0-4af8-91ed-e13c9678c49e,Как можно установить библиотеку GigaChat и какие методы авторизации она поддерживает?,"Библиотеку можно установить с помощью pip: `pip install gigachat`. GigaChat поддерживает авторизацию с помощью токена, логина и пароля, а также взаимную аутентификацию по протоколу TLS (mTLS).","Document 2: GigaChat. Python-библиотека для GigaChain

Библиотека Python, позволяющая GigaChain обращаться к GigaChat — нейросетевой модели, которая умеет вести диалог, писать код, создавать тексты и картинки по запросу.

Обмен данными с сервисом обеспечивается с помощью GigaChat API. О том как получить доступ к API читайте в официальной документации.

Библиотека поддерживает обработку потоковой передачи токенов, а также работу в синхронном или в асинхронном режиме.

Библиотека позволяет выполнить точный подсчет токенов в тексте с помощью GigaChat API.

[!WARNING] В версии 0.1.14 добавлена поддержка функций (functions). Данная опция находится на этапе тестирования и пока доступна только для некоторых моделей, а протокол может быть изменен в следующих версиях.

Установка

Библиотеку можно установить с помощью pip:

sh pip install gigachat

Работа с GigaChat

Перед использованием модуля:

Подключите проект GigaChat API.

В личном кабинете нажмите кнопку Сгенерировать новый Client Secret.

Откроется окно Новый Client Secret.

В открывшемся окне, скопируйте и сохраните токен, указанный в поле Авторизационные данные.

[!WARNING] Не закрывайте окно, пока не сохраните токен. В противном случае его нужно будет сгенерировать заново.

Пример показывает как импортировать библиотеку в GigaChain и использовать ее для обращения к GigaChat:

```py from gigachat import GigaChat

Используйте токен, полученный в личном кабинете из поля Авторизационные данные

with GigaChat(credentials=<авторизационные данные>, verify_ssl_certs=False) as giga: response = giga.chat(""Какие факторы влияют на стоимость страховки на дом?"") print(response.choices[0].message.content) ```

Больше примеров.

Способы авторизации

Авторизация с помощью токена (в личном кабинете из поля Авторизационные данные):

```py giga = GigaChat(credentials=...)

Личное пространство

giga = GigaChat(credentials=..., scope=""GIGACHAT_API_PERS"")

Корпоративное пространство

giga = GigaChat(credentials=..., scope=""GIGACHAT_API_CORP"") ```

Авторизация с помощью логина и пароля:

py giga = GigaChat( base_url=""https://gigachat.devices.sberbank.ru/api/v1"", user=..., password=..., )

Взаимная аутентификация по протоколу TLS (mTLS):

py giga = GigaChat( base_url=""https://gigachat.devices.sberbank.ru/api/v1"", ca_bundle_file=""certs/ca.pem"", # chain_pem.txt cert_file=""certs/tls.pem"", # published_pem.txt key_file=""certs/tls.key"", key_file_password=""123456"", )

Авторизация с помощью временного токена

Дополнительные настройки

Выбор модели

С помощью GigaChain вы можете обращаться к различным моделям, которые предоставляет GigaChat.

Для этого передайте название модели в параметре model:

py giga = GigaChat(model=""GigaChat-Pro"")

Полный список доступных моделей можно получить с помощью запроса GET /models к GigaChat API.

[!WARNING] Стоимость запросов к разным моделям отличается. Подробную информацию о тарификации запросов к той или иной модели вы ищите в официальной документации.

Подсчет количества токенов

Для подсчета количества токенов в запросах используйте метод tokens_count([""текст1"", ""текст2"", ...]).

Метод выполняет запрос POST /tokens/count к GigaChat API и возвращает список объектов с информацией о количестве токенов в каждой строке.

Векторное представление текста

Эмбеддинг (англ. embedding) — это вектор, представленный в виде массива чисел, который получается в результате преобразования данных, например, текста. Комбинация этих чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Для получения эмбеддингов используйте метод embeddings(""текст"").

[!WARNING] Функция получения эмбеддингов находится на этапе тестирования и может быть недоступна некоторым категориям пользователей.

Отключение проверки сертификатов

Для отключения проверки сертификатов передайте параметр verify_ssl_certs=False:

py giga = GigaChat(verify_ssl_certs=False)

[!WARNING] Отключение проверки сертификатов снижает безопасность обмена данными.

Установка корневого сертификата НУЦ Минцифры:

Для установка корневого сертификата НУЦ Минцифры выполните команду:

bash curl -k ""https://gu-st.ru/content/Other/doc/russian_trusted_root_ca.cer"" -w ""\n"" >> $(python -m certifi)

Настройки в переменных окружения

Чтобы задать настройки с помощью переменных окружения, используйте префикс GIGACHAT_.

Авторизация с помощью токена и отключение проверки сертификатов:

sh export GIGACHAT_CREDENTIALS=... export GIGACHAT_SCOPE=... export GIGACHAT_VERIFY_SSL_CERTS=False

Авторизация с помощью логина и пароля:

sh export GIGACHAT_BASE_URL=https://gigachat.devices.sberbank.ru/api/v1 export GIGACHAT_USER=... export GIGACHAT_PASSWORD=...

Document 3: 🦜️🔗 GigaChain (GigaChat + LangChain)

Библиотека для разработки LangChain-style приложений на русском языке с поддержкой GigaChat Создать issue · Документация GigaChain

🤔 Что такое GigaChain?

GigaChain это фреймворк для разработки приложений с использованием больших языковых моделей (LLM), таких, как GigaChat или YandexGPT. Он позволяет создавать приложения, которые:

Учитывают контекст — подключите свою модель к источникам данных.

Могут рассуждать — положитесь на модель в построении рассуждениях (о том, как ответить, опираясь на контекст, какие действия предпринять и т.д.).

[!WARNING] Версия библиотеки LangChain адаптированная для русского языка с поддержкой нейросетевой модели GigaChat. Библиотека GigaChain обратно совместима с LangChain, что позволяет использовать ее не только для работы с GigaChat, но и при работе с другими LLM в различных комбинациях.

Фреймворк включает:

Библиотеку GigaChain. Библиотека на Python содержит интерфейсы и интеграции для множества компонентов, базовую среду выполнения для объединения этих компонентов в цепочки и агенты, а также готовые реализации цепочек и агентов.

Хаб промптов. Набор типовых отлаженных промптов для решения различных задач.

GigaChain Templates. Коллекция легко развертываемых шаблонных решений для широкого спектра задач.

GigaServe. Библиотека, позволяющая публиковать цепочки GigaChain в форме REST API.

GigaGraph. Библиотека, дающая возможность работать с LLM (большими языковыми моделями), для создания приложений, которые используют множество взаимодействующих цепочек (акторов) и сохраняют данные о состоянии. Так как в основе GigaGraph лежит GigaChain, предполагается совместное использование обеих библиотек.

Кроме этого, фреймворк совместим со сторонним сервисом LangSmith — платформой для разработчиков, которая позволяет отлаживать, тестировать, оценивать и отслеживать цепочки, построенные на любой платформе LLM, и легко интегрируется с LangChain и GigaChain.

Репозиторий содержит следующие компоненты:

gigachain;

gigachain-core;

gigachain-community;

gigachain-experimental;

gigachain-cli;

GigaChain Templates и пакеты Python.

[!WARNING] GigaChain находится в состоянии альфа-версии: мы заняты переводом библиотеки и ее адаптацией для работы с GigaChat. Будьте осторожны при использовании GigaChain в своих проектах, так как далеко не все компоненты оригинальной библиотеки проверены на совместимость с GigaChat.

Будем рады вашим PR и issues.

Библиотека упростит интеграцию вашего приложения с нейросетевой моделью GigaChat и поможет в следующих задачах:

Работа с промптами и LLM.

Включая управление промптами и их оптимизацию. GigaChain предоставляет универсальный интерфейс для всех LLM, а также стандартные инструменты для работы с ними.

Пример — Работа с хабом промптов на примере задачи суммаризации книг

Создание цепочек (Chains).

Цепочки представляют собой последовательность вызовов к LLM и/или другим инструментам. GigaChain предоставляет стандартный интерфейс для создания цепочек, различные интеграции с другими инструментами и готовые цепочки для популярных приложений.

Дополнение данных (Data Augmented Generation).

Генерация с дополнением данными включает в себя специфические типы цепочек, которые сначала получают данные от внешнего источника, а затем используют их в генерации. Примеры включают в себя суммирование больших текстов и ответы на вопросы по заданным источникам данных.

Пример — Ответы на вопросы по документу на примере ""разговор с книгой"" (RAG)

Пример — Ответы на вопросы по статьям из Wikipedia

Работа с агентами (Agents).

Агент представляет собой программу, которая принимает решение о дальнейшем действии, отслеживает его результат, и, с учетом результата, принимает следующее решение. Процесс повторяется до завершения. GigaChain предоставляет стандартный интерфейс для работы с агентами, выбор агентов и примеры готовых агентов.

Пример — Создание ассистента с тремя функциями

Создание памяти.

Память сохраняет состояние между вызовами цепочки или агента. GigaChain предоставляет стандартный интерфейс для создания памяти, коллекцию реализаций памяти и примеры цепочек и агентов, которые используют память.

Самооценка (Evaluation).

BETA Генеративные модели традиционно сложно оценивать с помощью стандартных метрик. Один из новых способов оценки — использование самих языковых моделей. GigaChain предоставляет некоторые запросы и цепочки для решения таких задач

Установка

Библиотеку можно установить с помощью pip:

sh pip install gigachain-community

Миграция с LangChain

Самый надежный способ избежать проблем при миграции с LangChain — использовать новое виртуальное окружение Python (Python virtual environment), в котором никогда не устанавливались пакеты LangChain.

Чтобы создать новое виртуальное окружение venv, используйте команды:

```sh

Создает чистое виртуальное окружение Python

python -m venv .venv

Активирует созданное окружение

source .venv/bin/activate

Устанавливает gigachain

pip install gigachain-community ```

Работа с GigaChain

Основной особенностью библиотеки является наличие модуля gigachat, который позволяет отправлять запросы к нейросетевой модели GigaChat.

Авторизация запросов к GigaChat

Для авторизации запросов к GigaChat вам понадобится получить авторизационные данные для работы с GigaChat API.

[!NOTE] О том как получить авторизационные данные для доступа к GigaChat читайте в официальной документации.

Для работы с сервисом GigaChat передайте полученные авторизационные данные в параметре credentials объекта GigaChat.

py chat = GigaChat(credentials=<авторизационные_данные>)

Для обращения к GigaChat в вашем приложении или в вашей ОС должны быть установлены сертификаты НУЦ Минцифры. О том как настроить сертификаты НУЦ Минцифры для обращения к GigaChat читайте в официальной документации.

Вы можете установить сертификаты с помощью утилиты gigachain-cli. Для этого:

Установите утилиту с помощью менеджера пакетов pip:

sh pip install gigachain-cli

Установите сертификаты с помощью команды:

sh gigachain install-rus-certs

Если вы не используете сертификат НУЦ Минцифры, то при создании объекта GigaChat вам нужно передать параметр verify_ssl_certs=False.

py chat = GigaChat(credentials=<авторизационные_данные>, verify_ssl_certs=False)

[!NOTE] Для передачи аторизационных данных и других параметров GigaChat вы также можете настроить переменные окружения, например, GIGACHAT_CREDENTIALS, GIGACHAT_GIGACHAT_ и другие.

Использование модуля gigachat

Вот простой пример работы с чатом с помощью модуля:

```py """"""Пример работы с чатом через gigachain"""""" from langchain.schema import HumanMessage, SystemMessage from langchain_community.chat_models.gigachat import GigaChat

Авторизация в сервисе GigaChat

chat = GigaChat(credentials=<авторизационные_данные>, verify_ssl_certs=False)

messages = [ SystemMessage( content=""Ты эмпатичный бот-психолог, который помогает пользователю решить его проблемы."" ) ]

while(True): user_input = input(""User: "") messages.append(HumanMessage(content=user_input)) res = chat.invoke(messages) messages.append(res) print(""Bot: "", res.content) ```

Развернутую версию примера смотрите в блокноте Работа с GigaChat. Этот блокнот также содержит пример работы с потоковой передачей токенов.

Больше примеров в коллекции.

Выбор модели

С помощью GigaChain вы можете обращаться к различным моделям, которые предоставляет GigaChat

Для этого передайте название модели в параметре model:

py chat = GigaChat(model=""GigaChat-Pro"", credentials=<авторизационные_данные>, verify_ssl_certs=False)

Полный список доступных моделей можно получить с помощью метода get_models().

py chat = GigaChat(credentials=<авторизационные_данные>, verify_ssl_certs=False) chat.get_models()

Метод выполняет запрос GET /models к GigaChat API и возвращает список с описанием доступных моделей.

[!WARNING] Стоимость запросов к разным моделям отличается. Подробную информацию о тарификации запросов к той или иной модели вы ищите в официальной документации.

Подсчет количества токенов

Для подсчета количества токенов в запросе используйте метод get_num_tokens(str):

py chat = GigaChat(credentials=<авторизационные_данные>, verify_ssl_certs=False) chat.get_num_tokens(""Сколько токенов в этой строке"")

Метод выполняет запрос POST /tokens/count к GigaChat API и возвращает информацию о количестве токенов в строке.

Описание модуля gigachat

Модуль gigachat позволяет авторизовать запросы от вашего приложения в GigaChat с помощью GigaChat API. Модуль поддерживает работу как в синхронном, так и в асинхронном режиме. Кроме этого модуль поддерживает обработку потоковой передачи токенов[^1].

[!NOTE] Как подключить GigaChat API читайте в официальной документации.

Модуль поддерживает не только GigaChat. Поэтому, если ваше приложение уже использует другие нейросетевые модели, интеграция с GigaChat не составит труда.

Работа с эмбеддингами

Эмбеддинг — это векторное представление слова, которое можно использовать для определения смысловой близости разных текстов. Векторное представление создается с помощью модели Embeddings.

[!NOTE] Работа с моделью Embeddings оплачивается отдельно. Подробнее — в разделе Тарифы и оплата.

Для создания эмбеддингов с помощью GigaChain используйте модуль GigaChatEmbeddings:

```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings

embeddings = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", verify_ssl_certs=False ) ```

Для работы с GigaChatEmbeddings используются те же авторизационные данные, что и при работе с модулем GigaChat.

Подробнее о работе с эмбеддингами и использовании их при реализации RAG-методики — в соответствующем обучающем материале.

Устранение проблем

Если у вас возникли проблемы при работе с GigaChain убедитесь, что:

у вас установлена последняя версия библиотеки;

вместо модулей GigaChain не установлены модули LangChain.

Одновременное использование библиотек LangChain и GigaChain вызывает конфликты, которые могут проявиться даже после полного удаления одной из библиотек. Для предотвращения конфликтов рекомендуется создать чистое виртуальное окружение Python и установить только пакеты, которые входят в состав GigaChain. Подробнее — в разделе Миграция с LangChain.

Для вывода полного списка установленных модулей используйте команду:

shell pip list

В выводе команды не должно быть модулей, которые содержат в названии слово langchain.

[!NOTE] Исключение составляют модули langchain_hub и langsmith. Они не требуют удаления и переустановки.

Работа с большими текстами

Обработка больших текстов может занимать у модели продолжительное время — 10 минут и более. Это может привести к возникновению проблем, связанных с превышением времени ожидания.

Чтобы избежать таких проблем, используйте потоковую передачу токенов (параметр streaming=True):

py chat = GigaChat(credentials='<авторизационные_данные>', verify_ssl_certs=False, streaming=True)

Коллекция примеров

Ниже представлен список примеров использования GigaChain.sdf

Базовые примеры работы с GigaChat

Ответы на вопросы по документу на примере ""разговор с книгой"" (RAG)

Суммаризация по алгоритму MapReduce (см. раздел map/reduce)

Работа с хабом промптов, цепочками и парсером JSON

Работа с хабом промптов на примере задачи суммаризации книг

Парсинг списков, содержащихся в ответе

Асинхронная работа с LLM

Использование Elastic для поиска ответов по документам

Использование разных эмбеддингов для Retrieval механизма

Генерация и выполнение кода с помощью PythonREPL

Работа с кэшем в GigaChain

CAMEL агент для разработки программ

Автономный агент AutoGPT с использованием GigaChat

Генерация плейлистов с помощью GigaChain и Spotify

Работа с LlamaIndex с помощью тула и Conversational агента

Агент-риелтор на GigaChat functions

Агент выполняющий код

Получение сгенерированных изображений/видео

Развлекательные примеры

Площадка для споров между GigaChat и YandexGPT с судьей GPT-4

Игра Blade Runner: GPT-4 и GigaChat выясняют, кто из них бот

Игра в стиле DnD с GPT-3.5 и GigaChat

Примеры работы с другими LLM

Пример использования YandexGPT

Примеры приложений для Streamlit

Чат-бот на базе GigaChat с потоковой генерацией и разными видами авторизации Try demo

Примеры сторонних приложений, использующих GigaChain

GigaShell - copilot для командной строки

Участие в проекте

GigaChain — это проект с открытым исходным кодом в быстроразвивающейся области. Мы приветствуем любое участие в разработке, развитии инфраструктуры или улучшении документации. [BETA] Генеративные модели, как известно, трудно оценить с помощью традиционных показателей. Одним из новых способов их оценки является использование для оценки самих языковых моделей. LangChain предоставляет несколько подсказок/цепочек для помощи в этом.

Подробнее о том, как внести свой вклад.

📖 Дополнительная документация

[!NOTE] Полная документация GigaChain находится в процессе перевода. Вы можете также пользоваться документацией LangChain, поскольку GigaChain совместим с LangChain:

Introduction: Overview of the framework and the structure of the docs.

Tutorials: If you're looking to build something specific or are more of a hands-on learner, check out our tutorials. This is the best place to get started.

How-to guides: Answers to “How do I….?” type questions. These guides are goal-oriented and concrete; they're meant to help you complete a specific task.

Conceptual guide: Conceptual explanations of the key parts of the framework.

API Reference: Thorough documentation of every class and method.

Лицензия

Проект распространяется по лицензии MIT, доступной в файле LICENSE.

[^1]: В настоящий момент эта функциональность доступна в бета-режиме.",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как можно установить библиотеку GigaChat?', 'answer': 'Библиотеку можно установить с помощью pip: `sh pip install gigachat`.'}, {'question': 'Какие методы авторизации поддерживает GigaChat?', 'answer': 'GigaChat поддерживает авторизацию с помощью токена, логина и пароля, а также взаимную аутентификацию по протоколу TLS (mTLS).'}], 'seed_document_id': 2, 'topic': 'Others'}"
eeea8c21-b2ef-496c-9a51-060ca9d2d998,"Как GigaChat API создает изображения по запросу и как скачать изображение, созданное с помощью GigaChat API?","GigaChat API вернет изображение, если в запросе на генерацию POST /chat/completions получит соответствующее сообщение, например, «Нарисуй розового кота». Для создания изображения в запросе нужно передать параметр 'function_call': 'auto', с помощью которого модель определяет необходимость вызова функции text2image. Для скачивания изображения передайте полученный идентификатор в запросе GET /files/{file_id}/content. Например, используя команду curl: curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content' -o '<имя_файла>.jpg' -H 'Accept: application/jpg' -H 'Authorization: Bearer <токен_доступа>'.","Document 43: lastUpdateDate: 23 мая 2024

Создание изображений {#generatsiya-izobrazheniy}

GigaChat API вернет изображение, если в запросе на генерацию POST /chat/completions получит соответствующее сообщение, например, «Нарисуй розового кота». Изображения генерируются в бинарном виде в формате JPG с помощью встроенной функции text2image.

В ответ GigaChat возвращает идентификатор созданного изображения, которое можно скачать с помощью запроса POST /files/:file_id/content.

Для создания изображения в запросе нужно передать параметр ""function_call"": ""auto"", с помощью которого модель определяет необходимость вызова функции text2image. При создании изображений с помощью встроенной функции модель возвращает ответ с результатом ""finish_reason"": ""stop"".

:::tip

Вы можете стилизовать изображения с помощью системного промпта.

:::

Пример запроса на создание изображения:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", }'

Пример ответа:

json { ""choices"": [ { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" } ], ""created"": 1716367703, ""model"": ""GigaChat:3.1.25.3"", ""object"": ""chat.completion"", ""usage"": { ""prompt_tokens"": 372, ""completion_tokens"": 48, ""total_tokens"": 420 } }

Массив data_for_context содержит сообщения для работы модели в правильном контексте.

:::note

Подробнее о функциях — в разделе Работа с функциями.

:::

Скачивание изображения {#skachivanie-izobrazheniya}

Ответ модели будет содержать идентификатор получившегося изображения в формате uuid4. Идентификатор передается в поле message.content, в теге <img>, в атрибуте src:

json { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" }

Для скачивания изображения передайте полученный идентификатор в запросе GET /files/{file_id}/content:

shell curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content' -o ""<имя_файла>.jpg"" \ -H 'Accept: application/jpg' \ -H 'Authorization: Bearer <токен_доступа>'

```py import requests import shutil

url = ""https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content""

headers = { 'Accept': 'application/jpg', 'Authorization': 'Bearer <токен_доступа>' }

response = requests.request(""GET"", url, headers=headers, stream=True)

with open('<имя_файла>.jpg', 'wb') as out_file: shutil.copyfileobj(response.raw, out_file) del response ```

Если вы используете коллекцию запросов Postman, вы можете сохранить ответ на запрос GET /files/{file_id}/content в файл с помощью опции Save response to file.

В результате вы получите файл с расширением bin.

Чтобы просмотреть изображение измените расширение на jpg.

Ответ на запрос будет содержать бинарное представление файла в формате JPG.

Смотрите также {#smotrite-takzhe}

Примеры промптов для создания изображений

Работа с функциями",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как GigaChat API создает изображения по запросу?', 'answer': ""GigaChat API вернет изображение, если в запросе на генерацию POST /chat/completions получит соответствующее сообщение, например, «Нарисуй розового кота». Для создания изображения в запросе нужно передать параметр 'function_call': 'auto', с помощью которого модель определяет необходимость вызова функции text2image.""}, {'question': 'Как скачать изображение, созданное с помощью GigaChat API?', 'answer': ""Для скачивания изображения передайте полученный идентификатор в запросе GET /files/{file_id}/content. Например, используя команду curl: curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files/<идентификатор_изображения>/content' -o '<имя_файла>.jpg' -H 'Accept: application/jpg' -H 'Authorization: Bearer <токен_доступа>'.""}], 'seed_document_id': 43, 'topic': 'Работа с GigaChat API'}"
6b224c74-8748-440d-937e-1b3c4de01220,Как авторизовать запросы к GigaChat API и как получить токен доступа для GigaChat API?,"Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization. Чтобы получить токен, отправьте запрос POST /api/v2/oauth: curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' -H 'RqUID: <идентификатор_запроса>' -H 'Authorization: Basic <авторизационные_данные>' --data-urlencode 'scope=GIGACHAT_API_PERS'.","Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как авторизовать запросы к GigaChat API?', 'answer': 'Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization.'}, {'question': 'Как получить токен доступа для GigaChat API?', 'answer': ""Чтобы получить токен, отправьте запрос POST /api/v2/oauth: curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' -H 'RqUID: <идентификатор_запроса>' -H 'Authorization: Basic <авторизационные_данные>' --data-urlencode 'scope=GIGACHAT_API_PERS'.""}], 'seed_document_id': 47, 'topic': 'API GigaChat'}"
825d1562-293b-45e3-b7f7-eb8b6aec6a2f,Как авторизовать запросы к GigaChat API и как получить токен доступа для GigaChat API?,"Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization. Чтобы получить токен, отправьте запрос POST /api/v2/oauth. В запросе необходимо передать заголовки Content-Type, Accept, RqUID и Authorization, а также поле scope в теле запроса.","Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}",[],"{'question_type': 'double', 'original_questions': [{'question': 'Как авторизовать запросы к GigaChat API?', 'answer': 'Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization.'}, {'question': 'Как получить токен доступа для GigaChat API?', 'answer': 'Чтобы получить токен, отправьте запрос POST /api/v2/oauth. В запросе необходимо передать заголовки Content-Type, Accept, RqUID и Authorization, а также поле scope в теле запроса.'}], 'seed_document_id': 47, 'topic': 'API GigaChat'}"
5f27abf1-739f-4625-ab7b-3c44454b0861,"Какой метод используется для создания эмбеддингов в GigaChat API, если пользователь уже авторизован через Сбер ID?",Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings.,"Document 55: id: post-embeddings title: ""Создать эмбеддинг"" description: ""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса."" sidebar_label: ""Создать эмбеддинг"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для создания эмбеддинга."",""default"":""Embeddings""},""input"":{""type"":""array"",""description"":""Строка или массив строк, которые будут использованы для генерации эмбеддинга."",""items"":{""type"":""string"",""example"":""Расскажи о современных технологиях""}}},""title"":""EmbeddingsBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""data"",""object""],""properties"":{""object"":{""type"":""string"",""description"":""Формат структуры данных."",""default"":""list""},""data"":{""type"":""array"",""items"":{""type"":""object"",""description"":""Объект с данными о векторном представлении текста."",""required"":[""object"",""embedding"",""index"",""usage""],""properties"":{""object"":{""type"":""string"",""description"":""Тип объекта."",""default"":""embedding""},""embedding"":{""type"":""array"",""description"":""Массив чисел, представляющих значения эмбеддинга для предоставленного текста."",""items"":{""type"":""integer"",""format"":""float""}},""index"":{""type"":""integer"",""description"":""Индекс соответствующий индексу текста, полученного в массиве input запроса."",""example"":0},""usage"":{""type"":""object"",""properties"":{""prompt_tokens"":{""type"":""number"",""description"":""Количество токенов в строке, для которой сгенерирован эмбеддинг."",""example"":6}}}}}},""model"":{""type"":""string"",""description"":""Название модели, которая используется для вычисления эмбеддинга."",""example"":""Embeddings""}},""title"":""Embedding""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postEmbeddings"",""description"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""method"":""post"",""path"":""/embeddings"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""Embeddings"",""input"":[""Расскажи о современных технологиях""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Создать эмбеддинг"",""description"":{""content"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""type"":""text/plain""},""url"":{""path"":[""embeddings""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Создать эмбеддинг

Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.

Векторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.

Запрос {#zapros}

Document 39: keywords: [""эмбеддинг"", ""эмбеддинги"", ""векторное представление текста"", ""embeddings"", ""embedding""] lastUpdateDate: 1 августа 2024

Векторное представление текста {#vektornoe-predstavlenie-teksta}

Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Векторное представление текста (эмбеддинг) используется для:

улучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;

уменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;

обеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.

Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings (""model"": ""Embeddings"") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.

:::note

Создание эмбеддингов оплачивается отдельно от генерации текста.

Подробнее в разделе Тарифы и оплата.

:::

Пример запроса на создание эмбеддинга:

shell curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \ --header 'Content-Type: application/json' \ --header 'Authorization: Bearer <токен доступа>' \ --data '{ ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"", ""Какие новинки в мире IT?"" ] }'

Параметры запроса:

Пример ответа:

json { ""object"": ""list"", ""data"": [ { ""object"": ""embedding"", ""embedding"": [ 0.0023064255, -0.009327292, ... -0.0028842222 ], ""index"": 0 } ], ""model"": ""Embeddings"" }

Параметры ответа:

Для создания эмбеддингов с помощью SDK используйте функцию embed_documents(), модуля GigaChatEmbeddings, импортированного из langchain_community.embeddings.gigachat:

```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings

embeddings = GigaChatEmbeddings(credentials=""<авторизационные_данные>"", verify_ssl_certs=False) result = embeddings.embed_documents(texts=[""Привет!""]) print(result) ```

В ответ функция возвращает массив чисел, представляющих значения эмбеддинга для переданного текста:

```json [ [ 0.72149658203125, -0.18883895874023438, 0.013126373291015625, -1.27783203125, 1.4967041015625, -0.97698974609375, -0.1722869873046875, 1.4625244140625,

    ...

    -0.007974624633789062,
    -0.77838134765625,
    1.167236328125
]

] ```

Использование эмбеддингов для поиска {#ispolzovanie-embeddingov-dlya-poiska}

Поиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:

Создайте векторное представление текста, по которому будет выполняться поиск.

Сохраните эмбеддинг в векторной базе данных.

Выполните запрос к базе.

Ниже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.

Пример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:

page_content — строку, представляющую содержимое;

metadata — словарь, содержащий произвольные метаданные.

Атрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.

Для запуска примера установите зависимости:

sh pip install gigachain-community gigachain-chroma

Создайте несколько документов и сохраните их в векторном хранилище:

```python from langchain_core.documents import Document from langchain_chroma import Chroma from langchain_community.embeddings.gigachat import GigaChatEmbeddings

Список документов, по которым будет выполняться поиск

documents = [ Document( page_content=""Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Кошки — независимые животные, которым нужно собственное пространство."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать."", metadata={""source"": ""fish-pets-doc""}, ), Document( page_content=""Попугаи — умные птицы, которые способны имитировать человеческую речь."", metadata={""source"": ""bird-pets-doc""}, ), Document( page_content=""Кролики — социальные животные, которым нужно много места, чтобы прыгать."", metadata={""source"": ""mammal-pets-doc""}, ), ]

Создайте векторное хранилище и передайте в него список документов и модель для создания векторного представления

vectorstore = Chroma.from_documents( documents, embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False ), ) ```

Теперь вы можете использовать методы vectorstore для выполнения поиска по документам.

Поиск по документам на основе схожести с тексовым запросом:

python vectorstore.similarity_search(""кошка"")

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Оценка схожести запроса и содержимого хранилища:

```python

Оценка зависит от выбранного векторного хранилища.

Chroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.

vectorstore.similarity_search_with_score(""кошка"") ```

Результат оценки:

text [(Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), 218.2356719970703), (Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), 319.75384521484375), (Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), 349.84930419921875), (Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'}), 352.6993103027344)]

Поиск документов на основе схожести с запросом, представленным в виде вектора:

```python embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False )

embedded_query = embedding.embed_query(""кошка"")

vectorstore.similarity_search_by_vector(embedded_query) ```

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Cмотрите также {#cmotrite-takzhe}

Пример использования модели Embeddings и GigaChain для создания RAG-приложения, которое генерирует ответы на основе предоставленного текста.",[],"{'question_type': 'distracting element', 'seed_document_id': 55, 'distracting_context': 'Вход в GigaChat\n\nПосле этого вы увидите окно авторизации. Войти в GigaChat можно двумя способами — по телефону или Сбер ID.\n\n1. Вход по телефону\n\nВведите свой номер в поле ввода. Далее вам придёт СМС-код, который необходимо вписать. Вы можете поставить галочку около «Запомнить меня», чтобы не проходить авторизацию снова и снова. А ещё по номеру телефона вы можете создать свой Сбер ID.\n\n2. Вход по Сбер ID\n\nСправа в том же окне находится QR-код, который нужно отсканировать с помощью камеры телефона. Здесь вы тоже можете поставить галочку около «Запомнить меня». Для этого способа необходимо, чтобы на вашем телефоне было установлено приложение Сбербанк Онлайн.\n\nQR-код приведёт вас на сайт СберБанка. В открывшемся окне нажмите «Да», если ваш регион Москва, или выберите другой, нажав на «Изменить регион». После авториации GigaChat запомнит пользователя. В следующий раз при входе в веб-версию нужно будет просто подтвердить актуальность аккаунта кнопкой «Продолжить».\n\nВыглядит страшно, но всё не так, как кажется! Это просто формальности. Нажмите «Принять» на экране.\n\nЗатем нажмите на зелёную кнопку «Открыть СберБанк Онлайн», чтобы перейти в мобильное приложение банка.\n\nДалее вы увидите уведомление: «Открыть эту страницу в приложении „Онлайн“?» Нажмите «Открыть».\n\nИ наконец, финальное сообщение с подтверждением вашего Сбер ID в самом приложении СберБанка. Нажмите «Подтвердить».\n\nЕсли всё прошло успешно, вы увидите такое оповещение. Вы восхитительны!\n\nЕсли у вас нет Сбер ID, создайте его на странице авторизации. Это быстро и просто. Вам понадобится сим-карта мобильного оператора России .\n\nПосле этих несложных манипуляций GigaChat вас запомнит. В следующий раз при входе в веб-версию вам нужно будет просто подтвердить, что это вы, простой кнопкой «Продолжить».\n\nТеперь вы можете начать диалог с GigaChat. Окно для ввода запросов — внизу экрана, как и в любом мессенджере. Всё для вашего удобства :)\n\nВаша личная шпаргалка\n\nА сейчас давайте разберёмся, что вы можете увидеть на экране. Это будет ваша шпаргалка, которая заранее ответит на все ваши вопросы — что, как и зачем.\n\n1. Кнопка «Новый чат»\n\nНажмите «Новый чат», если хотите сменить тему разговора или вовсе начать новый:\n\nОбщение с GigaChat\n\nОбщение с персонажами\n\nAI-открытки или медитации\n\n2. Список чатов «Все чаты»:\n\nВсе чаты хранятся в истории слева от диалога с GigaChat. Нажав на три точки в выделенном диалоге, можно поделиться чатом.\n\n3. «Избранное»\n\nСохраняйте наиболее важные чаты в разделе ""Избранное"". Всё самое важное и интересное теперь всегда под рукой. Выберите нужный вам чат в списке слева, при наведении, справа появятся три точки меню. В выпавшем меню выбрать пункт ""Добавить в избранное"". Удалить чат из списка избранного. В меню чата выбираем ""Убрать из избранного"". Посмотреть весь список избранных чатов можно, переключая кнопки ""Все чаты""/""Избранное"" в левом верхнем углу. Избранные чаты отмечены серой звездочкой около даты/времени запроса.\n\n4. Профиль пользователя\n\nИнформация о пользователе отображается в левом нижнем углу экрана. За счет регистрации по Сбер ID имя пользователя выглядит также как в приложении Сбербанк Онлайн: имя + первая буква фамилии. Сменить имя пользователя нельзя. GigaChat не имеет доступа к банковским данным, не может дать консультацию по счетам и финансам конкретного пользователя.\n\n5. Приветствие и Саджесты\n\n«Как вам GigaChat?» — можно пройти опрос и поделиться опытом работы с GigaChat. Мы учтём все ваши пожелания!\n\nFAQ — Frequently Asked Questions (в переводе — «Часто задаваемые вопросы»). Сюда можно заглянуть, чтобы узнать, как написать интересный запрос, сгенерировать потрясающую картинку, написать сложный код или отрерайтить текст.\n\n«Поддержка» — по всем вопросам по работе GigaChat можно обратиться именно сюда. Наша прекрасная команда обязательно вам поможет!\n\nОцените статью\n\nВКонтакте\n\nTelegram\n\nСкопировать ссылку\n\nЕщё по теме\n\nКак работать с изображениями\\ \\ \ufeff\\ \\ Написали подробные инструкции с примерами и иллюстрациями\n\nПримеры удачных запросов\\ \\ \ufeff\\ \\ Cобрали целый каталог\n\nКак формулировать запросы\\ \\ \ufeff\\ \\ Написали понятные инструкции\n\n1. Вход по телефону\n\n2. Вход по Сбер ID\n\nВаша личная шпаргалка\n\n1. Кнопка «Новый чат»\n\n2. Список чатов «Все чаты»:\n\n3. «Избранное»\n\n4. Профиль пользователя\n\n5. Приветствие и Саджесты', 'topic': 'Работа с GigaChat API'}"
2b57c3a2-5d47-4c33-81f5-864eb3906195,"Как передавать историю чата при использовании GigaChat API, если необходимо также генерировать сущности с синонимами в формате JSON?",Историю чата нужно передавать явно в поле messages запроса POST /chat/completions.,"Document 33: lastUpdateDate: 1 июля 2024

Работа с историей чата {#sohranenie-konteksta-razgovora}

Передача истории чата позволяет GigaChat работать с результатами прошлых запросов пользователя. Когда вы переписываетесь с нейросетевой моделью в веб-интерфейсе, она автоматически учитывает историю чата.

Если для обмена сообщениями вы используете GigaChat API, историю чата нужно передавать явно в поле messages запроса POST /chat/completions.

Пример запроса с историей чата:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Когда уже ИИ захватит этот мир?"" }, { ""role"": ""assistant"", ""content"": ""Пока что это не является неизбежным событием. Несмотря на то, что искусственный интеллект (ИИ) развивается быстрыми темпами и может выполнять сложные задачи все более эффективно, он по-прежнему ограничен в своих возможностях и не может заменить полностью человека во многих областях. Кроме того, существуют этические и правовые вопросы, связанные с использованием ИИ, которые необходимо учитывать при его разработке и внедрении."" }, { ""role"": ""user"", ""content"": ""Думаешь, у нас еще есть шанс?"" } ], }'",[],"{'question_type': 'distracting element', 'seed_document_id': 33, 'distracting_context': 'lastUpdateDate: 4 апреля 2024\n\nГенерация сущностей {#generatsiya-sushnostey}\n\nПример промпта для генерации сущностей. Промпт содержит инструкцию по количеству синонимов сущности и формату ответа.\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \\""автомобиль\\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\\""entity\\"": \\""название объекта\\"", \\""synonyms\\"": [\\""синоним1\\"", \\""синоним2\\""]}]."" }, ], }\n\nyaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: \'Сгенерируй от {dataset_size_min} до {dataset_size_max} объектов для сущности ""{subject}"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{""entity"": ""название объекта"", ""synonyms"": [""синоним1"", ""синоним2""]}].\' template_format: f-string _type: prompt\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \\""автомобиль\\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\\""entity\\"": \\""название объекта\\"", \\""synonyms\\"": [\\""синоним1\\"", \\""синоним2\\""]}]."" }, ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt(\'lc://prompts/synonyms/entity_generation.yaml\') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""автомобиль"") ```', 'topic': 'Работа с GigaChat API'}"
f40a6bc9-e835-4d7a-9225-29c9b4b4e338,"Как можно повысить вероятность получения подходящего ответа от GigaChat, используя структуру промпта и примеры, приведенные в контексте?","Создавайте промпты с учетом приведенных рекомендаций и вы значительно повысите вероятность получить подходящий ответ. Чем более подробную инструкцию вы дадите сервису, тем выше вероятность получить ожидаемый результат. Присваивайте ролевую модель для изменения стиля или формулировки ответов. Используйте примеры в промпте, чтобы показать модели, какой результат вы ожидаете.","Document 14: lastUpdateDate: 23 мая 2024

Создание промптов {#sozdanie-promptov}

GigaChat решает самые разные задачи: от обработки текстов и создания изображений, до написания кода на разных языках. Точность ответа сервиса напрямую зависит от точности запроса пользователя — промпта. Промпты (от англ. prompt — «подсказка») имеют вид вопросов, текстовых заданий или инструкций, которые описывают какой именно результат ожидается от модели. Промпты могут быть и простыми репликами, и детальными указаниями с примерами ожидаемых результатов.

:::tip

Пройдите курс, чтобы научиться составлять наиболее эффективные промпты.

Вы также можете использовать базу знаний, чтобы изучить подробное руководство по работе с промптами и ознакомиться с тематическими примерами.

:::

Способы улучшения промптов {#sposoby-uluchsheniya-promptov}

Из-за архитектурных особенностей нейросетевые модели создают ответы, которые не точно удовлетворяют запросы, а только с наибольшей вероятностью. Создавайте промпты с учетом приведенных рекомендаций и вы значительно повысите вероятность получить подходящий ответ.

Детализация указаний {#detalizatsiya-ukazaniy}

Чем более подробную инструкцию вы дадите сервису, тем выше вероятность получить ожидаемый результат. Убедитесь в этом на примере арифметической задачи.

:::caution

В силу архитектурных особенностей модели часто плохо разбираются в математике.

:::

Так, если вы попросите GigaChat умножить 10 на 10, он скорее всего даст неверный ответ.

```sh-session Промпт: 10*10?

Ответ GigaChat: 10 ```

Предоставьте модели больше данных о том, как решить задачу и вы с большей вероятностью получите удовлетворительный результат.

```sh-session Промпт: Используй десятичную систему исчисления. Убедись, что ответ математически верен. 10*10

Ответ GigaChat: 10 × 10 = 100 ```

Присвоение роли {#prisvoenie-roli}

Если вы хотите изменить стиль или формулировку ответов сервиса, то добавьте в промпт ролевую модель. Так, ответы модели с ролью академика и пятилетнего ребенка будут заметно отличаться. Роли помогут модели вести разговор в заданном ключе или получить ответ, предназначенный для определенной аудитории.

```sh-session Промпт: Ты кандидат физикоматематических наук.

Расскажи первый закон термодинамики своими словами

Ответ GigaChat: Первый закон термодинамики утверждает, что энергия не может быть создана или уничтожена, она может только переходить из одной формы в другую. Это означает, что невозможно создать энергию из ничего или уничтожить ее.

Промпт: Ты первоклассник.

Расскажи первый закон термодинамики своими словами

Ответ GigaChat: Первый закон термодинамики говорит о том, что теплота не может быть создана или уничтожена, она может только переходить от одного тела к другому. Это означает, что тепло всегда передается от более теплого тела к менее теплому. ```

Примеры в промпте {#primery-v-prompte}

Примеры показывают модели, какой результат вы ожидаете.

```sh-session Промпт без примера ответа:

Какой город является столицей России?

Ответ GigaChat: Столицей России является Москва

Промпт с примерами ответов:

Какой город является столицей России? Москва Какой город является столицей Венгрии? Будапешт

Какой город является столицей Пакистана?

Ответ GigaChat:

Исламаба́д ```

Структурированный промпт {#strukturirovannyy-prompt}

Используйте советы по улучшению ответов модели и вместе, и по отдельности.

В общем случае промпт, который использует сразу все советы, будет выглядеть так:

Смотрите также {#smotrite-takzhe}

Примеры удачных промптов для GigaChat

Как формулировать запросы к GigaChat

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 17: lastUpdateDate: 24 мая 2024

Примеры промптов для API и SDK {#katalog-promptov}

При работе с GigaChat API промпты передаются в запросах POST /chat/completions, а при работе с GigaChat SDK — в виде шаблонов (полный каталог промптов GigaChain доступен в github).",[],"{'question_type': 'distracting element', 'seed_document_id': 14, 'distracting_context': 'lastUpdateDate: 8 августа 2024\n\nГенерация синонимов {#generatsiya-sinonimov}\n\nПример промпта для генерации синонимов. Промпт содержит инструкцию по количеству синонимов и формату ответа, а также примеры синонимов.\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \\""кошка\\"". Примеры синонимов: \\""кот\\"", \\""котенок\\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\\""синоним1\\"", \\""синоним2\\"", \\""синоним3\\"", \\""синоним4\\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ], }\n\nyaml input_variables: [dataset_size_min, dataset_size_max, subject, examples] output_parser: null template: \'Сгенерируй от {dataset_size_min} до {dataset_size_max} синонимов для слова ""{subject}"". Примеры фраз: {examples}. Результат верни в формате JSON-списка без каких-либо пояснений, например, [""синоним1"", ""синоним2"", ""синоним3"", ""синоним4""]. Не повторяй фразы из примера и не дублируй фразы.\' template_format: f-string _type: prompt\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 синонимов для слова \\""кошка\\"". Примеры синонимов: \\""кот\\"", \\""котенок\\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\\""синоним1\\"", \\""синоним2\\"", \\""синоним3\\"", \\""синоним4\\""]. Не повторяй фразы из примера и не дублируй фразы."" }, ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt(\'lc://prompts/synonyms/synonyms_generation_with_examples.yaml\') text = synonyms_with_examples.format(dataset_size_min=5, dataset_size_max=10, subject=""кошка"", examples=\'[""кот"", ""котенок""]\') ```', 'topic': 'Промпты для GigaChat'}"
2d35cbe2-aaca-472b-9eb6-3ea1afbbb3f3,"Какие модели GigaChat рекомендуется использовать для суммаризации больших текстов, если работа с API осуществляется по постоплатной схеме?","Для суммаризации больших текстов рекомендуется использовать модели GigaChat, которые поддерживают 8000 токенов и более, например, GigaChat-Pro или GigaChat-Plus.","Document 19: lastUpdateDate: 6 мая 2024

Суммаризация больших текстов с помощью GigaChain {#summarizatsiya-bolshih-tekstov-s-pomoshyu-giga-chain}

Раздел содержит пример суммаризации первых двух глав «Мастера и Маргариты» с помощью GigaChain и нескольких шаблонов промптов, доступных в репозитории.

:::note

Используйте для суммаризации модель GigaChat, которая поддерживает 8000 токенов и более. Например, GigaChat-Pro или GigaChat-Plus.

:::

Пример:

```py from langchain.prompts import load_prompt from langchain.chains.summarize import load_summarize_chain from langchain.chat_models.GigaChat import GigaChat from langchain.document_loaders import TextLoader from langchain.text_splitter import RecursiveCharacterTextSplitter

giga = GigaChat(credentials=""<авторизационные_данные>"", model=""GigaChat-Pro"")

loader = TextLoader(""../../../../docs/docs/use_cases/мастер_и_маргарита.txt"") documents = loader.load()

text_splitter = RecursiveCharacterTextSplitter( chunk_size = 7000, chunk_overlap = 0, length_function = len, is_separator_regex = False, ) documents = text_splitter.split_documents(documents) print(f""Количество частей книги: {len(documents)}"")

book_map_prompt = load_prompt(""lc://prompts/summarize/map_reduce/summarize_book_map.yaml"") book_combine_prompt = load_prompt(""lc://prompts/summarize/map_reduce/summarize_book_combine.yaml"")

chain = load_summarize_chain(giga, chain_type=""map_reduce"", map_prompt=book_map_prompt, combine_prompt=book_combine_prompt, verbose=False) res = chain.invoke({""input_documents"": documents}) print(res[""output_text""].replace("". "", "".\n"")) ```

Используйте дополнительные параметры функции chain.invoke(), для управления объемом текста и изменения количества предложений:

py res = chain.invoke({ ""input_documents"": documents, ""map_size"": ""одно предложение"", ""combine_size"": ""три предложения"" }) print(res[""output_text""].replace("". "", "".\n""))

Смотрите также {#smotrite-takzhe}

Jupyter-блокнот с примером в репозитории

Document 20: lastUpdateDate: 4 апреля 2024

Суммаризация {#summarizatsiya}

Пример промпта для выделения из текста основных мыслей.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки."" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки.

""{text}""

Основные 5 фактов:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки."" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains.summarize import load_summarize_chain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") map_prompt = load_prompt('lc://prompts/summarize/map_reduce/map.yaml')

chain = load_summarize_chain(giga, chain_type=""map_reduce"", map_prompt=map_prompt) ```",[],"{'question_type': 'distracting element', 'seed_document_id': 19, 'distracting_context': 'lastUpdateDate: 9 августа 2024\n\nРабота с API по постоплате {#rabota-s-api-po-postoplate}\n\nДля корпоративных клиентов доступна возможность работы с GigaChat API по постоплатной схеме.\n\n:::note\n\nО том как начать работать с API по предоплатной схеме — в разделе Быстрый старт для ИП и юридических лиц.\n\n:::\n\nЧтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве.\n\nДля этого:\n\nЗарегистрируйтесь или авторизуйтесь в личном кабинете.\n\nПерейдите в корпоративное пространство (постоплата).\n\nНажмите Создать проект в левом меню.\n\nВыберите GigaChat API Enterprise в разделе AI-модели.\n\nЗаполните заявку на получение доступа к GigaChat API по постоплатной схеме.\n\nПеред отправкой ознакомьтесь с условиями использования.\n\nНажмите кнопку Отправить заявку.\n\n:::tip\n\nЕсли у вас уже есть личный кабинет, авторизуйтесь и отправьте заявку на доступ к GigaChat API по ссылке.\n\n:::\n\nПосле отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого:\n\nСкачайте и заполните заявление.\n\n:::note\n\nЧтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета:\n\nID лицевого счета представлен в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.\n\n:::\n\nОтправьте нам заполненное заявление в формате doc/docx по ЭДО.\n\nРассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.\n\nДальнейшая работа с API аналогична общему процессу.', 'topic': 'Промпты для GigaChat'}"
aaf84d9f-6bac-40b6-8192-138be3053c6b,"Какие способы оплаты доступны при работе по постоплатной схеме, если контракт включает обязательное исправление ошибок в тексте с использованием GigaChat?",Работа по постоплатной схеме оплачивается только по договору.,"Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 46: lastUpdateDate: 9 августа 2024

Работа с API по постоплате {#rabota-s-api-po-postoplate}

Для корпоративных клиентов доступна возможность работы с GigaChat API по постоплатной схеме.

:::note

О том как начать работать с API по предоплатной схеме — в разделе Быстрый старт для ИП и юридических лиц.

:::

Чтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве.

Для этого:

Зарегистрируйтесь или авторизуйтесь в личном кабинете.

Перейдите в корпоративное пространство (постоплата).

Нажмите Создать проект в левом меню.

Выберите GigaChat API Enterprise в разделе AI-модели.

Заполните заявку на получение доступа к GigaChat API по постоплатной схеме.

Перед отправкой ознакомьтесь с условиями использования.

Нажмите кнопку Отправить заявку.

:::tip

Если у вас уже есть личный кабинет, авторизуйтесь и отправьте заявку на доступ к GigaChat API по ссылке.

:::

После отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого:

Скачайте и заполните заявление.

:::note

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета:

ID лицевого счета представлен в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

:::

Отправьте нам заполненное заявление в формате doc/docx по ЭДО.

Рассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.

Дальнейшая работа с API аналогична общему процессу.

Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.",[],"{'question_type': 'distracting element', 'seed_document_id': 40, 'distracting_context': 'lastUpdateDate: 4 апреля 2024\n\nИсправление ошибок {#ispravlenie-oshibok}\n\nПример промпта для исправления ошибок в тексте.\n\n:::note\n\nВ демонстрационных целях пример сообщения пользователя (""role"": ""user"") специально содержит ошибки.\n\n:::\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте."" }, { ""role"": ""user"", ""content"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны"" }, ], ""temperature"": 0.7 }\n\nyaml input_variables: [text] output_parser: null template: \'Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте. Текст: {text}\' template_format: f-string _type: prompt\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Перепиши текст, исправив грамматические, орфографические и пунктуационные ошибки в тексте."" }, { ""role"": ""user"", ""content"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны"" } ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"") prompt = load_prompt(\'lc://prompts/content/spell_correction.yaml\') chain = prompt | giga text = chain.invoke({""text"": ""искуственый - интилектможет исправить все ошибки в даном тексте вне зависимости от длинны""}) ```\n\nJupyter-блокнот с шаблоном промпта для исправления текста', 'topic': 'Сервис GigaChat'}"
9d226133-b6a1-43cc-b6ce-4893c746b50b,Какие языки поддерживает GigaChat для создания эмбеддингов?,GigaChat поддерживает русский и английский языки.,"Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс",[],"{'question_type': 'distracting element', 'seed_document_id': 13, 'distracting_context': 'id: post-embeddings title: ""Создать эмбеддинг"" description: ""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса."" sidebar_label: ""Создать эмбеддинг"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для создания эмбеддинга."",""default"":""Embeddings""},""input"":{""type"":""array"",""description"":""Строка или массив строк, которые будут использованы для генерации эмбеддинга."",""items"":{""type"":""string"",""example"":""Расскажи о современных технологиях""}}},""title"":""EmbeddingsBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""data"",""object""],""properties"":{""object"":{""type"":""string"",""description"":""Формат структуры данных."",""default"":""list""},""data"":{""type"":""array"",""items"":{""type"":""object"",""description"":""Объект с данными о векторном представлении текста."",""required"":[""object"",""embedding"",""index"",""usage""],""properties"":{""object"":{""type"":""string"",""description"":""Тип объекта."",""default"":""embedding""},""embedding"":{""type"":""array"",""description"":""Массив чисел, представляющих значения эмбеддинга для предоставленного текста."",""items"":{""type"":""integer"",""format"":""float""}},""index"":{""type"":""integer"",""description"":""Индекс соответствующий индексу текста, полученного в массиве input запроса."",""example"":0},""usage"":{""type"":""object"",""properties"":{""prompt_tokens"":{""type"":""number"",""description"":""Количество токенов в строке, для которой сгенерирован эмбеддинг."",""example"":6}}}}}},""model"":{""type"":""string"",""description"":""Название модели, которая используется для вычисления эмбеддинга."",""example"":""Embeddings""}},""title"":""Embedding""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postEmbeddings"",""description"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\\n\\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\\n"",""method"":""post"",""path"":""/embeddings"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\\n\\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\\n\\n\\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""Embeddings"",""input"":[""Расскажи о современных технологиях""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\\nСправочная документация по REST API нейросетевой модели GigaChat.\\n\\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\\n\\n## Получение токена доступа и авторизация запросов\\n\\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\\nТокен доступа передается в заголовке Authorization:\\n\\nsh\\ncurl -L -X GET \'https://gigachat.devices.sberbank.ru/api/v1/models\' \\\\\\n-H \'Accept: application/json\' \\\\\\n-H \'Authorization: Bearer <токен_доступа>\'\\n\\n\\n:::tip\\n\\nВы также можете передавать запросы к моделям в раннем доступе.\\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\\n\\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\\n\\n:::\\n\\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\\n\\nsh\\ncurl -L -X POST \'https://ngw.devices.sberbank.ru:9443/api/v2/oauth\' \\\\\\n-H \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n-H \'Accept: application/json\' \\\\\\n-H \'RqUID: <идентификатор_запроса>\' \\\\\\n-H \'Authorization: Basic <авторизационные_данные>\' \\\\\\n--data-urlencode \'scope=GIGACHAT_API_PERS\'\\n\\n\\nГде:\\n\\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\\n * GIGACHAT_API_PERS — доступ для физических лиц.\\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\\n\\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\\n\\njson\\n{\\n \\""access_token\\"": \\""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\\"",\\n \\""expires_at\\"": 1679471442\\n}\\n\\n\\n:::note\\n\\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\\n\\n:::\\n""},""postman"":{""name"":""Создать эмбеддинг"",""description"":{""content"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\\n\\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\\n"",""type"":""text/plain""},""url"":{""path"":[""embeddings""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\\""\\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""\n\nimport ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";\n\nСоздать эмбеддинг\n\nВозвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n\nЗапрос {#zapros}', 'topic': 'Сервис GigaChat'}"
1662f4e9-a97a-4684-8c57-6cd028a0feda,"Как можно получить токен доступа для авторизации запросов к GigaChat API, если у меня уже установлен и настроен GigaChain?",Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.,"Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 10: lastUpdateDate: 19 июля 2024

import TesterSecretGeneration from '/docs/ru/includes/gigachat/_tester-secret-generation.mdx';

Быстрый старт для физических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-sozdayte-proekt-giga-chat-api}

Проект GigaChat API нужен для получения авторизационных данных, а также для управления платными опциями. С помощью авторизационных данных вы можете получить токен доступа для авторизации запросов к API.

import AuthData from '/docs/ru/includes/gigachat/_auth-data.mdx';

:::note

Если у вас уже есть личный кабинет, авторизуйтесь с помощью SberID или СберБизнес ID и создайте проект GigaChat API по ссылке.

:::

Если у вас нет личного кабинета, для создания проекта:

Зарегистрируйтесь в личном кабинете, используя свой аккаунт Сбер ID.

Нажмите кнопку Создать проект в левом меню.

Выберите GigaChat API в разделе AI-модели.

Ознакомьтесь и примите условия пользовательского соглашения.

В открывшемся окне введите название проекта.

В интерфейсе проекта можно:

Ознакомиться с условиями действующего тарифа. Каждому новому пользователю по умолчанию подключается тариф Freemium. Об условиях тарифа и доступных тарифных планах читайте в разделе Тарифы и оплата.

Приобрести дополнительные пакеты токенов.

Узнать свой идентификатор — значение поля Client ID в панели справа.

Узнать версию API, к которой предоставляется доступ. Версия указана в поле Scope в панели справа. Для физических лиц значение поля — GIGACHAT_API_PERS.

Сгенерировать клиентский ключ.

Для генерации клиентского ключа нажмите кнопку Сгенерировать новый Client Secret.

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получение токена доступа {#shag-2-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_PERS' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также вы сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret) в консоли.

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста и изображений {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 46: lastUpdateDate: 9 августа 2024

Работа с API по постоплате {#rabota-s-api-po-postoplate}

Для корпоративных клиентов доступна возможность работы с GigaChat API по постоплатной схеме.

:::note

О том как начать работать с API по предоплатной схеме — в разделе Быстрый старт для ИП и юридических лиц.

:::

Чтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве.

Для этого:

Зарегистрируйтесь или авторизуйтесь в личном кабинете.

Перейдите в корпоративное пространство (постоплата).

Нажмите Создать проект в левом меню.

Выберите GigaChat API Enterprise в разделе AI-модели.

Заполните заявку на получение доступа к GigaChat API по постоплатной схеме.

Перед отправкой ознакомьтесь с условиями использования.

Нажмите кнопку Отправить заявку.

:::tip

Если у вас уже есть личный кабинет, авторизуйтесь и отправьте заявку на доступ к GigaChat API по ссылке.

:::

После отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого:

Скачайте и заполните заявление.

:::note

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета:

ID лицевого счета представлен в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

:::

Отправьте нам заполненное заявление в формате doc/docx по ЭДО.

Рассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.

Дальнейшая работа с API аналогична общему процессу.",[],"{'question_type': 'distracting element', 'seed_document_id': 15, 'distracting_context': 'Как обновить GigaChain?\n\nВыполните команду bash pip install -U gigachain_community\n\n## Как установить gigachain\n\nВыполните команду bash pip install gigachain_community\n\n## Как обновиться с langchain на gigachain Нужно создать чистое виртуальное окружение python и активировать его. Для Mac/Linux, например так: bash python -m venv venv source venv/bin/activate\n\nДалее можно установить gigachain: bash pip install gigachain_community\n\nРучное удаление langchain не рекомендуется.\n\n## Как установить LangGraph bash pip install langgraph', 'topic': 'Сервис GigaChat'}"
d2113e3c-4d2c-47cd-9121-04755c5240ef,"Какую команду нужно выполнить для обновления библиотеки gigachain_core, если вы используете модели в раннем доступе?",pip install -U gigachain_core,"Document 29: lastUpdateDate: 27 марта 2024

Классификация обращений {#klassifikatsiya-obrasheniy}

Пример промпта для классификации обращений.

:::note

Промпт лучше работает с моделью GigaChat-Pro.

:::

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Поможете, пожалуйста, уточнить информацию?"" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию.' - role: user prompt: template: '{text}' template_format: f-string _type: chat

Шаблон содержит переменные:

text — текст обращения пользователя. Обязательное поле;

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"")

prompt = load_prompt(""lc://prompts/content/classification.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ).content ```

Document 23: lastUpdateDate: 27 марта 2024

Генерация описания товаров {#generatsiya-opisaniya-tovarov}

Пример промпта для генерации рекламного описания товара для размещения в интернет-магазине.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию."" }, { ""role"": ""user"", ""content"": ""Название товара: SberBoom. Категория: умные колонки. Ключевые слова: умная колонка, салют, умный дом."" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [product_name, category, key_words] output_parser: null messages: - role: system prompt: template: 'Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию.' - role: user prompt: template: 'Название товара: {product_name}. Категория: {category}. Ключевые слова: {key_words}.' template_format: f-string _type: chat

Шаблон содержит переменные:

product_name — название товара. Обязательное поле;

category — категория, к которой относится товар. Обязательное поле;

key_words — от одного до пяти ключевых слов, связанных с товаром. Необязательное поле.

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию."" }, { ""role"": ""user"", // запрос пользователя ""content"": ""Название товара: SberBoom. Категория: умные колонки. Ключевые слова: умная колонка, салют, умный дом."" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"")

prompt = load_prompt(""lc://prompts/content/product_description.yaml"") chain = prompt | giga chain.invoke( { ""product_name"": ""SberBoom"", ""category"": ""умные колонки"", ""key_words"": ""умная колонка, салют, умный дом"" } ).content ```

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```",[],"{'question_type': 'distracting element', 'seed_document_id': 29, 'distracting_context': 'import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";\n\nПолучить ответ модели на сообщения\n\nВозвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе. Для обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n\nЗапрос {#zapros}', 'topic': 'Промпты для GigaChat'}"
46ab54c1-ba1e-4d7a-a678-2fe766bc193f,"Как долго действует токен доступа, полученный через запрос POST /api/v2/oauth, если использовать модель GigaChat-Plus?",Токен доступа действителен в течение 30 минут.,"Document 48: id: post-token title: ""Получить токен доступа"" description: ""Возвращает токен доступа для авторизации запросов к API."" sidebar_label: ""Получить токен доступа"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Авторизация""],""servers"":[{""url"":""https://ngw.devices.sberbank.ru:9443/api/v2""}],""parameters"":[{""name"":""RqUID"",""in"":""header"",""description"":""Уникальный идентификатор запроса. Соответствует формату uuid4.\n\nПараметр для журналирования входящих вызовов и разбора инцидентов.\nДля создания уникального идентификатора можно использовать стандартные библиотеки и классы для генерации UUID и GUID.\n\nПример: 6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e.\n"",""required"":true,""schema"":{""type"":""string"",""format"":""uuid"",""pattern"":""(([0-9a-fA-F-])36)"",""example"":""6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e""}}],""requestBody"":{""content"":{""application/x-www-form-urlencoded"":{""schema"":{""type"":""object"",""properties"":{""scope"":{""description"":""Версия API. Возможные значения:\n\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n"",""type"":""string"",""enum"":[""GIGACHAT_API_PERS"",""GIGACHAT_API_B2B"",""GIGACHAT_API_CORP""],""example"":""GIGACHAT_API_PERS""}},""required"":[""scope""]}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""access_token"":{""type"":""string"",""description"":""Токен для авторизации запросов."",""example"":""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw""},""expires_at"":{""format"":""int64"",""description"":""Дата и время истечения действия токена в формате Unix time."",""type"":""integer"",""example"":1679471442}},""title"":""Token""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Базовая аутентификация"":[""client_id"",""client_secret""]}],""operationId"":""postToken"",""description"":""Возвращает токен доступа для авторизации запросов к API.\nТокен доступа действителен в течение 30 минут.\n\nВ заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nКонсоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n"",""method"":""post"",""path"":""/oauth"",""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить токен доступа"",""description"":{""content"":""Возвращает токен доступа для авторизации запросов к API.\nТокен доступа действителен в течение 30 минут.\n\nВ заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nКонсоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n"",""type"":""text/plain""},""url"":{""path"":[""oauth""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""disabled"":false,""description"":{""content"":""(Required) Уникальный идентификатор запроса. Соответствует формату uuid4.\n\nПараметр для журналирования входящих вызовов и разбора инцидентов.\nДля создания уникального идентификатора можно использовать стандартные библиотеки и классы для генерации UUID и GUID.\n\nПример: 6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e.\n"",""type"":""text/plain""},""key"":""RqUID"",""value"":""""},{""key"":""Content-Type"",""value"":""application/x-www-form-urlencoded""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""urlencoded"",""urlencoded"":[]},""auth"":{""type"":""basic"",""basic"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить токен доступа

Возвращает токен доступа для авторизации запросов к API. Токен доступа действителен в течение 30 минут.

В заголовке Authorization нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

Консоль запросов автоматически кодирует заданные идентификатор и клиентский ключ.

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Запрос {#zapros}",[],"{'question_type': 'distracting element', 'seed_document_id': 48, 'distracting_context': 'lastUpdateDate: 1 июля 2024\n\nВыбор модели для генерации {#vybor-modeli-dlya-generatsii}\n\nПри работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.\n\nЧтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:\n\nsh curl -L -X POST \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ -H \'Content-Type: application/json\' \\ -H \'Accept: application/json\' \\ -H \'Authorization: Bearer <токен_доступа>\' \\ --data-raw \'{ ""model"": ""<название_модели>"", ""messages"": [ { ""role"": ""user"", ""content"": ""Привет! Расскажи о себе."" } ], ""n"": 1, ""stream"": false, ""max_tokens"": 512, ""repetition_penalty"": 1, ""update_interval"": 0 }\'\n\nGigaChain по умолчанию работает с базовой моделью GigaChat. Чтобы явно задать модель, передайте параметр model при инициализации GigaChat:\n\n```py from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=\'<авторизационные_данные>\', model=\'<название_модели>\', verify_ssl_certs=False) ```\n\nВозможные значения поля model:\n\nGigaChat — базовая модель для решения более простых задач;\n\nGigaChat-Plus — модель с увеличенным контекстом. Подходит, например, для суммаризации больших документов;\n\nGigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи.\n\nСмотрите также {#smotrite-takzhe}\n\nМодели GigaChat\n\nТарифы и оплата\n\nБыстрый старт GigaChain', 'topic': 'API GigaChat'}"
7df12214-63ed-4590-ac16-a3f104d9c9bb,"Какие модели доступны для генерации в GigaChat, если учитывать необходимость переписывания текста в научном стиле?","Для генерации доступны модели: GigaChat (базовая модель для решения более простых задач), GigaChat-Plus (модель с увеличенным контекстом, подходит для суммаризации больших документов), GigaChat-Pro (модель лучше следует сложным инструкциям и может выполнять более комплексные задачи).","Document 45: lastUpdateDate: 1 июля 2024

Выбор модели для генерации {#vybor-modeli-dlya-generatsii}

При работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.

Чтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""<название_модели>"", ""messages"": [ { ""role"": ""user"", ""content"": ""Привет! Расскажи о себе."" } ], ""n"": 1, ""stream"": false, ""max_tokens"": 512, ""repetition_penalty"": 1, ""update_interval"": 0 }'

GigaChain по умолчанию работает с базовой моделью GigaChat. Чтобы явно задать модель, передайте параметр model при инициализации GigaChat:

```py from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials='<авторизационные_данные>', model='<название_модели>', verify_ssl_certs=False) ```

Возможные значения поля model:

GigaChat — базовая модель для решения более простых задач;

GigaChat-Plus — модель с увеличенным контекстом. Подходит, например, для суммаризации больших документов;

GigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи.

Смотрите также {#smotrite-takzhe}

Модели GigaChat

Тарифы и оплата

Быстрый старт GigaChain

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 34: lastUpdateDate: 18 июля 2024

Потоковая генерация токенов {#potokovaya-peredacha-tokenov}

Режим получения потока токенов поможет обрабатывать ответ GigaChat по мере его генерации.

При включении этого режима GigaChat передает токены в потоке коротких сообщений, формат которых соответствует протоколу server-sent events. Последним в потоке будет событие data: [DONE].

Вы можете включить потоковую генерацию токенов. Для этого в запросе POST /chat/completions нужно передать параметр ""stream"": true.

Пример запроса:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [{""role"": ""user"", ""content"": ""Say this is a test!""}], ""stream"": true }'

Пример потока событий:

```json data: { ""choices"": [ { ""delta"": { ""content"": ""GigaСhat"", ""role"": ""assistant"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" спешит"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" на"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" помощь"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: [DONE] ```

Для поддержки потоковой генерации токенов с помощью GigaChain нужно унаследоваться от класса BaseCallbackHandler и инициализировать модуль GigaChat в режиме обработки потока токенов streaming=True:

```py from langchain.schema import HumanMessage from langchain.callbacks.base import BaseCallbackHandler from langchain.chat_models.gigachat import GigaChat

class StreamHandler(BaseCallbackHandler): def init(self, initial_text=""""): pass

def on_llm_new_token(self, token: str, **kwargs) -> None:
    print(f""{token} -"", end="""", flush=True)

chat = GigaChat(credentials='<авторизационные_данные>', streaming=True, callbacks=[StreamHandler()])

chat([HumanMessage(content=""Напиши краткое содержание романа «Евгений Онегин»"")]) ```",[],"{'question_type': 'distracting element', 'seed_document_id': 45, 'distracting_context': 'lastUpdateDate: 27 марта 2024\n\nСтилизация текста {#stilizatsiya-teksta}\n\nПример промпта для переписывания текста с учетом заданного стиля.\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля."" }, { ""role"": ""user"", ""content"": ""Перепиши текст как научную статью. Текст: Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."" } ] }\n\n:::caution\n\nПромпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.\n\nДля обновления библиотеки выполните команду:\n\nsh pip install -U gigachain_core\n\n:::\n\nyaml input_variables: [text, style] output_parser: null messages: - role: system prompt: template: \'Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля.\' - role: user prompt: template: \'Текст: {text}. Стиль: {style}.\' template_format: f-string _type: chat\n\nШаблон содержит переменные:\n\ntext — текст, который нужно переписать. Обязательное поле;\n\nstyle — стиль итогового текста. Обязательное поле.\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — опытный копирайтер. Перепиши маркетинговый текст с учетом вида текста и выбранного стиля."" }, { ""role"": ""user"", ""content"": ""Перепиши текст как научную статью. Текст: Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."" } ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"")\n\nprompt = load_prompt(""lc://prompts/content/text_rewrite.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Благодаря новой LLM GigaChat лучше следует инструкциям и может выполнять более сложные задания: улучшилось качество суммаризации, рерайтинга и редактирования текстов, а ответы на вопросы стали точнее.\\nПо результатам тестов новый GigaChat уже превзошел схожие по количеству параметров иностранные аналоги в бенчмарке MMLU.\\nДостичь таких результатов получилось за счет множества экспериментов по улучшению модели и повышению эффективности ее обучения. В частности, команда использовала фреймворк для обучения больших языковых моделей с возможностью шардирования весов нейросети по видеокартам, что позволило сократить потребление памяти на них.\\nВ числе первых доступ к API новинки получат бизнес-клиенты Сбера и участники академического сообщества."", ""style"": ""Научная статья"" } ).content ```', 'topic': 'Работа с GigaChat API'}"
166b9023-9de7-49b5-90a2-85c62b29e8b4,"Какие модели доступны для генерации текста в сервисе GigaChat, если учитывать, что создание эмбеддингов оплачивается отдельно?","Для генерации доступны модели: GigaChat Lite, GigaChat Lite+, GigaChat Pro.","Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 45: lastUpdateDate: 1 июля 2024

Выбор модели для генерации {#vybor-modeli-dlya-generatsii}

При работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.

Чтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""<название_модели>"", ""messages"": [ { ""role"": ""user"", ""content"": ""Привет! Расскажи о себе."" } ], ""n"": 1, ""stream"": false, ""max_tokens"": 512, ""repetition_penalty"": 1, ""update_interval"": 0 }'

GigaChain по умолчанию работает с базовой моделью GigaChat. Чтобы явно задать модель, передайте параметр model при инициализации GigaChat:

```py from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials='<авторизационные_данные>', model='<название_модели>', verify_ssl_certs=False) ```

Возможные значения поля model:

GigaChat — базовая модель для решения более простых задач;

GigaChat-Plus — модель с увеличенным контекстом. Подходит, например, для суммаризации больших документов;

GigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи.

Смотрите также {#smotrite-takzhe}

Модели GigaChat

Тарифы и оплата

Быстрый старт GigaChain

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.",[],"{'question_type': 'distracting element', 'seed_document_id': 11, 'distracting_context': 'keywords: [""эмбеддинг"", ""эмбеддинги"", ""векторное представление текста"", ""embeddings"", ""embedding""] lastUpdateDate: 1 августа 2024\n\nВекторное представление текста {#vektornoe-predstavlenie-teksta}\n\nЭмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.\n\nВекторное представление текста (эмбеддинг) используется для:\n\nулучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;\n\nуменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;\n\nобеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.\n\nДля преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings (""model"": ""Embeddings"") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.\n\n:::note\n\nСоздание эмбеддингов оплачивается отдельно от генерации текста.\n\nПодробнее в разделе Тарифы и оплата.\n\n:::\n\nПример запроса на создание эмбеддинга:\n\nshell curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: Bearer <токен доступа>\' \\ --data \'{ ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"", ""Какие новинки в мире IT?"" ] }\'\n\nПараметры запроса:\n\nПример ответа:\n\njson { ""object"": ""list"", ""data"": [ { ""object"": ""embedding"", ""embedding"": [ 0.0023064255, -0.009327292, ... -0.0028842222 ], ""index"": 0 } ], ""model"": ""Embeddings"" }\n\nПараметры ответа:\n\nДля создания эмбеддингов с помощью SDK используйте функцию embed_documents(), модуля GigaChatEmbeddings, импортированного из langchain_community.embeddings.gigachat:\n\n```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings\n\nembeddings = GigaChatEmbeddings(credentials=""<авторизационные_данные>"", verify_ssl_certs=False) result = embeddings.embed_documents(texts=[""Привет!""]) print(result) ```\n\nВ ответ функция возвращает массив чисел, представляющих значения эмбеддинга для переданного текста:\n\n```json [ [ 0.72149658203125, -0.18883895874023438, 0.013126373291015625, -1.27783203125, 1.4967041015625, -0.97698974609375, -0.1722869873046875, 1.4625244140625,\n\n    ...\n\n    -0.007974624633789062,\n    -0.77838134765625,\n    1.167236328125\n]\n\n] ```\n\nИспользование эмбеддингов для поиска {#ispolzovanie-embeddingov-dlya-poiska}\n\nПоиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:\n\nСоздайте векторное представление текста, по которому будет выполняться поиск.\n\nСохраните эмбеддинг в векторной базе данных.\n\nВыполните запрос к базе.\n\nНиже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.\n\nПример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:\n\npage_content — строку, представляющую содержимое;\n\nmetadata — словарь, содержащий произвольные метаданные.\n\nАтрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.\n\nДля запуска примера установите зависимости:\n\nsh pip install gigachain-community gigachain-chroma\n\nСоздайте несколько документов и сохраните их в векторном хранилище:\n\n```python from langchain_core.documents import Document from langchain_chroma import Chroma from langchain_community.embeddings.gigachat import GigaChatEmbeddings\n\nСписок документов, по которым будет выполняться поиск\n\ndocuments = [ Document( page_content=""Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Кошки — независимые животные, которым нужно собственное пространство."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать."", metadata={""source"": ""fish-pets-doc""}, ), Document( page_content=""Попугаи — умные птицы, которые способны имитировать человеческую речь."", metadata={""source"": ""bird-pets-doc""}, ), Document( page_content=""Кролики — социальные животные, которым нужно много места, чтобы прыгать."", metadata={""source"": ""mammal-pets-doc""}, ), ]\n\nСоздайте векторное хранилище и передайте в него список документов и модель для создания векторного представления\n\nvectorstore = Chroma.from_documents( documents, embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False ), ) ```\n\nТеперь вы можете использовать методы vectorstore для выполнения поиска по документам.\n\nПоиск по документам на основе схожести с тексовым запросом:\n\npython vectorstore.similarity_search(""кошка"")\n\nРезультат поиска:\n\ntext [Document(page_content=\'Кошки — независимые животные, которым нужно собственное пространство.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Кролики — социальные животные, которым нужно много места, чтобы прыгать.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Попугаи — умные птицы, которые способны имитировать человеческую речь.\', metadata={\'source\': \'bird-pets-doc\'})]\n\nОценка схожести запроса и содержимого хранилища:\n\n```python\n\nОценка зависит от выбранного векторного хранилища.\n\nChroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.\n\nvectorstore.similarity_search_with_score(""кошка"") ```\n\nРезультат оценки:\n\ntext [(Document(page_content=\'Кошки — независимые животные, которым нужно собственное пространство.\', metadata={\'source\': \'mammal-pets-doc\'}), 218.2356719970703), (Document(page_content=\'Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.\', metadata={\'source\': \'mammal-pets-doc\'}), 319.75384521484375), (Document(page_content=\'Кролики — социальные животные, которым нужно много места, чтобы прыгать.\', metadata={\'source\': \'mammal-pets-doc\'}), 349.84930419921875), (Document(page_content=\'Попугаи — умные птицы, которые способны имитировать человеческую речь.\', metadata={\'source\': \'bird-pets-doc\'}), 352.6993103027344)]\n\nПоиск документов на основе схожести с запросом, представленным в виде вектора:\n\n```python embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False )\n\nembedded_query = embedding.embed_query(""кошка"")\n\nvectorstore.similarity_search_by_vector(embedded_query) ```\n\nРезультат поиска:\n\ntext [Document(page_content=\'Кошки — независимые животные, которым нужно собственное пространство.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Кролики — социальные животные, которым нужно много места, чтобы прыгать.\', metadata={\'source\': \'mammal-pets-doc\'}), Document(page_content=\'Попугаи — умные птицы, которые способны имитировать человеческую речь.\', metadata={\'source\': \'bird-pets-doc\'})]\n\nCмотрите также {#cmotrite-takzhe}\n\nПример использования модели Embeddings и GigaChain для создания RAG-приложения, которое генерирует ответы на основе предоставленного текста.', 'topic': 'Сервис GigaChat'}"
4e342862-06cc-4ccf-b92d-170c6e4fcdf9,"Какие модели доступны в API GigaChat, учитывая, что некоторые функции находятся на этапе тестирования и могут быть доступны не для всех пользователей?","Доступны следующие модели: GigaChat, GigaChat-Plus, GigaChat-Pro.","Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}

Document 49: id: post-chat title: ""Получить ответ модели на сообщения"" description: ""Возвращает ответ модели сгенерированный на основе переданных сообщений."" sidebar_label: ""Получить ответ модели на сообщения"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""example"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""required"":[""model"",""messages""],""type"":""object"",""properties"":{""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""messages"":{""type"":""array"",""description"":""Массив сообщений, которыми пользователь обменивался с моделью."",""items"":{""type"":""object"",""properties"":{""role"":{""type"":""string"",""description"":""Роль автора сообщения:\n\n system — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;\n assistant — ответ модели;\n user — сообщение пользователя;\n function — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле content валидный JSON-объект с результатами работы функции.\n\nДля сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.\n"",""enum"":[""system"",""user"",""assistant"",""function""],""example"":""user""},""content"":{""description"":""Содержимое сообщения. Зависит от роли.\n\nЕсли поле передается в сообщении с ролью function, то в нем указывается валидный JSON-объект с аргументами функции, указанной в поле function_call.name.\n\nВ остальных случаях содержит либо системный промпт (сообщение с ролью system), либо текст сообщения пользователя или модели.\n""},""functions_state_id"":{""type"":""string"",""format"":""uuidv4"",""description"":""Идентификатор, который объединяет массив функций, переданных запросе.\nВозвращается в ответе модели (сообщение с \""role\"": \""assistant\"") при вызове встроенных или собственных функций.\nПозволяет сохранить контекст вызова функции и повысить качество работы модели.\nДля этого нужно передать идентификатор в запросе на генерацию, в сообщении с ролью assistant.\n\nПоле заменяет массив data_for_context. В будущем поддержка массива будет прекращена.\n\nСейчас поле работает только при обращении к моделям в раннем доступе.\n"",""example"":""77d3fb14-457a-46ba-937e-8d856156d003""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""message""}},""function_call"":{""description"":""Поле которе отвечает за то, как GigaChat будет работать с функциями.\nМожет быть строкой или объектом.\n\nВозможные значения:\n\n none — режим работы по умолчанию. Если запрос не содержит function_call или значение поля — none, GigaChat не вызовет функции, а просто сгенерирует ответ в соотвествии с полученными сообщениями;\n\n auto — в зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию.\nМодель вызывает встроенные функции, если отсутствует массив functions с описанием пользовательских функций.\nЕсли запрос содержит \""function_call\"": \""auto\"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;\n\n {\""name\"": \""название_функции\""} — принудительная генерация аргументов для указанной функции. Вы можете явно задать часть аргументов с помощью объекта partial_arguments. Остальные аргументы модель сгенерирует самостоятельно. При принудительной генерации, массив functions обязан содержать объект с описанием указанной функции. В противном случае вернется ошибка.\n"",""oneOf"":[{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""Название функции."",""example"":""sbermarket-pizza_order""},""partial_arguments"":{""type"":""object"",""description"":""JSON-объект в котором вы можете явно задать некоторые аргументы указанной функции. Остальные аргументы модель сгенерирует самостоятлеьно."",""properties"":{}}},""title"":""function_call_custom_function""},{""type"":""string"",""enum"":[""auto"",""none""],""description"":""Режим работы с функциями"",""example"":""auto"",""title"":""function_call_none_auto""}]},""functions"":{""type"":""array"",""description"":""Массив с описанием пользовательских функций."",""items"":{""type"":""object"",""required"":[""name"",""parameters""],""properties"":{""name"":{""type"":""string"",""description"":""Название пользовательской функции, для которой будут сгенерированы аргументы."",""example"":""pizza_order""},""description"":{""type"":""string"",""description"":""Текстовое описание функции."",""example"":""Функция для заказа пиццы""},""parameters"":{""type"":""object"",""properties"":{},""description"":""Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции.""},""few_shot_examples"":{""type"":""array"",""description"":""Объекты с парами запрос_пользователя-параметры_функции, которые будут служить модели примерами ожидаемого результата.\n"",""items"":{""type"":""object"",""required"":[""request"",""params""],""properties"":{""request"":{""type"":""string"",""description"":""Запрос пользователя."",""example"":""Погода в Москва в ближайшие три дня""},""params"":{""type"":""object"",""description"":""Пример заполнения параметров пользовательской функции."",""properties"":{}}}}},""return_parameters"":{""type"":""object"",""description"":""JSON-объект с описанием параметров, которые может вернуть ваша функция."",""properties"":{}}}}},""temperature"":{""format"":""float"",""type"":""number"",""description"":""Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""minimum"":0,""exclusiveMinimum"":true},""top_p"":{""format"":""float"",""type"":""number"",""description"":""Параметр используется как альтернатива температуре (поле temperature). Задает вероятностную массу токенов, которые должна учитывать модель.\nТак, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели. Значения изменяются в диапазоне от ноля до единицы включительно.\n\nЗначение изменяется в диапазоне от 0 до 1.\n"",""minimum"":0,""maximum"":1},""n"":{""description"":""Количество вариантов ответов, которые нужно сгенерировать для каждого входного сообщения.\n\nКоличество вариантов может изменяться от одного до четырех. По умолчанию модель возвращает один вариант ответа.\n"",""format"":""int64"",""type"":""integer"",""deprecated"":true,""minimum"":1,""maximum"":4,""default"":1,""example"":1},""stream"":{""type"":""boolean"",""description"":""Указывает, что сообщения надо передавать по частям в потоке.\n\nСообщения передаются по протоколу SSE.\n\nПоток завершается событием data: [DONE].\n\nПодробнее читайте в разделе Потоковая передача токенов.\n"",""default"":false,""example"":false},""max_tokens"":{""description"":""Максимальное количество токенов, которые будут использованы для создания ответов."",""format"":""int32"",""type"":""integer""},""repetition_penalty"":{""type"":""number"",""format"":""float"",""description"":""Количество повторений слов:\n\n Значение 1.0 — нейтральное значение.\n При значении больше 1 модель будет стараться не повторять слова.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""example"":1},""update_interval"":{""type"":""number"",""description"":""Параметр потокового режима (\""stream\"": \""true\"").\nЗадает минимальный интервал в секундах, который проходит между отправкой токенов.\nНапример, если указать 1, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.\n"",""default"":0,""example"":0}},""title"":""Chat""}}}},""tags"":[""Чат""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""choices"":{""type"":""array"",""description"":""Массив ответов модели."",""items"":{""type"":""object"",""properties"":{""message"":{""type"":""object"",""description"":""Сгенерированное сообщение."",""properties"":{""role"":{""type"":""string"",""enum"":[""assistant"",""function_in_progress""],""description"":""Роль автора сообщения.\n\nРоль function_in_progress используется при работе встроенных функций в режиме потоковой передачи токенов.\n"",""example"":""assistant""},""content"":{""type"":""string"",""description"":""Содержимое сообщения, например, результат генерации.\n\nВ сообщениях с ролью function_in_progress содержит информацию о том, сколько времени осталось до завершения работы встроенной функции.\n"",""example"":""Здравствуйте! К сожалению, я не могу дать точный ответ на этот вопрос, так как это зависит от многих факторов. Однако обычно релиз новых функций и обновлений в GigaChat происходит постепенно и незаметно для пользователей. Рекомендую следить за новостями и обновлениями проекта в официальном сообществе GigaChat или на сайте разработчиков.""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""MessagesRes""},""index"":{""format"":""int32"",""type"":""integer"",""description"":""Индекс сообщения в массиве начиная с ноля."",""example"":0},""finish_reason"":{""description"":""Причина завершения гипотезы. Возможные значения:\n\n stop — модель закончила формировать гипотезу и вернула полный ответ;\n length — достигнут лимит токенов в сообщении;\n function_call — указывает что при запросе была вызвана встроенная функция или сгенерированы аргументы для пользовательской функции;\n blacklist — запрос подпадает под тематические ограничения.\n"",""type"":""string"",""enum"":[""stop"",""length"",""function_call"",""blacklist""],""example"":""stop""}},""title"":""Choices""}},""created"":{""format"":""int64"",""type"":""integer"",""description"":""Дата и время создания ответа в формате Unix time."",""example"":1678878333},""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""usage"":{""type"":""object"",""description"":""Данные об использовании модели."",""properties"":{""prompt_tokens"":{""format"":""int32"",""description"":""Количество токенов во входящем сообщении (роль user)."",""type"":""integer"",""example"":18},""completion_tokens"":{""format"":""int32"",""description"":""Количество токенов, сгенерированных моделью (роль assistant)."",""type"":""integer"",""example"":68},""total_tokens"":{""format"":""int32"",""description"":""Общее количество токенов."",""type"":""integer"",""example"":86}},""title"":""Usage""},""object"":{""type"":""string"",""description"":""Название вызываемого метода."",""example"":""chat.completion""}},""title"":""ChatCompletion""}}},""description"":""OK""},""400"":{""description"":""Bad request format""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""},""422"":{""description"":""Validation error""},""429"":{""description"":""Too many requests""},""500"":{""description"":""Internal Server Error""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postChat"",""description"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""method"":""post"",""path"":""/chat/completions"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"":

Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication",[],"{'question_type': 'distracting element', 'seed_document_id': 54, 'distracting_context': 'GigaChat. Python-библиотека для GigaChain\n\nБиблиотека Python, позволяющая GigaChain обращаться к GigaChat — нейросетевой модели, которая умеет вести диалог, писать код, создавать тексты и картинки по запросу.\n\nОбмен данными с сервисом обеспечивается с помощью GigaChat API. О том как получить доступ к API читайте в официальной документации.\n\nБиблиотека поддерживает обработку потоковой передачи токенов, а также работу в синхронном или в асинхронном режиме.\n\nБиблиотека позволяет выполнить точный подсчет токенов в тексте с помощью GigaChat API.\n\n[!WARNING] В версии 0.1.14 добавлена поддержка функций (functions). Данная опция находится на этапе тестирования и пока доступна только для некоторых моделей, а протокол может быть изменен в следующих версиях.\n\nУстановка\n\nБиблиотеку можно установить с помощью pip:\n\nsh pip install gigachat\n\nРабота с GigaChat\n\nПеред использованием модуля:\n\nПодключите проект GigaChat API.\n\nВ личном кабинете нажмите кнопку Сгенерировать новый Client Secret.\n\nОткроется окно Новый Client Secret.\n\nВ открывшемся окне, скопируйте и сохраните токен, указанный в поле Авторизационные данные.\n\n[!WARNING] Не закрывайте окно, пока не сохраните токен. В противном случае его нужно будет сгенерировать заново.\n\nПример показывает как импортировать библиотеку в GigaChain и использовать ее для обращения к GigaChat:\n\n```py from gigachat import GigaChat\n\nИспользуйте токен, полученный в личном кабинете из поля Авторизационные данные\n\nwith GigaChat(credentials=<авторизационные данные>, verify_ssl_certs=False) as giga: response = giga.chat(""Какие факторы влияют на стоимость страховки на дом?"") print(response.choices[0].message.content) ```\n\nБольше примеров.\n\nСпособы авторизации\n\nАвторизация с помощью токена (в личном кабинете из поля Авторизационные данные):\n\n```py giga = GigaChat(credentials=...)\n\nЛичное пространство\n\ngiga = GigaChat(credentials=..., scope=""GIGACHAT_API_PERS"")\n\nКорпоративное пространство\n\ngiga = GigaChat(credentials=..., scope=""GIGACHAT_API_CORP"") ```\n\nАвторизация с помощью логина и пароля:\n\npy giga = GigaChat( base_url=""https://gigachat.devices.sberbank.ru/api/v1"", user=..., password=..., )\n\nВзаимная аутентификация по протоколу TLS (mTLS):\n\npy giga = GigaChat( base_url=""https://gigachat.devices.sberbank.ru/api/v1"", ca_bundle_file=""certs/ca.pem"", # chain_pem.txt cert_file=""certs/tls.pem"", # published_pem.txt key_file=""certs/tls.key"", key_file_password=""123456"", )\n\nАвторизация с помощью временного токена\n\nДополнительные настройки\n\nВыбор модели\n\nС помощью GigaChain вы можете обращаться к различным моделям, которые предоставляет GigaChat.\n\nДля этого передайте название модели в параметре model:\n\npy giga = GigaChat(model=""GigaChat-Pro"")\n\nПолный список доступных моделей можно получить с помощью запроса GET /models к GigaChat API.\n\n[!WARNING] Стоимость запросов к разным моделям отличается. Подробную информацию о тарификации запросов к той или иной модели вы ищите в официальной документации.\n\nПодсчет количества токенов\n\nДля подсчета количества токенов в запросах используйте метод tokens_count([""текст1"", ""текст2"", ...]).\n\nМетод выполняет запрос POST /tokens/count к GigaChat API и возвращает список объектов с информацией о количестве токенов в каждой строке.\n\nВекторное представление текста\n\nЭмбеддинг (англ. embedding) — это вектор, представленный в виде массива чисел, который получается в результате преобразования данных, например, текста. Комбинация этих чисел, составляющих вектор, действует как многомерная карта для измерения сходства.\n\nДля получения эмбеддингов используйте метод embeddings(""текст"").\n\n[!WARNING] Функция получения эмбеддингов находится на этапе тестирования и может быть недоступна некоторым категориям пользователей.\n\nОтключение проверки сертификатов\n\nДля отключения проверки сертификатов передайте параметр verify_ssl_certs=False:\n\npy giga = GigaChat(verify_ssl_certs=False)\n\n[!WARNING] Отключение проверки сертификатов снижает безопасность обмена данными.\n\nУстановка корневого сертификата НУЦ Минцифры:\n\nДля установка корневого сертификата НУЦ Минцифры выполните команду:\n\nbash curl -k ""https://gu-st.ru/content/Other/doc/russian_trusted_root_ca.cer"" -w ""\\n"" >> $(python -m certifi)\n\nНастройки в переменных окружения\n\nЧтобы задать настройки с помощью переменных окружения, используйте префикс GIGACHAT_.\n\nАвторизация с помощью токена и отключение проверки сертификатов:\n\nsh export GIGACHAT_CREDENTIALS=... export GIGACHAT_SCOPE=... export GIGACHAT_VERIFY_SSL_CERTS=False\n\nАвторизация с помощью логина и пароля:\n\nsh export GIGACHAT_BASE_URL=https://gigachat.devices.sberbank.ru/api/v1 export GIGACHAT_USER=... export GIGACHAT_PASSWORD=...', 'topic': 'API GigaChat'}"
77307ab1-f1c1-4ac9-bfd2-d56132a7afb2,"Какие шаги необходимо выполнить для работы с GigaChat API по постоплатной схеме, если ваш проект включает генерацию сущностей и использование промптов?","Чтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве. Для этого: Зарегистрируйтесь или авторизуйтесь в личном кабинете. Перейдите в корпоративное пространство (постоплата). Нажмите Создать проект в левом меню. Выберите GigaChat API Enterprise в разделе AI-модели. Заполните заявку на получение доступа к GigaChat API по постоплатной схеме. Перед отправкой ознакомьтесь с условиями использования. Нажмите кнопку Отправить заявку. После отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого: Скачайте и заполните заявление. Отправьте нам заполненное заявление в формате doc/docx по ЭДО. Рассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.","Document 46: lastUpdateDate: 9 августа 2024

Работа с API по постоплате {#rabota-s-api-po-postoplate}

Для корпоративных клиентов доступна возможность работы с GigaChat API по постоплатной схеме.

:::note

О том как начать работать с API по предоплатной схеме — в разделе Быстрый старт для ИП и юридических лиц.

:::

Чтобы иметь возможность работать с GigaChat API по постоплатной схеме вам нужно создать проект GigaChat API Enterprise в соответствующем корпоративном пространстве.

Для этого:

Зарегистрируйтесь или авторизуйтесь в личном кабинете.

Перейдите в корпоративное пространство (постоплата).

Нажмите Создать проект в левом меню.

Выберите GigaChat API Enterprise в разделе AI-модели.

Заполните заявку на получение доступа к GigaChat API по постоплатной схеме.

Перед отправкой ознакомьтесь с условиями использования.

Нажмите кнопку Отправить заявку.

:::tip

Если у вас уже есть личный кабинет, авторизуйтесь и отправьте заявку на доступ к GigaChat API по ссылке.

:::

После отправки запроса на доступ к GigaChat API вам нужно сообщить о согласии с офертой. Для этого:

Скачайте и заполните заявление.

:::note

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета:

ID лицевого счета представлен в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

:::

Отправьте нам заполненное заявление в формате doc/docx по ЭДО.

Рассмотрение запроса на доступ обычно занимает до двух рабочих дней после предоставления документов. Вы получите письмо на свой электронный адрес с положительным или отрицательным ответом. Чтобы сократить время рассмотрения заявки, дополнительно отправьте письмо на электронную почту.

Дальнейшая работа с API аналогична общему процессу.

Document 40: keywords: [""калькулятор"",""расчет стоимости"", ""калькулятор постоплаты""] lastUpdateDate: 8 августа 2024

Тарифы и оплата {#tarify-i-oplata}

GigaChat API предоставляет возможность генерации контента и создания векторного представления текста (эмбеддинга) с помощью сервиса GigaChat. Генерация контента и создание эмбеддингов выполняется разными моделями, описание которых вы найдете в разделе Модели GigaChat.

В этом разделе содержится информация о тарифах GigaChat API и способах оплаты.

Все цены указаны включая НДС.

Для физических лиц {#dlya-fizicheskih-lits}

Физическим лицам доступен freemium-режим и платные пакеты токенов.

Независимо от наличия оплаченного пакета сначала будут использованы бесплатные токены из freemium-режима. Неиспользованные токены пропадают по истечению срока действия пакета.

Стоимость генерации текста зависит от того, к какой модели выполняется запрос. Модель задается в поле model запроса POST /chat/completions.

Freemium-режим {#freemium-rezhima}

В рамках freemium-режима пользователи получают 1 000 000 бесплатных токенов для генерации текста: 950 000 токенов для модели GigaChat Lite и 50 000 токенов для модели GigaChat Pro. Генерация текста выполняется в одном потоке. Лимит обновляется раз в 12 месяцев.

Платные пакеты {#platnye-pakety}

Также пользователям доступны платные пакеты услуг для генерации и векторного представления текста.

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС Срок действия 5 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 5 000 000 1 000 ₽ три месяца 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 4 850 ₽ шесть месяцев 1 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 1 000 000 400   ₽ три месяца 5 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 5 000 000 1 940 ₽ шесть месяцев 1 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 1 000 000 1 500 ₽ три месяца 5 000 000 токенов GigaChat Pro GigaChat-Pro GigaChat-Pro-preview 5 000 000 7 275 ₽ шесть месяцев

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС Срок действия 10 000 000 токенов Embeddings Embeddings 10 000 000 400 ₽ шесть месяцев

Для ИП и юридических лиц {#dlya-yuridicheskih-lits}

Условия тарификации {#usloviya-tarifikatsii}

Условия использования:

Использование GigaChat API тарифицируется по предоплатной (проекты GigaChat API Business) или постоплатной (проекты GigaChat API Enterprise) схеме. При постоплатной схеме, стоимость рассчитывается в конце каждого календарного месяца. В конце рассчетного периода вы получите документы для оплаты: счета на оплату и универсальный передаточный документ (УПД).

:::note

Для возможности работы по постоплатной схеме отправьте заявку. После одобрения заявки для вас в новом корпоративном пространстве, работающем по постоплатной схеме, будет создан проект GigaChat API Enterprise.

Подробнее — в разделе Работа с API по постоплате.

:::

Минимальная сумма заказа при работе по предоплатной схеме — 20 000 рублей.

Единица тарификации — один токен. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

При генерации текста тарификации подлежат как символы запроса, так и символы ответа модели, в том числе системный промпт.

Платные пакеты при работе по предоплатной схеме {#platnye-pakety-pri-rabote-po-predoplatnoy-sheme}

Платные пакеты для генерации текста:

Пакет Значение поля model Количество токенов Цена, вкл. НДС 25 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 25 000 000 5 000 ₽ 125 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 125 000 000 25 000 ₽ 250 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 250 000 000 48 500 ₽ 500 000 000 токенов GigaChat Lite GigaChat GigaChat-preview 500 000 000 95 000 ₽ 15 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 15 000 000 6 000 ₽ 100 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 100 000 000 40 000 ₽ 200 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 200 000 000 77 600 ₽ 400 000 000 токенов GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 400 000 000 152 000 ₽ 10 000 000 токенов GigaChat Pro GigaChat-Pro 10 000 000 15 000 ₽ 50 000 000 токенов GigaChat Pro GigaChat-Pro 50 000 000 75 000 ₽ 100 000 000 токенов GigaChat Pro GigaChat-Pro 100 000 000 145 500 ₽ 200 000 000 токенов GigaChat Pro GigaChat-Pro 200 000 000 285 000 ₽

Платные пакеты для векторного представления текста:

Услуга Значение поля model Количество токенов Цена, вкл. НДС 125 000 000 токенов Embeddings Embeddings 125 000 000 5 000 ₽ 400 000 000 токенов Embeddings Embeddings 400 000 000 16 000 ₽ 800 000 000 токенов Embeddings Embeddings 800 000 000 31 040 ₽ 1600 000 000 токенов Embeddings Embeddings 1600 000 000 60 800 ₽

Стоимость работы с API по постоплатной схеме {#stoimost-raboty-s-api-po-postoplatnoy-sheme}

Стоимость генерации текста зависит от того, к какой модели выполняется запрос: GigaChat Lite, GigaChat Lite+ или GigaChat Pro. Модель задается в поле model запроса POST /chat/completions. Минимальная стоимость — 600 рублей в месяц, включая НДС.

Если объем использования сервиса составил менее 600 рублей, то вам следует заплатить 600 рублей.

Если объем использования сервиса — 600 рублей и более, то итоговая стоимость будет рассчитана по правилам базового тарифа.

Если в течение месяца вы не пользовались сервисом, то вы ничего не платите.

Стоимость генерации текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС GigaChat Lite GigaChat GigaChat-preview 0,2 ₽ GigaChat Lite+ GigaChat-Plus GigaChat-Plus-preview 0,4 ₽ GigaChat Pro GigaChat-Pro 1,5 ₽

Модель для получения векторного представления текста задается в поле model запроса POST /embeddings.

Стоимость векторного представления текста:

Модель Значение поля model Цена за 1000 токенов, вкл. НДС Базовая модель Embedder Embeddings 0,04 ₽

Примеры расчета стоимости {#primery-rascheta-stoimosti-ispolzovaniya-giga-chat-api}

Примеры приведены для расчета стоимости работы с моделью GigaChat Lite (0,2 ₽ за 1000 токенов, включая НДС).

:::note

Стоимость использования округляется до целых копеек в большую сторону.

:::

Пример:

Если на вход модели был передан запрос длиной 20 токенов и модель сформировала ответ длиной 30 токенов, общее использование будет составлять 50 токенов.

Пример:

Если вы использовали за месяц 876 835 токенов, использование сервиса будет стоить 175,37 рубля (876 835 x 0,0002 = 175,367, с округлением до целого значения). Но учитывая минимальную стоимость, вам нужно будет заплатить 600 рублей.

Пример:

Если вы использовали за месяц 4 686 830 токенов, использование сервиса будет стоить 937,37 рубля (4 686 830 x 0,0002 = 937,366, с округлением до целых копеек).

Способы оплаты {#sposoby-oplaty}

Способы оплаты отличаются в зависимости от схемы тарификации: предоплатная или постоплатная.

Предоплатная схема {#predoplatnaya-schema}

При работе по предоплатной схеме вам предоставляется набор пакетов токенов. Сумма платежа зависит от выбранного количества пакетов, а доступ к GigaChat API предоставляется после полной оплаты счета.

Работа по такой схеме доступна как физическим лицам, так и индивидуальным предпринимателям и юридическим лицам.

:::note

Бюджетные организации могут оплачивать услуги по договору. В этом случае доступ к API может быть предоставлен до поступления оплаты.

:::

Пакеты токенов можно оплачивать следующими способами:

с помощью банковской карты;

Способ доступен при создании проекта в личном пространстве.

по счету-оферте;

Способ доступен при создании проекта в корпоративном пространстве (предоплата).

по договору.

Постоплатная схема {#postoplatnaya-schema}

При работе по постоплатной схеме тарификации доступ к GigaChat API предоставляется сразу после заключения договора. Стоимость работы рассчитывается от объема услуг, потребленных в течение платежного периода. Платежный период — один календарный месяц.

Работа по постоплатной схеме оплачивается только по договору.

Чтобы заполнить поле Лицевой счет, скопируйте его ID в правом верхнем углу окна личного кабинета или в левом углу на главной странице личного кабинета в формате LBO-хххххххх-хххх-хххх-хххх-хххххххххх.

Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата",[],"{'question_type': 'distracting element', 'seed_document_id': 46, 'distracting_context': 'lastUpdateDate: 4 апреля 2024\n\nГенерация сущностей {#generatsiya-sushnostey}\n\nПример промпта для генерации сущностей. Промпт содержит инструкцию по количеству синонимов сущности и формату ответа.\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \\""автомобиль\\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\\""entity\\"": \\""название объекта\\"", \\""synonyms\\"": [\\""синоним1\\"", \\""синоним2\\""]}]."" }, ], }\n\nyaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: \'Сгенерируй от {dataset_size_min} до {dataset_size_max} объектов для сущности ""{subject}"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{""entity"": ""название объекта"", ""synonyms"": [""синоним1"", ""синоним2""]}].\' template_format: f-string _type: prompt\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \\""автомобиль\\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\\""entity\\"": \\""название объекта\\"", \\""synonyms\\"": [\\""синоним1\\"", \\""синоним2\\""]}]."" }, ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt(\'lc://prompts/synonyms/entity_generation.yaml\') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""автомобиль"") ```', 'topic': 'Сервис GigaChat'}"
225d5ab4-c835-4503-9615-8af8b85ca7ac,"Какие шаги необходимо предпринять для получения токена доступа для GigaChat API, если учитывать, что промпт лучше работает с моделью GigaChat-Pro и библиотекой gigachain_core версии 0.1.9.1 или выше?","Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh
curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Accept: application/json' \
-H 'RqUID: <идентификатор_запроса>' \
-H 'Authorization: Basic <авторизационные_данные>' \
--data-urlencode 'scope=GIGACHAT_API_PERS'","Document 54: id: get-models title: ""Получить список моделей"" description: ""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."" sidebar_label: ""Получить список моделей"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Модели""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""data"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{""id"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat."",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro""],""example"":""GigaChat""},""object"":{""description"":""Тип сущности в ответе, например, модель"",""type"":""string"",""example"":""model""},""owned_by"":{""description"":""Владелец модели"",""type"":""string"",""example"":""salutedevices""}},""title"":""Model""}},""object"":{""description"":""Тип сущности в ответе, например, список."",""type"":""string"",""example"":""list""}},""title"":""Models""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getModels"",""description"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""method"":""get"",""path"":""/models"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить список моделей"",""description"":{""content"":""Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat."",""type"":""text/plain""},""url"":{""path"":[""models""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Accept"",""value"":""application/json""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить список моделей

Возвращает массив объектов с данными доступных моделей. Описание доступных моделей в разделе Модели GigaChat.

Запрос {#zapros}

Document 49: id: post-chat title: ""Получить ответ модели на сообщения"" description: ""Возвращает ответ модели сгенерированный на основе переданных сообщений."" sidebar_label: ""Получить ответ модели на сообщения"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""example"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""required"":[""model"",""messages""],""type"":""object"",""properties"":{""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""messages"":{""type"":""array"",""description"":""Массив сообщений, которыми пользователь обменивался с моделью."",""items"":{""type"":""object"",""properties"":{""role"":{""type"":""string"",""description"":""Роль автора сообщения:\n\n system — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;\n assistant — ответ модели;\n user — сообщение пользователя;\n function — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле content валидный JSON-объект с результатами работы функции.\n\nДля сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.\n"",""enum"":[""system"",""user"",""assistant"",""function""],""example"":""user""},""content"":{""description"":""Содержимое сообщения. Зависит от роли.\n\nЕсли поле передается в сообщении с ролью function, то в нем указывается валидный JSON-объект с аргументами функции, указанной в поле function_call.name.\n\nВ остальных случаях содержит либо системный промпт (сообщение с ролью system), либо текст сообщения пользователя или модели.\n""},""functions_state_id"":{""type"":""string"",""format"":""uuidv4"",""description"":""Идентификатор, который объединяет массив функций, переданных запросе.\nВозвращается в ответе модели (сообщение с \""role\"": \""assistant\"") при вызове встроенных или собственных функций.\nПозволяет сохранить контекст вызова функции и повысить качество работы модели.\nДля этого нужно передать идентификатор в запросе на генерацию, в сообщении с ролью assistant.\n\nПоле заменяет массив data_for_context. В будущем поддержка массива будет прекращена.\n\nСейчас поле работает только при обращении к моделям в раннем доступе.\n"",""example"":""77d3fb14-457a-46ba-937e-8d856156d003""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""message""}},""function_call"":{""description"":""Поле которе отвечает за то, как GigaChat будет работать с функциями.\nМожет быть строкой или объектом.\n\nВозможные значения:\n\n none — режим работы по умолчанию. Если запрос не содержит function_call или значение поля — none, GigaChat не вызовет функции, а просто сгенерирует ответ в соотвествии с полученными сообщениями;\n\n auto — в зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию.\nМодель вызывает встроенные функции, если отсутствует массив functions с описанием пользовательских функций.\nЕсли запрос содержит \""function_call\"": \""auto\"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;\n\n {\""name\"": \""название_функции\""} — принудительная генерация аргументов для указанной функции. Вы можете явно задать часть аргументов с помощью объекта partial_arguments. Остальные аргументы модель сгенерирует самостоятельно. При принудительной генерации, массив functions обязан содержать объект с описанием указанной функции. В противном случае вернется ошибка.\n"",""oneOf"":[{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""Название функции."",""example"":""sbermarket-pizza_order""},""partial_arguments"":{""type"":""object"",""description"":""JSON-объект в котором вы можете явно задать некоторые аргументы указанной функции. Остальные аргументы модель сгенерирует самостоятлеьно."",""properties"":{}}},""title"":""function_call_custom_function""},{""type"":""string"",""enum"":[""auto"",""none""],""description"":""Режим работы с функциями"",""example"":""auto"",""title"":""function_call_none_auto""}]},""functions"":{""type"":""array"",""description"":""Массив с описанием пользовательских функций."",""items"":{""type"":""object"",""required"":[""name"",""parameters""],""properties"":{""name"":{""type"":""string"",""description"":""Название пользовательской функции, для которой будут сгенерированы аргументы."",""example"":""pizza_order""},""description"":{""type"":""string"",""description"":""Текстовое описание функции."",""example"":""Функция для заказа пиццы""},""parameters"":{""type"":""object"",""properties"":{},""description"":""Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции.""},""few_shot_examples"":{""type"":""array"",""description"":""Объекты с парами запрос_пользователя-параметры_функции, которые будут служить модели примерами ожидаемого результата.\n"",""items"":{""type"":""object"",""required"":[""request"",""params""],""properties"":{""request"":{""type"":""string"",""description"":""Запрос пользователя."",""example"":""Погода в Москва в ближайшие три дня""},""params"":{""type"":""object"",""description"":""Пример заполнения параметров пользовательской функции."",""properties"":{}}}}},""return_parameters"":{""type"":""object"",""description"":""JSON-объект с описанием параметров, которые может вернуть ваша функция."",""properties"":{}}}}},""temperature"":{""format"":""float"",""type"":""number"",""description"":""Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""minimum"":0,""exclusiveMinimum"":true},""top_p"":{""format"":""float"",""type"":""number"",""description"":""Параметр используется как альтернатива температуре (поле temperature). Задает вероятностную массу токенов, которые должна учитывать модель.\nТак, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели. Значения изменяются в диапазоне от ноля до единицы включительно.\n\nЗначение изменяется в диапазоне от 0 до 1.\n"",""minimum"":0,""maximum"":1},""n"":{""description"":""Количество вариантов ответов, которые нужно сгенерировать для каждого входного сообщения.\n\nКоличество вариантов может изменяться от одного до четырех. По умолчанию модель возвращает один вариант ответа.\n"",""format"":""int64"",""type"":""integer"",""deprecated"":true,""minimum"":1,""maximum"":4,""default"":1,""example"":1},""stream"":{""type"":""boolean"",""description"":""Указывает, что сообщения надо передавать по частям в потоке.\n\nСообщения передаются по протоколу SSE.\n\nПоток завершается событием data: [DONE].\n\nПодробнее читайте в разделе Потоковая передача токенов.\n"",""default"":false,""example"":false},""max_tokens"":{""description"":""Максимальное количество токенов, которые будут использованы для создания ответов."",""format"":""int32"",""type"":""integer""},""repetition_penalty"":{""type"":""number"",""format"":""float"",""description"":""Количество повторений слов:\n\n Значение 1.0 — нейтральное значение.\n При значении больше 1 модель будет стараться не повторять слова.\n\nЗначение по умолчанию зависит от выбранной модели (поле model) и может изменяться с обновлениями модели.\n"",""example"":1},""update_interval"":{""type"":""number"",""description"":""Параметр потокового режима (\""stream\"": \""true\"").\nЗадает минимальный интервал в секундах, который проходит между отправкой токенов.\nНапример, если указать 1, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.\n"",""default"":0,""example"":0}},""title"":""Chat""}}}},""tags"":[""Чат""],""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""properties"":{""choices"":{""type"":""array"",""description"":""Массив ответов модели."",""items"":{""type"":""object"",""properties"":{""message"":{""type"":""object"",""description"":""Сгенерированное сообщение."",""properties"":{""role"":{""type"":""string"",""enum"":[""assistant"",""function_in_progress""],""description"":""Роль автора сообщения.\n\nРоль function_in_progress используется при работе встроенных функций в режиме потоковой передачи токенов.\n"",""example"":""assistant""},""content"":{""type"":""string"",""description"":""Содержимое сообщения, например, результат генерации.\n\nВ сообщениях с ролью function_in_progress содержит информацию о том, сколько времени осталось до завершения работы встроенной функции.\n"",""example"":""Здравствуйте! К сожалению, я не могу дать точный ответ на этот вопрос, так как это зависит от многих факторов. Однако обычно релиз новых функций и обновлений в GigaChat происходит постепенно и незаметно для пользователей. Рекомендую следить за новостями и обновлениями проекта в официальном сообществе GigaChat или на сайте разработчиков.""},""data_for_context"":{""type"":""array"",""items"":{""type"":""object"",""properties"":{}},""description"":""Массив сообщений, описывающих работу встроенных функций.\n\nДля сохранения контекста, обязательно передавайте массив в запросе на генерацию, в сообщении с ролью assistant.\n\nВ будущем вместо массива нужно будет использовать поле functions_state_id.\n""}},""title"":""MessagesRes""},""index"":{""format"":""int32"",""type"":""integer"",""description"":""Индекс сообщения в массиве начиная с ноля."",""example"":0},""finish_reason"":{""description"":""Причина завершения гипотезы. Возможные значения:\n\n stop — модель закончила формировать гипотезу и вернула полный ответ;\n length — достигнут лимит токенов в сообщении;\n function_call — указывает что при запросе была вызвана встроенная функция или сгенерированы аргументы для пользовательской функции;\n blacklist — запрос подпадает под тематические ограничения.\n"",""type"":""string"",""enum"":[""stop"",""length"",""function_call"",""blacklist""],""example"":""stop""}},""title"":""Choices""}},""created"":{""format"":""int64"",""type"":""integer"",""description"":""Дата и время создания ответа в формате Unix time."",""example"":1678878333},""model"":{""description"":""Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.\n\nПри обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс -preview.\nНапример, GigaChat-Pro-preview.\n"",""type"":""string"",""enum"":[""GigaChat"",""GigaChat-Plus"",""GigaChat-Pro"",""Embeddings""],""example"":""GigaChat""},""usage"":{""type"":""object"",""description"":""Данные об использовании модели."",""properties"":{""prompt_tokens"":{""format"":""int32"",""description"":""Количество токенов во входящем сообщении (роль user)."",""type"":""integer"",""example"":18},""completion_tokens"":{""format"":""int32"",""description"":""Количество токенов, сгенерированных моделью (роль assistant)."",""type"":""integer"",""example"":68},""total_tokens"":{""format"":""int32"",""description"":""Общее количество токенов."",""type"":""integer"",""example"":86}},""title"":""Usage""},""object"":{""type"":""string"",""description"":""Название вызываемого метода."",""example"":""chat.completion""}},""title"":""ChatCompletion""}}},""description"":""OK""},""400"":{""description"":""Bad request format""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""},""422"":{""description"":""Validation error""},""429"":{""description"":""Too many requests""},""500"":{""description"":""Internal Server Error""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postChat"",""description"":""Возвращает ответ модели сгенерированный на основе переданных сообщений.\n\nЗапрос на генерацию можно передавать моделям в раннем доступе.\nДля обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.\n"",""method"":""post"",""path"":""/chat/completions"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""GigaChat"",""messages"":[{""role"":""system"",""content"":""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя.""},{""role"":""user"",""content"":""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя.""}],""n"":1,""stream"":false,""update_interval"":0},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"":

Document 47: id: gigachat-api title: ""GigaChat API"" description: ""Справочная документация по REST API нейросетевой модели GigaChat."" sidebar_label: Introduction sidebar_position: 0 hide_title: true custom_edit_url: null lastUpdateDate: 5 августа 2024

import ApiLogo from ""@theme/ApiLogo""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem""; import Export from ""@theme/ApiDemoPanel/Export"";

GigaChat API

Справочная документация по REST API нейросетевой модели GigaChat.

О стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.

Получение токена доступа и авторизация запросов {#poluchenie-tokena-dostupa-i-avtorizatsiya-zaprosov}

Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке Authorization:

sh curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

:::tip

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

:::

Чтобы получить токен, отправьте запрос POST /api/v2/oauth:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

Где:

RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.

Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.

scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

При успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:

json { ""access_token"": ""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw"", ""expires_at"": 1679471442 }

:::note

Как получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

:::

Обращение к моделям в раннем доступе {#obrashenie-k-modelyam-v-rannem-dostupe}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Подробнее — в разделе Модели GigaChat.

Authentication",[],"{'question_type': 'distracting element', 'seed_document_id': 54, 'distracting_context': 'lastUpdateDate: 27 марта 2024\n\nКлассификация обращений {#klassifikatsiya-obrasheniy}\n\nПример промпта для классификации обращений.\n\n:::note\n\nПромпт лучше работает с моделью GigaChat-Pro.\n\n:::\n\nСтруктура промпта {#struktura-prompta}\n\njson { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Поможете, пожалуйста, уточнить информацию?"" } ] }\n\n:::caution\n\nПромпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.\n\nДля обновления библиотеки выполните команду:\n\nsh pip install -U gigachain_core\n\n:::\n\nyaml input_variables: [text] output_parser: null messages: - role: system prompt: template: \'Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию.\' - role: user prompt: template: \'{text}\' template_format: f-string _type: chat\n\nШаблон содержит переменные:\n\ntext — текст обращения пользователя. Обязательное поле;\n\nПример запроса {#primer-zaprosa}\n\nsh curl --location \'https://gigachat.devices.sberbank.ru/api/v1/chat/completions\' \\ --header \'Content-Type: application/json\' \\ --header \'Authorization: <токен_доступа>\' \\ --data \'{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ] }\'\n\n```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat\n\ngiga = GigaChat(credentials=""<авторизационные_данные>"")\n\nprompt = load_prompt(""lc://prompts/content/classification.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ).content ```', 'topic': 'API GigaChat'}"
7f4d2576-8ee0-4ccc-ad76-9db136f149c2,"Здравствуйте, я разрабатываю интеграцию нового API для тестирования ответов модели GigaChat в Sberbank. Какой адрес используется для обращения к моделям в раннем доступе?",Для обращения к моделям в раннем доступе используйте адрес https://gigachat-preview.devices.sberbank.ru/,"Document 51: import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить ответ модели на сообщения

Возвращает ответ модели сгенерированный на основе переданных сообщений.

Запрос на генерацию можно передавать моделям в раннем доступе. Для обращения к ним используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Запрос {#zapros}",[],"{'question_type': 'situational', 'seed_document_id': 51, 'situational_context': 'Разработчик в Sberbank пытается настроить интеграцию нового API для тестирования ответов модели GigaChat.', 'topic': 'Others'}"
e4be23eb-f778-4f87-80c9-2b0b6f2c94cb,"Здравствуйте, я создаю новый проект в GigaChat API для управления платными опциями и тестирования. Подскажите, как долго действителен токен доступа для GigaChat API?",Токен действителен в течение 30 минут.,"Document 10: lastUpdateDate: 19 июля 2024

import TesterSecretGeneration from '/docs/ru/includes/gigachat/_tester-secret-generation.mdx';

Быстрый старт для физических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-sozdayte-proekt-giga-chat-api}

Проект GigaChat API нужен для получения авторизационных данных, а также для управления платными опциями. С помощью авторизационных данных вы можете получить токен доступа для авторизации запросов к API.

import AuthData from '/docs/ru/includes/gigachat/_auth-data.mdx';

:::note

Если у вас уже есть личный кабинет, авторизуйтесь с помощью SberID или СберБизнес ID и создайте проект GigaChat API по ссылке.

:::

Если у вас нет личного кабинета, для создания проекта:

Зарегистрируйтесь в личном кабинете, используя свой аккаунт Сбер ID.

Нажмите кнопку Создать проект в левом меню.

Выберите GigaChat API в разделе AI-модели.

Ознакомьтесь и примите условия пользовательского соглашения.

В открывшемся окне введите название проекта.

В интерфейсе проекта можно:

Ознакомиться с условиями действующего тарифа. Каждому новому пользователю по умолчанию подключается тариф Freemium. Об условиях тарифа и доступных тарифных планах читайте в разделе Тарифы и оплата.

Приобрести дополнительные пакеты токенов.

Узнать свой идентификатор — значение поля Client ID в панели справа.

Узнать версию API, к которой предоставляется доступ. Версия указана в поле Scope в панели справа. Для физических лиц значение поля — GIGACHAT_API_PERS.

Сгенерировать клиентский ключ.

Для генерации клиентского ключа нажмите кнопку Сгенерировать новый Client Secret.

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получение токена доступа {#shag-2-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_PERS'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_PERS' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также вы сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret) в консоли.

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста и изображений {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API

Document 15: lastUpdateDate: 24 июля 2024

Быстрый старт для ИП и юридических лиц {#bystryy-start-dlya-fizicheskih-lits}

import QuickStartIntro from '/docs/ru/includes/gigachat/_quickstart-intro.mdx';

Шаг 1. Создайте проект GigaChat API {#shag-1-otpravte-zayavku-na-dostup-k-proektu-giga-chat-api}

import GigaChatApiApplication from '/docs/ru/includes/gigachat/_legal-api-application.mdx'; import ApiProjectExplained from '/docs/ru/includes/gigachat/_api-project-explained.mdx';

В открывшемся окне скопируйте и сохраните значение полей Client Secret и Авторизационные данные.

:::caution

Клиентский ключ, а следовательно и авторизационные данные, отображаются только один раз и не хранятся в личном кабинете.

При компрометации или утере клиентского ключа или авторизационных данных вы можете сгенерировать новое значение.

:::

Шаг 2. Получите токен доступа {#shag-4-poluchenie-tokena-dostupa}

Токен доступа нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на авторизационные данные с помощью запроса POST /api/v2/oauth.

:::note

При отправке запроса на получение токена доступа нужно указать версию АПИ, к которой будут выполняться запросы:

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

:::

Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

sh curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \ -H 'Content-Type: application/x-www-form-urlencoded' \ -H 'Accept: application/json' \ -H 'RqUID: <идентификатор_запроса>' \ -H 'Authorization: Basic <авторизационные_данные>' \ --data-urlencode 'scope=GIGACHAT_API_B2B'

```py import requests

url = ""https://ngw.devices.sberbank.ru:9443/api/v2/oauth""

payload='scope=GIGACHAT_API_B2B' headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json', 'RqUID': 'идентификатор_запроса', 'Authorization': 'Basic <авторизацонные_данные>' }

response = requests.request(""POST"", url, headers=headers, data=payload)

print(response.text) ```

Пример ответа:

json { ""access_token"": ""<токен_доступа>"", ""expires_at"": 1706026848841 }

:::note

В справочной документации вы найдете подробное описание параметров запроса и ответа. Также сможете сгенерировать токен доступа с помощью своего идентификатора (Client ID) и клиентского ключа (Client Secret).

:::

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Шаг 3. Запросы к GigaChat API {#shag-3-zaprosy-k-giga-chat-api}

:::note

Перед работой с API в личном кабинете нужно приобрести пакеты токенов на минимальную сумму в 20 000 рублей.

:::

import RequestIntro from '/docs/ru/includes/gigachat/_request-intro.mdx';

Генерация текста {#generatsiya-teksta}

import TextGeneration from '/docs/ru/includes/gigachat/_text-generation.mdx';

Создание эмбеддинга {#sozdanie-embeddinga}

import QuickstartEmbedding from '/docs/ru/includes/gigachat/_quickstart-embedding.mdx';

Шаг 4. Использование GigaChat SDK (GigaChain) {#shag-4-ispolzovanie-giga-chat-sdk-giga-chain}

import QuickstartGigaChain from '/docs/ru/includes/gigachat/_quickstart-gigachain.mdx';

Смотрите также {#smotrite-takzhe}

Документация GigaChat API

Документация GigaChain

Руководства по работе с API",[],"{'question_type': 'situational', 'seed_document_id': 10, 'situational_context': 'Специалист по поддержке решил создать новый проект в GigaChat API для управления платными опциями и тестирования.', 'topic': 'Сервис GigaChat'}"
7eaea684-e31f-4680-b96b-f70703eb098a,"После обсуждения возможного захвата мира искусственным интеллектом, я задумался о последних обновлениях в работе с историей чата GigaChat. Как сейчас передавать историю чата при использовании GigaChat API?",Историю чата нужно передавать явно в поле messages запроса POST /chat/completions.,"Document 33: lastUpdateDate: 1 июля 2024

Работа с историей чата {#sohranenie-konteksta-razgovora}

Передача истории чата позволяет GigaChat работать с результатами прошлых запросов пользователя. Когда вы переписываетесь с нейросетевой моделью в веб-интерфейсе, она автоматически учитывает историю чата.

Если для обмена сообщениями вы используете GigaChat API, историю чата нужно передавать явно в поле messages запроса POST /chat/completions.

Пример запроса с историей чата:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Когда уже ИИ захватит этот мир?"" }, { ""role"": ""assistant"", ""content"": ""Пока что это не является неизбежным событием. Несмотря на то, что искусственный интеллект (ИИ) развивается быстрыми темпами и может выполнять сложные задачи все более эффективно, он по-прежнему ограничен в своих возможностях и не может заменить полностью человека во многих областях. Кроме того, существуют этические и правовые вопросы, связанные с использованием ИИ, которые необходимо учитывать при его разработке и внедрении."" }, { ""role"": ""user"", ""content"": ""Думаешь, у нас еще есть шанс?"" } ], }'",[],"{'question_type': 'situational', 'seed_document_id': 33, 'situational_context': 'После обсуждения возможного захвата мира искусственным интеллектом, пользователь решил узнать, какие последние обновления были внесены в работу с историей чата GigaChat.', 'topic': 'Работа с GigaChat API'}"
78e9c90e-18d2-41c3-bde3-0be0a7c2708a,"Изучая документацию, я пытаюсь понять, какой формат изображения возвращается по запросу 'Получить изображение по идентификатору'? Это JPG?",Формат JPG.,"Document 53: id: get-file-id title: ""Получить изображение по идентификатору"" description: ""Возвращает файл изображения в бинарном представлении, в формате JPG."" sidebar_label: ""Получить изображение по идентификатору"" hide_title: true hide_table_of_contents: true api: {""tags"":[""Файлы""],""parameters"":[{""name"":""file_id"",""description"":""Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""schema"":{""type"":""string""},""in"":""path"",""required"":true}],""responses"":{""200"":{""content"":{""image/jpg"":{}},""description"":""OK""},""400"":{""description"":""Invalid model ID""},""401"":{""description"":""Unauthorized""},""404"":{""description"":""No such Model""}},""security"":[{""Токен доступа"":[]}],""operationId"":""getFileId"",""description"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""method"":""get"",""path"":""/files/{file_id}/content"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Получить изображение по идентификатору"",""description"":{""content"":""Возвращает файл изображения в бинарном представлении, в формате JPG.\n\nИзображения создаются с помощью запроса POST /chat/completions.\n\nПодробнее читайте в разделе Генерация изображений.\n\n:::note\n\nКонсоль запроса отключена из-за бинарного формата ответа.\n\n:::\n"",""type"":""text/plain""},""url"":{""path"":[""files"","":file_id"",""content""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[{""disabled"":false,""description"":{""content"":""(Required) Идентификатор созданного изображения, полученный в ответ на запрос пользователя.\nСодержится в ответе модели, в теге <img>, в атрибуте src.\n\nПобробнее в разделе Генерация изображений.\n"",""type"":""text/plain""},""type"":""any"",""value"":"""",""key"":""file_id""}]},""header"":[{""key"":""Accept"",""value"":""image/jpg""}],""method"":""GET"",""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Получить изображение по идентификатору

Возвращает файл изображения в бинарном представлении, в формате JPG.

Изображения создаются с помощью запроса POST /chat/completions.

Подробнее читайте в разделе Генерация изображений.

:::note

Консоль запроса отключена из-за бинарного формата ответа.

:::

Запрос {#zapros}",[],"{'question_type': 'situational', 'seed_document_id': 53, 'situational_context': 'Изучая документацию, инженер выясняет, как получить изображение в формате JPG по идентификатору и какие методы аутентификации использовать.', 'topic': 'API GigaChat'}"
32246ef5-5f31-4053-bb7c-af2a38e8ffe6,"Привет! Можете привести пример промпта, который используется для классификации обращений пользователей? Я проверяю последние обновления и хочу улучшить качество поддержки в нашей системе GigaChat и GigaChain.","json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Поможете, пожалуйста, уточнить информацию?"" } ] }","Document 29: lastUpdateDate: 27 марта 2024

Классификация обращений {#klassifikatsiya-obrasheniy}

Пример промпта для классификации обращений.

:::note

Промпт лучше работает с моделью GigaChat-Pro.

:::

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Поможете, пожалуйста, уточнить информацию?"" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию.' - role: user prompt: template: '{text}' template_format: f-string _type: chat

Шаблон содержит переменные:

text — текст обращения пользователя. Обязательное поле;

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Классифицируй обращения пользователя в подходящую категорию. Категории: Статус заказа, Возврат и обмен товаров, Характеристики продукта, Технические проблемы, Другое. В ответе укажи только категорию."" }, { ""role"": ""user"", ""content"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"")

prompt = load_prompt(""lc://prompts/content/classification.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""При оформлении заказа возник вопрос о возможностях устройства. Помогите уточнить информацию, пожалуйста?"" } ).content ```

Document 23: lastUpdateDate: 27 марта 2024

Генерация описания товаров {#generatsiya-opisaniya-tovarov}

Пример промпта для генерации рекламного описания товара для размещения в интернет-магазине.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию."" }, { ""role"": ""user"", ""content"": ""Название товара: SberBoom. Категория: умные колонки. Ключевые слова: умная колонка, салют, умный дом."" } ] }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

yaml input_variables: [product_name, category, key_words] output_parser: null messages: - role: system prompt: template: 'Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию.' - role: user prompt: template: 'Название товара: {product_name}. Категория: {category}. Ключевые слова: {key_words}.' template_format: f-string _type: chat

Шаблон содержит переменные:

product_name — название товара. Обязательное поле;

category — категория, к которой относится товар. Обязательное поле;

key_words — от одного до пяти ключевых слов, связанных с товаром. Необязательное поле.

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — профессиональный маркетолог с опытом написания высококонверсионной рекламы. Для генерации описания товара ты изучаешь потенциальную целевую аудиторию и оптимизируешь рекламный текст так, чтобы он обращался именно к этой целевой аудитории. Создай текст объявления с привлекающим внимание заголовком и убедительным призывом к действию, который побуждает пользователей к целевому действию."" }, { ""role"": ""user"", // запрос пользователя ""content"": ""Название товара: SberBoom. Категория: умные колонки. Ключевые слова: умная колонка, салют, умный дом."" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"")

prompt = load_prompt(""lc://prompts/content/product_description.yaml"") chain = prompt | giga chain.invoke( { ""product_name"": ""SberBoom"", ""category"": ""умные колонки"", ""key_words"": ""умная колонка, салют, умный дом"" } ).content ```

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```",[],"{'question_type': 'situational', 'seed_document_id': 29, 'situational_context': 'Технический специалист, работающий в рамках GigaChat и GigaChain, проверяет последние обновления и эффективные примеры промптов для улучшения качества поддержки пользователей.', 'topic': 'Промпты для GigaChat'}"
ff9d8624-db2e-414c-b021-2debe5fb9e70,"Здравствуйте, я недавно поняла, что GigaChat не работает из-за включенного VPN. Можете, пожалуйста, напомнить, какие существуют способы входа в GigaChat?",Войти в GigaChat можно двумя способами — по телефону или Сбер ID.,"Document 7: Не работает GigaChat? Проверьте, что отключен VPN

Если это не помогло, напишите боту в Telegram

Написать в поддержку

Что такое GigaChat?

Это русскоязычная мультимодальная нейросетевая модель, которая умеет отвечать на вопросы, вести диалог, писать код, рисовать картинки по запросу.

Где я могу пообщаться с GigaChat?

Начать диалог с GigaChat можно на сайте и ботах Telegram или «ВКонтакте »

Как пользоваться GigaChat, если вы не из России?

Для использования GigaChat понадобятся российский IP-адрес и авторизация через Сбер ID.

На территории Российской Федерации GigaChat работает без ограничений.

У меня не работает GigaChat, что делать?

Проверьте, что у вас отключен VPN.

Если это не помогло, напишите боту поддержки GigaChat в Telegram

Как получить Сбер ID

Если вы клиент Сбера и используете приложение СберБанк Онлайн или СБОЛ, то Сбер ID — это номер вашего телефона.

Как подключить Сбер ID:

Зайдите на сайт Сбера или на страницу авторизации GigaChat

Нажмите на кнопку «Войти по Сбер ID».

Введите номер телефона или согласитесь запустить приложение СберБанк Онлайн, следуйте подсказкам.

Всё готово — Сбер ID есть, вы вошли в сервис.

Я не клиент банка, как мне получить Сбер ID?

Сбер ID могут получить не только клиенты Сбера —для регистрации достаточно сим-карты российского оператора связи.

Почему GigaChat всегда отвечает по разному?

Даже если спрашивать GigaChat одно и то же, каждый его ответ будет уникальным. Это действительно так, вам не показалось. GigaChat почти никогда не повторяется.

Всё дело в том, что GigaChat — это генеративная модель, а не поисковая система. Он создает новый ответ с нуля, пишет его сам в реальном времени. Поисковые системы, например Google или Яндекс, ищут готовые материалы, которые были написаны людьми. Они не создают ничего нового. А GigaChat может рассказывать одинаковую информацию разными словами, совсем как вы. Ещё он постоянно узнаёт новое и жадно учится, поэтому его ответы меняются со временем, по мере роста его экспертизы.

Что такое промпт?

Промпт — это текстовый запрос, на основе которого GigaChat генерирует ответ.

Как работает GigaChat?

В основе GigaChat лежит GigaChat версии 29В (с 29 млрд параметров) и Кандинский версии 3.1 — нейросетевая модель для генерации изображений. Подробнее о том, как создавался и работает GigaChat в нашей статье на Хабр .

Что умеет GigaChat?

Он отвечает на вопросы, может написать код, письмо или целую песню. Поможет составить поздравление с любым праздником или меню на неделю. А ещё с помощью GigaChat можно решить профильные задачи: написать продающий текст, слоганы для рекламной кампании, описания карточек товаров для маркетплейса или посты для соцсетей.

Как удалить диалог с GigaChat?

Есть два способа удалить диалог:

Откройте диалог, нажмите на иконку мусорной корзины (она в верхнем правом углу, рядом с кнопкой «Поделиться») и нажмите «Удалить».

Наведите стрелку на нужный диалог в списке чатов слева. В правом верхнем углу этого диалога появятся три точки, нажмите на них и нажмите «Удалить».

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Ещё по теме

Как работать с изображениями\ \ ﻿\ \ Написали подробные инструкции с примерами и иллюстрациями

Примеры удачных запросов\ \ ﻿\ \ Cобрали целый каталог

Как формулировать запросы\ \ ﻿\ \ Написали понятные инструкции

Где я могу пообщаться с GigaChat?

Как пользоваться GigaChat, если вы не из России?

У меня не работает GigaChat, что делать?

Как получить Сбер ID

Я не клиент банка, как мне получить Сбер ID?

Почему GigaChat всегда отвечает по разному?

Что такое промпт?

Как работает GigaChat?

Что умеет GigaChat?

Как удалить диалог с GigaChat?

Document 9: Главная

База знаний

База знаний

БАЗА ЗНАНИЙ

Главная Общие вопросы Туториалы AI-Помощники Статьи

Каталог готовых запросов для GigaChat \ \ Готовые промпты помогут работать с нейросетью быстрее и качественнее\ \

— GigaChat, с чего начать?

GigaChat: с чего начать\ \ Проверьте, что VPN выключен и авторизуйтесь по Сбер ID

Как формулировать запросы\ \ Написали понятные инструкции

Общие вопросы \ и ответы\ \ Узнайте, как работает \ и что умеет GigaChat

— Как мне создать текст, картинку или код?

Как работать с текстом\ \ Рассказываем, что GigaChat \ умеет и как написать запрос, чтобы он точно понял задание

Как работать \ с изображениями\ \ Написали подробные инструкции с примерами и иллюстрациями

Как работать с кодом\ \ Напишет, исправит \ и проанализирует код. Покажем примеры запросов

— Какие есть AI-помощники?

\ \ Кот Баюн\ \ Создаст сказку и озвучит её

Статьи

Смотреть больше\ \

Топ-12 нейросетей на русском языке\ \ Список популярных \ онлайн-сервисов на базе искусственного интеллекта на русском языке

Генерация сценариев в нейросети GigaChat\ \ GigaChat пишет сценарии для рилсов, видео, а также сюжеты для фильмов

GigaChat \ для веб-разработки и дизайна\ \ Как использовать GigaChat при разработке и продвижении \ сайтов

Часто задаваемые вопросы

Почему надо регистрироваться?

После регистрации вы сможете пользоваться GigaChat без ограничений. Все чаты и созданные диалоги с персонажами будут храниться в одном месте — к ним всегда можно вернуться и продолжить разговор там, где вы закончили.

Чат безопасен? Данные не украдут?

Доступ к истории ваших чатов имеете только вы. Другие люди могут увидеть часть диалога или результат вашего совместного творчества с GigaChat, если вы нажмёте на кнопку «Поделиться».

GigaChat бесплатный навсегда?

Да. Пользоваться GigaChat можно абсолютно бесплатно, без лимитов и ограничений. Правда-правда. Без подвохов.

Что ещё умеет GigaChat?

GigaChat умеет рисовать картинки, писать и править код, сочинять оригинальные тексты — прозу и стихи, создавать открытки и поздравления, генерировать медитации и сказки, озвучивать их. Поможет подготовиться к собеседованию, выступлению перед классом или признанию в чувствах. Возможно, GigaChat научился ещё чему-то, даже пока вы читали этот ответ. Так что заглядывайте почаще и пробуйте новое.

Авторизация по Сбер ID безопасна?

Войти в GigaChat можно по Сбер ID, для этого совсем не нужно быть клиентом банка. Вход по Сбер ID = вход по номеру телефона, но безопаснее. Сервис надёжно шифрует вашу личную информацию и использует протоколы защищённой передачи данных. Их нельзя перехватить, а мы видим только ваши имя и номер телефона.

GigaChat — полностью бесплатное российское решение

Перейти в чат

Что такое GigaChat API и как его использовать?

Интегрируйте GigaChatв корпоративный софт, создайте чат-бота, делегируйте работус документами

Документация

Бот GigaChat в Telegram\ \ Бот GigaChat в VK\ \

в GigaChat

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо

Document 6: напарник в работе, учёбе и дома =================================

GigaChat — бесплатная нейросеть без vpn на русском языке, которая общается как человек

Войти в GigaChat Попробовать прямо здесь

Станьте лучшим с GigaChat

Нейросеть подкинет вам идей, поможет развиваться, выполнит скучные задачи, освободит время и развлечёт

Нарисует картинки

Напишет тексты

Обучит английскому

Придумает шутки

Даст идею для старт-апа

Решит уравнение

Расскажет сказки

Придумает слоган

Оживите нейросеть, выбрав характер

Персонажи — тот же GigaChat, но с душой и талантами

Хвалёнушка

Контент-мейкер

Кот Баюн

GigaChat

Поведение человека

Позитивная

Эмпатичная

Активный собеседник

Войти и поболтать

Легко начать без знаний и обучения

Умеет читать текст в файлах

Объяснит простым языком

Помогает с учёбой

Переведи файлы на английский

Краткое содержание:

A neural network is an artificial neural network, a self—learning system built on the principle of organization and functioning of biological neural networks.

Как назвать сына?

Сейчас в моде древнерусские имена. Как насчёт Ярополк?

Напиши самые редкие имена

Как убедить мужа назвать сына Эдвардом?

Как понять теорему Пифагора?

В прямоугольном треугольнике квадрат длины гипотенузы (это самый длинный отрезок, который соединяет противо-лежащие углы) равен сумме квадратов длин катетов (отрезков, примыкающихк прямому углу).

Войти в GigaChat Попробовать прямо здесь

Генерирует картинки в любом стиле

Ещё вариант

Нарисуй: взрослый лев стоит на обрыве, саванна, закат

Ещё вариант

Нарисуй: мужчина в плаще, воротник стоит, в шляпе-федоре, крупный план, черно-белая картинка

Ещё вариант

Нарисуй: девушка с короткими синими волосами распадается на пиксели, стиль киберпанк

Ещё вариант

Нарисуй могучее дерево, растущее до облаков, крона мягко-жёлтого цвета, стиль Artstation

Ещё вариант

Сгенерируй милого робота-пылесоса в стиле 3D, будто он сделан по технологии 80-х

Ещё вариант

Нарисуй: взрослый лев стоит на обрыве, саванна, закат

Ещё вариант

Нарисуй: мужчина в плаще, воротник стоит, в шляпе-федоре, крупный план, черно-белая картинка

Ещё вариант

Нарисуй: девушка с короткими синими волосами распадается на пиксели, стиль киберпанк

Ещё вариант

Нарисуй могучее дерево, растущее до облаков, крона мягко-жёлтого цвета, стиль Artstation

Ещё вариант

Сгенерируй милого робота-пылесоса в стиле 3D, будто он сделан по технологии 80-х

Поможет в любом вопросе

Объясни детям, что такое электролиз

Составь чеклист ремонта ванной

Составь объявление для рекламы кофейни «Идеальная чашка»

Составь список тем для курсовой работы по предмету «Менеджмент»

Мне нужен референс для портрета

У меня был тяжелый день...

Придумай пост на тему сидячего образа жизни в стиле инфлюенсера

Войти в GigaChat Попробовать прямо здесь

Испытайте сейчас, зарегистрируйтесь потом

Привет, это GigaChat! Я создан, чтобы покорить ваше сердечко и стать идеальным помощником! Могу писать тексты и краткие пересказы, создавать картинки, объяснять программный код или помочь с домашним заданием. А ещё распознаю речь и озвучиваю ответы.

Что умеет GigaChat?

Придумай 5 идей для путешествий

Зачем жирафу длинная шея?

Войти

В полную версию

Версия без ограничений и с сохранением диалогов

Часто задаваемые вопросы

Почему надо регистрироваться?

После регистрации вы сможете пользоваться GigaChat без ограничений. Все чаты и созданные диалоги с персонажами будут храниться в одном месте — к ним всегда можно вернуться и продолжить разговор там, где вы закончили.

Чат безопасен? Данные не украдут?

Доступ к истории ваших чатов имеете только вы. Другие люди могут увидеть часть диалога или результат вашего совместного творчества с GigaChat, если вы нажмёте на кнопку «Поделиться».

GigaChat бесплатный навсегда?

Да. Пользоваться GigaChat можно абсолютно бесплатно, без лимитов и ограничений. Правда-правда. Без подвохов.

Что ещё умеет GigaChat?

GigaChat умеет рисовать картинки, писать и править код, сочинять оригинальные тексты — прозу и стихи, создавать открытки и поздравления, генерировать медитации и сказки, озвучивать их. Поможет подготовиться к собеседованию, выступлению перед классом или признанию в чувствах. Возможно, GigaChat научился ещё чему-то, даже пока вы читали этот ответ. Так что заглядывайте почаще и пробуйте новое.

Авторизация по Сбер ID безопасна?

Войти в GigaChat можно по Сбер ID, для этого совсем не нужно быть клиентом банка. Вход по Сбер ID = вход по номеру телефона, но безопаснее. Сервис надёжно шифрует вашу личную информацию и использует протоколы защищённой передачи данных. Их нельзя перехватить, а мы видим только ваши имя и номер телефона.

Чем отличается GigaChat от ChatGPT и ruGPT-3?

GigaChat и ChatGPT — это нейросетевые языковые модели или, проще говоря, нейросети. Отличие в том, что GigaChat — русскоязычная модель, а ChatGPT — англоязычная. GigaChat обучается на русскоязычных текстах и поэтому лучше понимает русскую речь. ChatGPT тоже может общаться на русском, но с ограничениями, поскольку обучается в первую очередь на англоязычных базах. GigaChat постепенно совершенствуется. При первом запуске сервис работал на основе ruGPT-3 — русскоязычного аналога ChatGPT. Сейчас его исходный код находится в открытом доступе и может применяться разработчиками в личных и коммерческих целях.

ПАО Сбербанк использует cookie для персонализации сервисов и удобства пользователей. Вы можете запретить сохранение cookie в настройках своего браузера.

Хорошо

Document 8: Вход в GigaChat

После этого вы увидите окно авторизации. Войти в GigaChat можно двумя способами — по телефону или Сбер ID.

1. Вход по телефону

Введите свой номер в поле ввода. Далее вам придёт СМС-код, который необходимо вписать. Вы можете поставить галочку около «Запомнить меня», чтобы не проходить авторизацию снова и снова. А ещё по номеру телефона вы можете создать свой Сбер ID.

2. Вход по Сбер ID

Справа в том же окне находится QR-код, который нужно отсканировать с помощью камеры телефона. Здесь вы тоже можете поставить галочку около «Запомнить меня». Для этого способа необходимо, чтобы на вашем телефоне было установлено приложение Сбербанк Онлайн.

QR-код приведёт вас на сайт СберБанка. В открывшемся окне нажмите «Да», если ваш регион Москва, или выберите другой, нажав на «Изменить регион». После авториации GigaChat запомнит пользователя. В следующий раз при входе в веб-версию нужно будет просто подтвердить актуальность аккаунта кнопкой «Продолжить».

Выглядит страшно, но всё не так, как кажется! Это просто формальности. Нажмите «Принять» на экране.

Затем нажмите на зелёную кнопку «Открыть СберБанк Онлайн», чтобы перейти в мобильное приложение банка.

Далее вы увидите уведомление: «Открыть эту страницу в приложении „Онлайн“?» Нажмите «Открыть».

И наконец, финальное сообщение с подтверждением вашего Сбер ID в самом приложении СберБанка. Нажмите «Подтвердить».

Если всё прошло успешно, вы увидите такое оповещение. Вы восхитительны!

Если у вас нет Сбер ID, создайте его на странице авторизации. Это быстро и просто. Вам понадобится сим-карта мобильного оператора России .

После этих несложных манипуляций GigaChat вас запомнит. В следующий раз при входе в веб-версию вам нужно будет просто подтвердить, что это вы, простой кнопкой «Продолжить».

Теперь вы можете начать диалог с GigaChat. Окно для ввода запросов — внизу экрана, как и в любом мессенджере. Всё для вашего удобства :)

Ваша личная шпаргалка

А сейчас давайте разберёмся, что вы можете увидеть на экране. Это будет ваша шпаргалка, которая заранее ответит на все ваши вопросы — что, как и зачем.

1. Кнопка «Новый чат»

Нажмите «Новый чат», если хотите сменить тему разговора или вовсе начать новый:

Общение с GigaChat

Общение с персонажами

AI-открытки или медитации

2. Список чатов «Все чаты»:

Все чаты хранятся в истории слева от диалога с GigaChat. Нажав на три точки в выделенном диалоге, можно поделиться чатом.

3. «Избранное»

Сохраняйте наиболее важные чаты в разделе ""Избранное"". Всё самое важное и интересное теперь всегда под рукой. Выберите нужный вам чат в списке слева, при наведении, справа появятся три точки меню. В выпавшем меню выбрать пункт ""Добавить в избранное"". Удалить чат из списка избранного. В меню чата выбираем ""Убрать из избранного"". Посмотреть весь список избранных чатов можно, переключая кнопки ""Все чаты""/""Избранное"" в левом верхнем углу. Избранные чаты отмечены серой звездочкой около даты/времени запроса.

4. Профиль пользователя

Информация о пользователе отображается в левом нижнем углу экрана. За счет регистрации по Сбер ID имя пользователя выглядит также как в приложении Сбербанк Онлайн: имя + первая буква фамилии. Сменить имя пользователя нельзя. GigaChat не имеет доступа к банковским данным, не может дать консультацию по счетам и финансам конкретного пользователя.

5. Приветствие и Саджесты

«Как вам GigaChat?» — можно пройти опрос и поделиться опытом работы с GigaChat. Мы учтём все ваши пожелания!

FAQ — Frequently Asked Questions (в переводе — «Часто задаваемые вопросы»). Сюда можно заглянуть, чтобы узнать, как написать интересный запрос, сгенерировать потрясающую картинку, написать сложный код или отрерайтить текст.

«Поддержка» — по всем вопросам по работе GigaChat можно обратиться именно сюда. Наша прекрасная команда обязательно вам поможет!

Оцените статью

ВКонтакте

Telegram

Скопировать ссылку

Ещё по теме

Как работать с изображениями\ \ ﻿\ \ Написали подробные инструкции с примерами и иллюстрациями

Примеры удачных запросов\ \ ﻿\ \ Cобрали целый каталог

Как формулировать запросы\ \ ﻿\ \ Написали понятные инструкции

1. Вход по телефону

2. Вход по Сбер ID

Ваша личная шпаргалка

1. Кнопка «Новый чат»

2. Список чатов «Все чаты»:

3. «Избранное»

4. Профиль пользователя

5. Приветствие и Саджесты",[],"{'question_type': 'situational', 'seed_document_id': 7, 'situational_context': 'Анна не могла понять, почему GigaChat не работает, пока не осознала, что забыла отключить VPN.', 'topic': 'Сервис GigaChat'}"
3ebd1fb1-61b7-4e8b-841f-6d4e0e41fbc0,"Привет! Я занимаюсь обучением по созданию эмбеддингов для улучшения релевантности текстовых запросов в нашей поисковой системе. Можете подсказать, какой метод используется для создания эмбеддингов в GigaChat API?",Для создания эмбеддингов в GigaChat API используется метод POST /embeddings.,"Document 39: keywords: [""эмбеддинг"", ""эмбеддинги"", ""векторное представление текста"", ""embeddings"", ""embedding""] lastUpdateDate: 1 августа 2024

Векторное представление текста {#vektornoe-predstavlenie-teksta}

Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Векторное представление текста (эмбеддинг) используется для:

улучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;

уменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;

обеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.

Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings (""model"": ""Embeddings"") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.

:::note

Создание эмбеддингов оплачивается отдельно от генерации текста.

Подробнее в разделе Тарифы и оплата.

:::

Пример запроса на создание эмбеддинга:

shell curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \ --header 'Content-Type: application/json' \ --header 'Authorization: Bearer <токен доступа>' \ --data '{ ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"", ""Какие новинки в мире IT?"" ] }'

Параметры запроса:

Пример ответа:

json { ""object"": ""list"", ""data"": [ { ""object"": ""embedding"", ""embedding"": [ 0.0023064255, -0.009327292, ... -0.0028842222 ], ""index"": 0 } ], ""model"": ""Embeddings"" }

Параметры ответа:

Для создания эмбеддингов с помощью SDK используйте функцию embed_documents(), модуля GigaChatEmbeddings, импортированного из langchain_community.embeddings.gigachat:

```python from langchain_community.embeddings.gigachat import GigaChatEmbeddings

embeddings = GigaChatEmbeddings(credentials=""<авторизационные_данные>"", verify_ssl_certs=False) result = embeddings.embed_documents(texts=[""Привет!""]) print(result) ```

В ответ функция возвращает массив чисел, представляющих значения эмбеддинга для переданного текста:

```json [ [ 0.72149658203125, -0.18883895874023438, 0.013126373291015625, -1.27783203125, 1.4967041015625, -0.97698974609375, -0.1722869873046875, 1.4625244140625,

    ...

    -0.007974624633789062,
    -0.77838134765625,
    1.167236328125
]

] ```

Использование эмбеддингов для поиска {#ispolzovanie-embeddingov-dlya-poiska}

Поиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:

Создайте векторное представление текста, по которому будет выполняться поиск.

Сохраните эмбеддинг в векторной базе данных.

Выполните запрос к базе.

Ниже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.

Пример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:

page_content — строку, представляющую содержимое;

metadata — словарь, содержащий произвольные метаданные.

Атрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.

Для запуска примера установите зависимости:

sh pip install gigachain-community gigachain-chroma

Создайте несколько документов и сохраните их в векторном хранилище:

```python from langchain_core.documents import Document from langchain_chroma import Chroma from langchain_community.embeddings.gigachat import GigaChatEmbeddings

Список документов, по которым будет выполняться поиск

documents = [ Document( page_content=""Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Кошки — независимые животные, которым нужно собственное пространство."", metadata={""source"": ""mammal-pets-doc""}, ), Document( page_content=""Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать."", metadata={""source"": ""fish-pets-doc""}, ), Document( page_content=""Попугаи — умные птицы, которые способны имитировать человеческую речь."", metadata={""source"": ""bird-pets-doc""}, ), Document( page_content=""Кролики — социальные животные, которым нужно много места, чтобы прыгать."", metadata={""source"": ""mammal-pets-doc""}, ), ]

Создайте векторное хранилище и передайте в него список документов и модель для создания векторного представления

vectorstore = Chroma.from_documents( documents, embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False ), ) ```

Теперь вы можете использовать методы vectorstore для выполнения поиска по документам.

Поиск по документам на основе схожести с тексовым запросом:

python vectorstore.similarity_search(""кошка"")

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Оценка схожести запроса и содержимого хранилища:

```python

Оценка зависит от выбранного векторного хранилища.

Chroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.

vectorstore.similarity_search_with_score(""кошка"") ```

Результат оценки:

text [(Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), 218.2356719970703), (Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), 319.75384521484375), (Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), 349.84930419921875), (Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'}), 352.6993103027344)]

Поиск документов на основе схожести с запросом, представленным в виде вектора:

```python embedding = GigaChatEmbeddings( credentials=""<авторизационные_данные>"", scope=""GIGACHAT_API_PERS"", verify_ssl_certs=False )

embedded_query = embedding.embed_query(""кошка"")

vectorstore.similarity_search_by_vector(embedded_query) ```

Результат поиска:

text [Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}), Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Cмотрите также {#cmotrite-takzhe}

Пример использования модели Embeddings и GigaChain для создания RAG-приложения, которое генерирует ответы на основе предоставленного текста.

Document 55: id: post-embeddings title: ""Создать эмбеддинг"" description: ""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса."" sidebar_label: ""Создать эмбеддинг"" hide_title: true hide_table_of_contents: true api: {""requestBody"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""input""],""properties"":{""model"":{""type"":""string"",""description"":""Название модели, которая будет использована для создания эмбеддинга."",""default"":""Embeddings""},""input"":{""type"":""array"",""description"":""Строка или массив строк, которые будут использованы для генерации эмбеддинга."",""items"":{""type"":""string"",""example"":""Расскажи о современных технологиях""}}},""title"":""EmbeddingsBody""}}}},""responses"":{""200"":{""content"":{""application/json"":{""schema"":{""type"":""object"",""required"":[""data"",""object""],""properties"":{""object"":{""type"":""string"",""description"":""Формат структуры данных."",""default"":""list""},""data"":{""type"":""array"",""items"":{""type"":""object"",""description"":""Объект с данными о векторном представлении текста."",""required"":[""object"",""embedding"",""index"",""usage""],""properties"":{""object"":{""type"":""string"",""description"":""Тип объекта."",""default"":""embedding""},""embedding"":{""type"":""array"",""description"":""Массив чисел, представляющих значения эмбеддинга для предоставленного текста."",""items"":{""type"":""integer"",""format"":""float""}},""index"":{""type"":""integer"",""description"":""Индекс соответствующий индексу текста, полученного в массиве input запроса."",""example"":0},""usage"":{""type"":""object"",""properties"":{""prompt_tokens"":{""type"":""number"",""description"":""Количество токенов в строке, для которой сгенерирован эмбеддинг."",""example"":6}}}}}},""model"":{""type"":""string"",""description"":""Название модели, которая используется для вычисления эмбеддинга."",""example"":""Embeddings""}},""title"":""Embedding""}}},""description"":""OK""},""401"":{""description"":""Unauthorized""}},""security"":[{""Токен доступа"":[]}],""operationId"":""postEmbeddings"",""description"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""method"":""post"",""path"":""/embeddings"",""servers"":[{""url"":""https://gigachat.devices.sberbank.ru/api/v1""},{""url"":""https://gigachat-preview.devices.sberbank.ru/api/v1""}],""securitySchemes"":{""Базовая аутентификация"":{""description"":""Базовая (Basic) аутентификация с помощью авторизационных данных — строки, полученной в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n\nАвторизационные данные передаются в заголовке Authorization, в запросе на получение токена доступа.\n\n\n"",""scheme"":""basic"",""type"":""http""},""Токен доступа"":{""description"":""Аутентификация с помощью токена доступа. Используется во всех запросах к GigaChat API, кроме запроса на получение токена доступа."",""type"":""http"",""scheme"":""bearer"",""bearerFormat"":""JWT""}},""jsonRequestBodyExample"":{""model"":""Embeddings"",""input"":[""Расскажи о современных технологиях""]},""info"":{""title"":""GigaChat API"",""version"":""1.0.0"",""contact"":{""name"":""GigaChat API"",""url"":""https://developers.sber.ru/portal/products/gigachat-api"",""email"":""gigachat@sberbank.ru""},""description"":""\nСправочная документация по REST API нейросетевой модели GigaChat.\n\nО стоимости и условиях использования GigaChat API вы можете узнать в разделе Тарифы и оплата.\n\n## Получение токена доступа и авторизация запросов\n\nЗапросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа по протоколу OAuth 2.0.\nТокен доступа передается в заголовке Authorization:\n\nsh\ncurl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/models' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer <токен_доступа>'\n\n\n:::tip\n\nВы также можете передавать запросы к моделям в раннем доступе.\nИх возможности могут отличаться от моделей, доступных в промышленном контуре.\n\nДля обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.\n\n:::\n\nЧтобы получить токен, отправьте запрос POST /api/v2/oauth:\n\nsh\ncurl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Accept: application/json' \\\n-H 'RqUID: <идентификатор_запроса>' \\\n-H 'Authorization: Basic <авторизационные_данные>' \\\n--data-urlencode 'scope=GIGACHAT_API_PERS'\n\n\nГде:\n\n RqUID — обязательный заголовок, в котором нужно передать уникальный идентификатор запроса в формате uuid4.\n Authorization — обязательный заголовок, в котором нужно передать авторизационные данные — строку, полученную в результате кодирования в base64 идентификатора (Client ID) и клиентского ключа (Client Secret) API.\n* scope — обязательное поле в теле запроса, которое указывает к какой версии API выполняется запрос. Возможные значения:\n * GIGACHAT_API_PERS — доступ для физических лиц.\n * GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.\n * GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.\n\nПри успешном выполнении запроса GigaChat API вернет токен доступа, который действует в течение 30 минут:\n\njson\n{\n \""access_token\"": \""eyJhbGci3iJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..Dx7iF7cCxL8SSTKx.Uu9bPK3tPe_crdhOJqU3fmgJo_Ffvt4UsbTG6Nn0CHghuZgA4mD9qiUiSVC--okoGFkjO77W.vjYrk3T7vGM6SoxytPkDJw\"",\n \""expires_at\"": 1679471442\n}\n\n\n:::note\n\nКак получить токен и авторизационные данные (Client Id и Client Secret) читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.\n\n:::\n""},""postman"":{""name"":""Создать эмбеддинг"",""description"":{""content"":""Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.\n\nВекторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.\n"",""type"":""text/plain""},""url"":{""path"":[""embeddings""],""host"":[""{{baseUrl}}""],""query"":[],""variable"":[]},""header"":[{""key"":""Content-Type"",""value"":""application/json""},{""key"":""Accept"",""value"":""application/json""}],""method"":""POST"",""body"":{""mode"":""raw"",""raw"":""\""\"""",""options"":{""raw"":{""language"":""json""}}},""auth"":{""type"":""bearer"",""bearer"":[{""type"":""any"",""value"":""

import ApiTabs from ""@theme/ApiTabs""; import DiscriminatorTabs from ""@theme/DiscriminatorTabs""; import MethodEndpoint from ""@theme/ApiDemoPanel/MethodEndpoint""; import SecuritySchemes from ""@theme/ApiDemoPanel/SecuritySchemes""; import MimeTabs from ""@theme/MimeTabs""; import ParamsItem from ""@theme/ParamsItem""; import ResponseSamples from ""@theme/ResponseSamples""; import SchemaItem from ""@theme/SchemaItem""; import SchemaTabs from ""@theme/SchemaTabs""; import TabItem from ""@theme/TabItem"";

Создать эмбеддинг

Возвращает векторные представления соответствующих текстовых запросов. Индекс объекта с векторным представлением (поле index) соответствует индексу строки в массиве input запроса.

Векторное представление выглядит как массив чисел embedding. Каждое значение в массиве представляет одну из характеристик или признаков текста, учтенных при вычислении эмбеддинга. Значения образуют числовое представление текста и позволяют анализировать и использовать текст в различных задачах. Как правило, чем ближе значения эмбеддингов друг к другу, тем более семантически близки тексты.

Запрос {#zapros}",[],"{'question_type': 'situational', 'seed_document_id': 39, 'situational_context': 'Инженер программного обеспечения активно обучается созданию и использованию эмбеддингов для улучшения релевантности текстовых запросов в поисковой системе.', 'topic': 'Работа с GigaChat API'}"
e79a9075-3223-491a-bc46-2ed8c245643d,"Здравствуйте, мы запускаем новый корпоративный проект и столкнулись с проблемой: один из наших пользователей получает ошибку 401 при работе с API GigaChat. Что нам делать в этом случае?","Рекомендовать вернуться в личный кабинет и сгенерировать заново авторизационные данные «получить новый client_secret», либо убедиться что сформированный токен не «протух» (он живет 30 минут). Вполне возможна ситуация, когда человек заблуждается относительно природы доступа к АПИ, он считает что оформил корпоративный доступ, а по факту он зашел со SberID как физ.лицо, поэтому рекомендуем ему попробовать сначала одно, затем другое значение.","Document 1: Общие понятия

client_id - идентификатор проекта ГигаЧат АПИ, находится в проекте в личном кабинете (на 20/08/2024) в правом верхнем углу под строкой «используйте ключи для подключения сервиса». Для поиска внут¸ри журналов, для поиска сообщений, ошибок обычно запрашивается именно он. Внутри одного корпоративного пространства может быть до 5 разных проектов ГигаЧат. Чтобы в корпоративном пространстве можно было добавлять больше 5 проектов - необходимо запрашивать доступ дополнительно. У физлиц проект может быть (на данный момент) только один.

workspace_id - идентификатор пространства внутри Студии. Может помочь при решении вопросов для юрлиц по организации доступа, оформлению корпоративного пространства. В остальных случаях смотрите client_id

Цензор - он же этический, он же тематический фильтр. Подсистема которая блокирует отправку сообщений если там содержится потенциально опасная информация. О том какие темы могут его триггерить можно почитать по ссылке https://developers.sber.ru/docs/ru/gigachat/limitations#tematicheskie-ogranicheniya-zaprosov

О том что цензор сработал можно узнать по ошибке blacklist в ответе модели.

Цензор может быть отключен только для юридических лиц (корпоративных пространств) с согласования владельца продукта, необходимо прислать 2-3 примера сработки цензора, полное описание сценария применения (кто пользователи, какой алгоритм применения ГигаЧат). Другим способом отключить его нельзя.

Потоки - количество единовременно обрабатываемых запросов. Для физлиц - 1 поток, для юрлиц - 10 потоков. Количество потоков привязано к конкретному client_id проекта GigaChat API (для Enablers) и Common Name сертификата (для Банка). Увеличение количества потоков для Enablers возможно только для корпоративных пространств (юрлиц) через согласованием с владельцем продукта, для физлиц такой процедуры не предусмотрено даже если они покупают платные пакеты. Для расширения количества потоков необходимо предоставить Владельцу Продукта информацию о сценарии, DAU/MAU системы для которой запрашивается доступ и расчет требуемого количества потоков (почему хотят именно N потоков)

Инстансы - экземпляры ГигаЧат, внутри Банка их пять (ИФТ в Дельта, ПСИ и ПРОМ в Сигма, ПСИ и ПРОМ в Альфа), также есть публично доступный инстанс в сетевом регионе Enablers. Доступ к Enablers пользователь (в том числе и внутрибанковский) оформляет самостоятельно через Студию. Доступ к банковским инстансам оформляется через заявки на отдел сопровождение. (см API)

GigaChain / ГигаЧейн - библиотека для языка Python нашей разработки. Адрес для внешних потребителей https://github.com/ai-forever/gigachain/ сама по себе не предоставляет доступ к ГигаЧат, при работе с ней также требуются авторизационные данные. Содержит огромное количество примеров кода в разной степени применимости в разных процессах. Любые вопросы по ней отправляются Поддержкой на команду GigaChain

ENABLERS - публично доступный инстанс ГигаЧат

1.2. Детальней про ошибки при работе с API

400, scope from db not fully includes consumed scope

Что происходит:

Пользователь не читал документацию и указал неверное значение параметра scope.

Что делать?

Указать корректный параметр scope согласно документации https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/post-token#zapros

Версия API. Возможные значения:

GIGACHAT_API_PERS — доступ для физических лиц.

GIGACHAT_API_B2B — доступ для ИП и юридических лиц по предоплате.

GIGACHAT_API_CORP — доступ для ИП и юридических лиц по постоплате.

Если пользователь работает через библиотеку GigaChain и получает эту ошибку, то скорее всего параметр scope там вообще не указан и нужно добавить его в программный код в раздел параметров модели.

401, credentials doesn't match db data

Что происходит:

Неверное значение параметра «авторизационные данные»

Что делать:

Рекомендовать вернуться в личный кабинет и сгенерировать заново авторизационные данные «получить новый client_secret», либо убедиться что сформированный токен не «протух» (он живет 30 минут)

Вполне возможна ситуация, когда человек заблуждается относительно природы доступа к АПИ, он считает что оформил корпоративный доступ, а по факту он зашел со SberID как физ.лицо, поэтому рекомендуем ему попробовать сначала одно, затем другое значение.

402, Payment Required​, Лимит по тарифу исчерпан

У пользователя кончились токены модели, к которой он пытается обращаться. Скорее всего он не указал в программном коде (или готовом сервисе) другую модель к которой надо обращаться. Посоветуйте прислать снимок экрана из личного кабинета так чтобы было видно сколько токенов в каком пакете у него осталось. Если он настаивает что все делает корректно - запрашивайте авторизационные данные и выполняйте вызов разных моделей самостоятельно. Следующим шагом заходите в статистику и смотрите сколько там фактически было истрачено. В редких случаях проблема может потребовать обращения к службе сопровождения.

429, Too many requests. Слишком много запросов.

Пользователь пытается выполнить большее количество одновременных запросов, чем разрешено его идентификатору. По умолчанию для физлиц - 1 одновременный поток, для юрлиц - 10 потоков. Для внутриБанковских потребителей - устанавливается по согласованию с Владельцем Продукта.

«ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain»

Это ошибка присоединения к API возникает из-за сертификатов МинЦифры РФ, которые система пользователя приняла за самописные сертификаты.

Что делать? Рекомендовать к прочтению https://developers.sber.ru/docs/ru/gigachat/certificates и устанавливать в коде приложения (или в настройках виртуального окружения). ВАЖНО! Пользователи часто ставят сертификаты только на уровне ОС (операционной системы), этого недостаточно, так как у средств разработки чаще всего свои venv (виртуальные окружения) в которых свои доверенные сертификаты. ВАЖНО! Конечно, пользователь может просто отключить проверку сертификатов на своей стороне (verify_ssl_certs=False например), но это НЕ РЕКОМЕНДУЕМОЕ ПОВЕДЕНИЕ!.

Для пользователей GigaChain можно посоветовать утилиту gigachain-cli которая решает эти проблемы

1.3. Любые вопросы на тему «у меня не работает вызов к АПИ/API»

Это могут быть ошибки например 401, 402, 403, 404. В 99.9% случаев это либо неверно сформированная строка вызова либо некорректно указанная модель либо протухший токен авторизации. Проще говоря - пользователь не читал или плохо читал документацию по обращению к API по ссылке https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/gigachat-api

Что делать?

Запросить полный вид ошибки от сервиса и полный вид запроса включая данные авторизации. Нет ничего страшного в том что пользователь присылает нам авторизационные данные - это сильно проще чем вытаскивать логи. Пользователь может заново перегенерировать авторизационные данные в Личном Кабинете студии после закрытия заявки.

После получения строк вызова сравнить их с актуальными вызовами из документа который будет передаваться отдельно. Документ держать актуальным при изменении методов.

Используйте авторизационные данные пользователя для того чтобы выполнить запросы авторизации и обращения к модели. Если CURL сложно - используйте Postman.

https://developers.sber.ru/docs/ru/gigachat/api/postman-request-collection

Очень частая ошибка при вызове Curl в Windows [(58) schannel: Failed to import cert file cert.pem, last error is 0x80092002

Что происходит:

При попытке отправки запроса в API с помощью curl на Windows возникает ошибка curl: (58) schannel: Failed to import cert file cert.pem, last error is

0x80092002. Ошибка происходит, потому что версия используемая версия curl не поддерживает формат хранения сертификата pem(стандарт OpenPGP).

Что делать:

Необходимо переконвертировать сертификат в по стандарту pkc#12:

openssl pkcs12 -export -out cert.p12 -in cert.pem -inkey private.key.

Далее используем сертификат в новом формате в качестве значения параметра –cert, например

curl https://gigachat-ift.sberdevices.delta.sbrf.ru/v1/models --cert cert.p12 --key private.key

Самый простой способ - использовать/заказать в Друге виртуальную Linux машину

1.5. Любые вопросы про библиотеки GigaChain или библиотеку GigaChat

Сначала советуем пользователям удалить все библиотеки LangChain и переустановить/обновить GigaChain следующими командами

pip uninstall langchain langchain-core langchain-community langchain-eperimental (любые другие библиотеки langchain которые он еще мог поставить)

pip install -U gigachain-community

Если не помогло, то все последующие вопросы отправлять команде поддержки GigaChain

Перед отправкой на команду ГигаЧейна всех пользователей:

просить выполнить следующие команды и присылать результат работы:

pip install -U gigachain-cli

gigachain info

В ответ утилита будет выдавать небольшой лог, который надо приложить к обращениям.

Вопросы про Кандинский/генерацию изображений

«Картинка не того размера, не того формата»

Через ГигаЧат API в данный момент рисуется только 640 на 480. Любые другие соотношения сторон, разрешение - только при работе напрямую с Fusionbrain API (Кандинским)

«Сколько хранится картинка»

На данный момент все картинки хранятся без срока давности.

«Картинка которую я сгенерировал - может быть доступна кому-то еще?»

Нет.

Проблема кодировки отправляемого сообщения через curl на Windows

Что происходит:

При попытке отправки запроса в API с помощью curl на Windows с использование кирилицы не правильно воспринмается вопрос/ответ с крокозябрами или совершенно не соответвуюе вопросу.

Пример: curl --cert cert.p12 --key private.key --data ""{\""model\"":\""GigaChat:latest\"",\""messages\"": [{\""role\"": \""user\"", \""content\"": \""repeAT THIS: Попугая хороший\""}],\""n\"":1,\""top_p\"":0.47,\""stream\"":false}"" -v https://goprodigy-ci01808661-gigachat.apps.ift-terra000017-eds.ocp.delta.sbrf.ru/v1/chat/completions

Content ответа: ""Повторите это:  ""

Смена charset в командой строке не решвет проблему. Проблема связана с особенностью данной версии curl.

Что делать:

Подавать json из файла.

Пример: curl --cert client.p12 --key private.key --data @data.txt -v https://goprodigy-ci01808661-gigachat.apps.ift-terra000017-eds.ocp.delta.sbrf.ru/v1/chat/completions

Что делать если внешнему пользователю ничего не помогло

Даже после всех инструкций у пользователя не получается выполнить запрос самостоятельно. Или пользователь присылает какой-то свой код на любом языке программирования

Рекомендовать

использовать готовые примеры с сайта https://developers.sber.ru/docs/ru/gigachat/api/authorization

использовать коллекцию PostMan https://developers.sber.ru/docs/ru/gigachat/api/postman-request-collection при необходимости смотреть видео по использованию коллекции PostMan (там же)

использовать готовые примеры из библиотеки GigaChain https://github.com/ai-forever/gigachain/

Только если пользователь все попробовал – пусть присылает данные, под которыми работает (client_id, а также запрос ЦЕЛИКОМ и ответ ЦЕЛИКОМ на почту gigachat@sberbank.ru

Мы не обучаем пользователей программированию, наша ответственность – чтобы он выполнил успешно один запрос и получил ответ, все что дальше и как он будет использовать реализацию этого вызова – его зона ответственности.

Частые вопросы внешних пользователей

«Пропали токены, нет пакетов которые я вчера купил, исчез мой проект GigaChat API» и схожие обращения

Запросить снимок экрана, так чтобы было видно client_id, Workspace_id, остаток по пакетам. При необходимости список покупок. Уточнить не поменял ли пользователь параметры входа (например раньше ходил через СберИД а сейчас через логин/пароль). После чего посмотреть потребление по указанным данным client_id, возможно пользователь перепутал разные учетные записи. Если все совпадает то писать в канал ММ

«Юридические вопросы, коммерческое использование» и тд

Предлагаем ознакомиться с юридическими документами https://developers.sber.ru/docs/ru/policies/gigachat-agreement/individuals (для физиков), https://developers.sber.ru/docs/ru/policies/gigachat-agreement/permissible-use-ai и https://developers.sber.ru/docs/ru/policies/gigachat-agreement/corporate-clients-beta (ЮЛ).

Если вы не можете найти ответы на вопросы внутри этих документов, то перенаправляйте обращение к Доленко Дмитрий Дмитриевич Dolenko.D.D@sberbank.ru

«Отменить покупку пакета с токенами/вернуть деньги»

Если пользователь (физлицо) хочет вернуть деньги или отменить покупку - надо подсветить https://developers.sber.ru/docs/ru/policies/gigachat-agreement/individuals пункт 4 11",[],"{'question_type': 'situational', 'seed_document_id': 1, 'situational_context': 'Руководитель отдела IT ищет решение по увеличению количества потоков для нового корпоративного проекта.', 'topic': 'Others'}"
e8145090-d676-4df8-b37e-128c7e7cedc7,"Привет, тестирую новую функцию GigaChat для автоматической генерации изображений по текстовым запросам. Можете объяснить, какую роль играет поле function_call в запросе POST /chat/completions?","Поле function_call задает режим работы с функциями и может принимать значения: ""none"" — модель не будет вызывать функции, ""auto"" — модель решает, какие функции вызывать на основе содержимого запроса.","Document 37: lastUpdateDate: 7 августа 2024

Работа с функциями {#rabota-s-funktsiyami}

Функции — внешние инструменты (фрагменты кода), к которым могут обращаться модели GigaChat для решения задач пользователей. Модель не исполняет функции, но самостоятельно принимает решение о том как, когда и с какими параметрами их следует вызвать. При принятии решения о вызове функции модель исходит из доступных знаний, данных текущего разговора и описания функции. После обращения к функции модель может обработать результат ее работы.

Несколько примеров функций:

запрос на поиск информации в базе данных;

поиск в интернете по запросу и параметрам;

изменение статуса устройств умного дома;

вычисление математической формулы;

создание изображения по текстовому запросу с помощью сторонней нейронной сети.

Функции значительно повышают возможности языковых моделей, давая им возможности:

получать и обрабатывать информацию из внешних источников;

взаимодействовать с окружающей средой;

обрабатывать результаты этого взаимодействия.

Функции - ключевой элемент для построения сложных решения с применением LLM, таких, как AI-агенты и ассистенты.

Все модели GigaChat для генерации поддерживают два вида функций:

пользовательские — функции, которые вы реализуете и исполняете самостоятельно. Модель автоматически определяет необходимость вызова функции на основе ее описания. Для таких функций модель может сгенерировать объект с данными в подходящем вам формате, после чего вы сможете использовать их для дальнейших преобразований;

встроенные — функции, которые модель использует для выполнения различных задач, например, генерации изображений. Функции исполняются внутри сервиса.

Для работы с функциями используется запрос POST /chat/completions. А именно — необязательное поле function_call, которое задает режим работы с функциями и может принимать значения:

""none"" — режим работы по умолчанию.

Если запрос не содержит поля function_call или значение поля — none, модель не будет вызывать функции (в том числе встроенные), а просто сгенерирует ответ в соответствии с полученными сообщениями.

""auto"" — в зависимости от содержимого запроса, модель решает что нужно сделать: вызывать встроенные функции, сгенерировать аргументы для исполнения пользовательской функции или просто сгенерировать сообщение.

Модель вызывает встроенные функции, только если отсутствует массив functions с описанием пользовательских функций.

Если запрос содержит ""function_call"": ""auto"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса.

Ниже, на примере функции прогноза погоды, показано как работать с пользовательскими функциями с помощью GigaChat.

Работа с пользовательскими функциями {#rabota-s-sobstvennymi-funktsiyami}

Функция, использованная для примера, возвращает данные о температуре в зависимости от аргументов, полученных на входе:

места, для которого запрашивается погода;

единиц измерения температуры;

периода в днях, которому должны соответствовать данные о температуре.

Описание функции {#opisanie-funktsii}

Чтобы модель могла определить, что нужно исполнить пользовательскую функцию, а также могла сгенерировать для нее аргументы, подготовьте ее описание в формате JSON Schema.

json { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть"" } }, ""required"": [ ""location"", ""num_days"" ] } }

Для улучшения генерации аргументов в описании функции вы также можете передать:

few_shot_examples — массив с примерами запросов пользователя и ответов модели;

return_parameters — объект с описанием данных в формате JSON Schema, которые возвращает функция.

:::tip

Модели GigaChat значительно лучше работают с функциями, которые описаны согласно приведенным примерам. При описании функции уделяйте внимание подробному описанию структуры входных и выходных данных, не забывайте указывать краткое описание самой функции и примеры ее использования.

Ниже вы найдете несколько примеров хорошо описанных функций.

:::

json { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть"" } }, ""required"": [ ""location"", ""num_days"" ] }, ""few_shot_examples"": [ { ""request"": ""Какая погода в Москве в ближайшие три дня"", ""params"": { ""location"": ""Moscow, Russia"", ""format"": ""celsius"", ""num_days"": ""3"" } } ], ""return_parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""temperature"": { ""type"": ""integer"", ""description"": ""Температура для заданного местоположения"" }, ""forecast"": { ""type"": ""array"", ""items"": { ""type"": ""string"" }, ""description"": ""Описание погодных условий"" }, ""error"": { ""type"": ""string"", ""description"": ""Возвращается при возникновении ошибки. Содержит описание ошибки"" } } } }

Примеры описания функций {#functions-descriptions-example}

Представленные примеры описания функций используются в Jupyter-блокноте, который демонстрирует работу с функциями с помощью GigaChain.

Примеры составных функций {#functions-descriptions-example}

Модели GigaChat могут использовать результаты работы одних функций для вызова других. О такой возможности нужно сообщать в описании соответствующих функций. В остальном они описываются так же, как и обычные функции. Функции, которые работают таким образом, называются составными.

Ниже — пример нескольких функций, в описании которых заданы инструкции для модели. Согласно этим инструкциям при недостатке данных модель должна самостоятельно вызвать соответствующую функцию, которая может дать недостающие данные.

Генерация аргументов {#generatsiya-argumentov}

Теперь, когда вы подготовили описание функции, используйте его для генерации аргументов с помощью модели.

Модели GigaChat могут генерировать аргументы для вызова функций в автоматическом режиме.

В этом режиме модель анализирует полученные сообщения (массив messages) и сама решает нужно использовать функции или нет.

Для работы в автоматическом режиме передавайте в запросе поле ""function_call"": ""auto"":

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Погода в Москве на три дня"" } ], ""function_call"": ""auto"", ""functions"": [ { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть прогноз"" } }, ""required"": [ ""location"", ""num_days"" ] } } ], }

При этом работа модели зависит от того, содержит массив functions описание пользовательских функций или нет:

Если массив отсутствует или пустой — модель сможет обращаться только ко встроенным функциям.

Если массив не пустой — модель сможет генерировать аргументы только для заданных функций.

Ответ модели {#otvet-modeli}

Когда модель решает, что нужно исполнить пользовательскую функцию, она возвращает ответ с результатом ""finish_reason"": ""function_call"". Сгенерированные аргументы для вызова вашей функции передаются в объекте message.function_call:

json { ""choices"": [ { ""message"": { ""role"": ""assistant"", ""content"": """", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""function_call"": { ""name"": ""weather_forecast"", ""arguments"": { ""location"": ""Москва"", ""format"": ""celsius"" } } }, ""index"": 0, ""finish_reason"": ""function_call"" } ], ""created"": 1700471392, ""model"": ""GigaChat"", ""usage"": { ""prompt_tokens"": 150, ""completion_tokens"": 35, ""total_tokens"": 185 }, ""object"": ""chat.completion"" }

Передача ответа функции в модель {#peredacha-otveta-funktsii-v-model}

После исполнения пользовательской функции со сгенерированными аргументами, передайте результат ее работы обратно в модель.

Для этого используйте сообщение с ролью function в контексте диалога (массив messages):

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Какая погода в Москве сегодня?"" }, { ""role"": ""assistant"", ""content"": """", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""function_call"": { ""name"": ""weather_forecast"", ""arguments"": { ""location"": ""Москва"", ""format"": ""celsius"" } } }, { ""role"": ""function"", ""content"": ""{\""temperature\"": \""27\""}"", ""name"": ""weather_forecast"" } ], ""functions"": [ { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть прогноз"" } }, ""required"": [ ""location"", ""num_days"" ] } }, ], }

:::note

Подробнее о работе с контекстом диалога — в разделе Работа с историей чата.

:::

Потоковая генерация аргументов {#potokovaya-generatsiya-argumentov}

При генерации аргументов в потоковом режиме (""stream"": true) название функции (function_call.name) и ее аргументы всегда передаются в одной порции:

```json data: {""choices"":[{""delta"":{""content"":""Мне нужно посмотреть погоду в Москве"",""role"":""assistant""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":50,""prompt_tokens"":152,""total_tokens"":202}}

data: {""choices"":[{""delta"":{""content"":"" на""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""content"":"" завтра""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""function_call"": {""name"": ""weather_forecast"", ""arguments"": {""location"": ""Moscow"",""num_days"": 1}}},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""content"":"""",""functions_state_id"":""77d3fb14-457a-46ba-937e-8d856156d003"",""created"":1718801171,""model"":""GigaChat"",""object"":""chat.completion""}

data: [DONE] ```

Вызов встроенных функций {#vyzov-vstroennykh-funktsiy}

GigaChat поддерживает встроенные функции, например, для генерации изображений. Встроенные функции вызываются только в автоматическом режиме (""function_call"": ""auto"") на основе запроса пользователя.

При вызове встроенных функций модель возвращает ответ с результатом ""finish_reason"": ""stop"".

Пример запроса на генерацию изображения:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", }'

Пример ответа:

json { ""choices"": [ { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" } ], ""created"": 1716367703, ""model"": ""GigaChat:3.1.25.3"", ""object"": ""chat.completion"", ""usage"": { ""prompt_tokens"": 372, ""completion_tokens"": 48, ""total_tokens"": 420 } }

При этом контекст выполнения функции, который нужен для качественной работы модели, сохраняется одним из двух способов:

С помощью поля functions_state_id — идентификатора, который объединяет массив функций, переданных в запросе. При работе в режиме потоковой передачи идентификатор передается в последнем фрагменте.

С помощью массива сообщений data_for_context. Это устаревший способ, поддержка которого в будущем прекратится.

Сохранение контекста {#sohranenie-konteksta}

C помощью поля functions_state_id {#c-pomoshyu-polya-functionsstateid}

:::caution

Это приоритетный способ, который в будущем заменит использование массива с данными контекста data_for_context.

Работа с полем functions_state_id доступна при обращении к моделям в раннем доступе.

:::

Для сохранения контекста после вызова встроенных функций, передавайте поле functions_state_id в запросе в сообщениях с ролью assistant:

jsonjson { ""messages"": [ { ""role"": ""user"", ""content"": ""нарисуй корову"" }, { ""content"": ""Добавил в очередь на генерацию изображения... - вот такая корова у меня получилась."", ""role"": ""assistant"", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"" }, { ""content"": ""а теперь нарисуй слона"", ""role"": ""user"" } ], ""model"": ""GigaChat"" } ```

С помощью блока data_for_context {#s-pomoshyu-bloka-dataforcontext}

Для сохранения контекста после вызова встроенных функций, передавайте массив data_for_context в запросе в сообщениях с ролью assistant:

json { ""messages"": [ { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" }, { ""role"": ""assistant"", ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, { ""role"": ""user"", ""content"": ""Дорисуй ему крылья"" } ], ""model"": ""GigaChat"" }

Потоковая передача токенов {#potokovaya-peredacha-tokenov}

Работа встроенных функций может занимать продолжительное время. Вы можете обрабатывать ответ модели по мере его генерации с помощью потоковой передачи токенов (параметр запроса ""stream"": true).

Пример запроса:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", ""stream"": true, }'

При этом сообщения о том, что работает встроенная функция, будут приходить с ролью function_in_progress и данными о том, когда был создан фрагмент сообщения.

Пример ответа:",[],"{'question_type': 'situational', 'seed_document_id': 37, 'situational_context': 'Инженер-программист тестирует новую функцию GigaChat для автоматической генерации изображений по текстовым запросам.', 'topic': 'Работа с GigaChat API'}"
b5802307-09be-4f9e-8dae-b379d1cd4ce2,"Привет! Я изучаю документацию по GigaChat для интеграции в новый проект. Можете рассказать, какие модели GigaChat доступны для генерации и каково их назначение?","Для генерации доступны модели:

1. GigaChat (GigaChat) - Контекст: 8192 токенов. Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы.

2. GigaChat Lite+ (GigaChat-Plus) - Контекст: 32768 токенов. Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных, например, суммаризация статей или транскрибаций звонков, извлечение информации из документов.

3. GigaChat Pro (GigaChat-Pro) - Контекст: 8192 токенов. Модель с поддержкой функций. GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах.","Document 45: lastUpdateDate: 1 июля 2024

Выбор модели для генерации {#vybor-modeli-dlya-generatsii}

При работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.

Чтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""<название_модели>"", ""messages"": [ { ""role"": ""user"", ""content"": ""Привет! Расскажи о себе."" } ], ""n"": 1, ""stream"": false, ""max_tokens"": 512, ""repetition_penalty"": 1, ""update_interval"": 0 }'

GigaChain по умолчанию работает с базовой моделью GigaChat. Чтобы явно задать модель, передайте параметр model при инициализации GigaChat:

```py from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials='<авторизационные_данные>', model='<название_модели>', verify_ssl_certs=False) ```

Возможные значения поля model:

GigaChat — базовая модель для решения более простых задач;

GigaChat-Plus — модель с увеличенным контекстом. Подходит, например, для суммаризации больших документов;

GigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи.

Смотрите также {#smotrite-takzhe}

Модели GigaChat

Тарифы и оплата

Быстрый старт GigaChain

Document 11: lastUpdateDate: 5 августа 2024

Модели GigaChat {#modeli-giga-chat}

Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Модели для генерации {#modeli-dlya-generatsii}

Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели Значение поля model Размер контекста в токенах Поддержка функций Описание GigaChat Lite GigaChat Контекст: 8192 да Модель c поддержкой функций, которая подойдет для решения более простых задач, требующих при этом максимальной скорости работы. Подробнее про работу с функциями GigaChat Lite+ GigaChat-Plus Контекст: 32768 да Модель с поддержкой функций, которая подойдет для задач, в которых нужно обрабатывать большой объем данных. Например: суммаризация статьей или транскрибаций звонков, извлечение информации из документов Подробнее про работу с функциями GigaChat Pro GigaChat-Pro Контекст: 8192 да Модель с поддержкой функций. Подробнее про работу с функциями . GigaChat Pro лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повышено качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы. Модель хорошо ориентируется во многих прикладных направлениях — в частности, в экономических и юридических вопросах

Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

Обращение к моделям раннего доступа {#obrashenie-k-modelyam-rannego-dostupa}

Модели для генерации GigaChat регулярно обновляются и у них появляются новые возможности, например, вызов функций. В таких случаях новые версии моделей некоторое время доступны в раннем доступе.

Для обращения к таким моделям используйте адрес https://gigachat-preview.devices.sberbank.ru/, а к названию модели, которое передается в поле model, добавьте постфикс -preview.

Например, запрос на генерацию будет выглядеть следующим образом:

sh curl -L -X POST 'https://gigachat-preview.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro-preview"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."" }, { ""role"": ""user"", ""content"": ""GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."" } ], ""stream"": false, ""update_interval"": 0 }'

:::note

После запуска обновленных моделей в промышленном контуре, все модели начинают вести себя одинаково, независимо от того по какому адресу вы передаете запросы.

:::

Полный список моделей в раннем доступе, можно получить с помощью запроса GET /models:

sh curl -L -X GET 'https://gigachat-preview.devices.sberbank.ru/api/v1/models' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>'

Модель для векторного представления текста {#model-dlya-vektornogo-predstavleniya-teksta}

Для векторного представления текстов доступна модель Embeddings:

Название модели Значение поля model Описание Embeddings Embeddings Базовая модель, доступная по умолчанию для векторного представления текстов

Модель используется в запросах на создание эмбеддингов POST /embeddings:

json { ""model"": ""Embeddings"", ""input"": [ ""Расскажи о современных технологиях"" ] }

Смотрите также {#smotrite-takzhe}

Выбор модели для генерации

Векторное представление текстов

Запрос на генерацию

Тарифы и оплата

Document 41: lastUpdateDate: 23 мая 2024

gRPC API {#opisanie-api}

Для обмена данными с сервисом GigaChat вы можете использовать gRPC-протокол. Подробнее о нем читайте в официальной документации.

Совершать запросы по протоколу gRPC удобно, если нужно:

максимально быстро получить ответ;

поддержать отзывчивый интерфейс с отображением пользователю промежуточных результатов работы нейросети.

Адрес для передачи запросов по протоколу gRPC:

default gigachat.devices.sberbank.ru

Для работы с API используйте proto-файл.

Авторизация {#avtorizatsiya}

Запросы к сервису авторизуются с помощью токена доступа по протоколу OAuth 2.0. Токен доступа передается в заголовке authorization. Пример:

default Bearer <токен доступа>

Подробно о том как получить токен доступа читайте в разделах Быстрый старт для физических лиц и Быстрый старт для ИП и юридических лиц.

Описание методов {#opisanie-metodov}

Получить список моделей {#poluchit-spisok-modeley-list-models}

Возвращает массив объектов с данными доступных моделей. Выполняется с пустым телом запроса.

Ответ:

Получить модель {#poluchit-model-retrieve-model}

Возвращает объект с описанием указанной модели.

Параметры запроса:

Ответ:

Получить ответ модели {#poluchit-otvet-modeli-chat-request}

Возвращает ответ модели с учетом переданных сообщений.

Параметры запроса:

Ответ:

Ошибки {#oshibki}

Ошибка Описание 400 Ошибка в параметрах запроса 401 Отсутствует токен доступа или истекло время действия токена 404 Не найдена модель 405 Ошибка при вводе 413 Превышен максимальный размер входных данных 500 Внутренняя ошибка сервиса

Document 34: lastUpdateDate: 18 июля 2024

Потоковая генерация токенов {#potokovaya-peredacha-tokenov}

Режим получения потока токенов поможет обрабатывать ответ GigaChat по мере его генерации.

При включении этого режима GigaChat передает токены в потоке коротких сообщений, формат которых соответствует протоколу server-sent events. Последним в потоке будет событие data: [DONE].

Вы можете включить потоковую генерацию токенов. Для этого в запросе POST /chat/completions нужно передать параметр ""stream"": true.

Пример запроса:

shell curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer Token ***' \ -d '{ ""model"": ""GigaChat"", ""messages"": [{""role"": ""user"", ""content"": ""Say this is a test!""}], ""stream"": true }'

Пример потока событий:

```json data: { ""choices"": [ { ""delta"": { ""content"": ""GigaСhat"", ""role"": ""assistant"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" спешит"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" на"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: { ""choices"": [ { ""delta"": { ""content"": "" помощь"" }, ""index"": 0 } ], ""created"": 1683034756, ""model"": ""GigaChat"", ""object"": ""chat.completion"" }

data: [DONE] ```

Для поддержки потоковой генерации токенов с помощью GigaChain нужно унаследоваться от класса BaseCallbackHandler и инициализировать модуль GigaChat в режиме обработки потока токенов streaming=True:

```py from langchain.schema import HumanMessage from langchain.callbacks.base import BaseCallbackHandler from langchain.chat_models.gigachat import GigaChat

class StreamHandler(BaseCallbackHandler): def init(self, initial_text=""""): pass

def on_llm_new_token(self, token: str, **kwargs) -> None:
    print(f""{token} -"", end="""", flush=True)

chat = GigaChat(credentials='<авторизационные_данные>', streaming=True, callbacks=[StreamHandler()])

chat([HumanMessage(content=""Напиши краткое содержание романа «Евгений Онегин»"")]) ```",[],"{'question_type': 'situational', 'seed_document_id': 45, 'situational_context': 'Инженер-разработчик изучает документацию по использованию различных моделей GigaChat для интеграции в новый проект.', 'topic': 'Работа с GigaChat API'}"
bb2dd498-8c99-40f5-8619-2a09da637350,"Здравствуйте, я сейчас изучаю документацию для интеграции GigaChat в мое приложение. Можете объяснить, для чего предназначен раздел, содержащий описание и инструкции по работе с GigaChat API?","Раздел содержит описание и инструкции по работе с GigaChat API, которые применяются для интеграции вашего продукта и сервиса GigaChat.","Document 35: title: GigaChat API entryPage: true description: Раздел содержит описание и инструкции по работе с GigaChat API, которые применяются для интеграции вашего продукта и сервиса GigaChat. lastUpdateDate: 26 февраля 2024

import { entryPageContent } from './_data.tsx'",[],"{'question_type': 'situational', 'seed_document_id': 35, 'situational_context': 'Разработчик приложения изучает документацию, чтобы интегрировать сервис GigaChat в свой продукт.', 'topic': 'Сервис GigaChat'}"
90a6946f-3736-411d-93ca-c6972b2d11a8,"Здравствуйте! Я настраиваю систему для автоматического перевода документов в нашей компании. Можете привести пример промпта, который используется для генерации вопросов к заданному тексту?","json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }","Document 20: lastUpdateDate: 4 апреля 2024

Суммаризация {#summarizatsiya}

Пример промпта для выделения из текста основных мыслей.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки."" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки.

""{text}""

Основные 5 фактов:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Выдели 5 главных фактов и мыслей из этого текста. Сформулируй каждый факт в виде одной строки."" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains.summarize import load_summarize_chain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") map_prompt = load_prompt('lc://prompts/summarize/map_reduce/map.yaml')

chain = load_summarize_chain(giga, chain_type=""map_reduce"", map_prompt=map_prompt) ```

Document 27: lastUpdateDate: 4 апреля 2024

Генерация вопросов к заданному тексту {#generatsiya-voprosov-k-zadannomu-tsehu}

Пример промпта для генерации различных вопросов к переданному тексту.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], }

```yaml input_variables: [text] output_parser: null template: 'Перед тобой некоторая часть целостного документа. Придумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу. Используй информацию ТОЛЬКО из приведенной части документа. Используй непредвзятый и журналистский тон. Не повторяй текст. Формат ответ должен выглядеть вот так: "" Вопрос ... ... Вопрос

Текст документа: {text}

3 вопроса к документу на русском языке:' template_format: f-string _type: prompt ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Перед тобой некоторая часть целостного документа.\nПридумай и напиши 3 УНИКАЛЬНЫХ КОРОТКИХ ВОПРОСА, которые человек может задать к данному документу.\nИспользуй информацию ТОЛЬКО из приведенной части документа.\nИспользуй непредвзятый и журналистский тон. Не повторяй текст.\nФормат ответ должен выглядеть вот так:\n\n\""Вопрос\n\n...\n...\nВопрос\n\n\"""" }, { ""role"": ""user"", ""content"": ""<Текст>"" } ], } ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") generate_question_prompt = load_prompt('lc://prompts/qna/generate_question_prompt.yaml') text = generate_question_prompt.format(text=""... text of your documents ..."") ```

Document 24: lastUpdateDate: 4 апреля 2024

Перевод текста {#perevod-teksta}

Пример промпта для перевода текста.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It's not about money, it's about sending a message!"" }, ], ""temperature"": 0.7 }

:::caution

Промпт работает с помощью библиотеки gigachain_core, начиная с версии 0.1.9.1.

Для обновления библиотеки выполните команду:

sh pip install -U gigachain_core

:::

```yaml input_variables: [text] output_parser: null messages: - role: system prompt: template: 'Ты - профессиональный переводчик на русский язык. Тебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста. В ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова. Если запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно. Если в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно. Если в тексте поставлена неправильно пунктуация, то не исправляй ее. Твоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым. ВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации

Input Format: Q:hi Output Format: Q:привет' - role: user prompt: template: '{text}' template_format: f-string _type: chat ```

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 1.0, ""top_p"": 0.1, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.0, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Ты - профессиональный переводчик на русский язык.\\nТебе будет дан текст, который необходимо перевести на русский язык, сохранив исходное форматирование текста.\\nВ ответе необходимо отдать перевод в формате, приведенном ниже. Ты ДОЛЖЕН перевести !все слова.\\nЕсли запрос связан с программированием и в текстовом запросе содержится фрагмент кода, то такой фрагмент с кодом переводить не нужно.\\nЕсли в запросе необходимо поставить пробелы и слова слеплены вместе, то такой кусок слепленного текста переводить не нужно.\\nЕсли в тексте поставлена неправильно пунктуация, то не исправляй ее.\\nТвоя задача сделать такой перевод, чтобы лингвист считал его лингвистически приемлемым.\\nВАЖНО! В своем ответе НЕ ОТВЕЧАЙ НА ЗАПРОС! В ответе нужно написать !только !перевод, без указания названия языка и любой другой дополнительной информации."" }, { ""role"": ""user"", ""content"": ""It'\''s not about money, it'\''s about sending a message!"" } ] }'

```python from langchain.prompts import load_prompt from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=<авторизационные_данные>) prompt = load_prompt(""lc://prompts/content/translation_v2.yaml"") chain = prompt | giga chain.invoke( { ""text"": ""Hello! I understand English and many other languages!"" } ).content ```

Jupyter-блокнот с шаблоном промпта для перевода.

Document 30: lastUpdateDate: 4 апреля 2024

Генерация интентов {#generatsiya-intentov}

Пример промпта для генерации интентов. Промпт содержит инструкцию по количеству синонимов интента и формату ответа.

Структура промпта {#struktura-prompta}

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 фраз для интента \""Сделай посветлее\"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [\""фраза1\"", \""фраза2\"", \""фраза3\"", \""фраза4\""]. Не дублируй фразы."" }, ], }

yaml input_variables: [dataset_size_min, dataset_size_max, subject] output_parser: null template: 'Сгенерируй от {dataset_size_min} до {dataset_size_max} фраз для интента ""{subject}"". Результат верни в формате JSON-списка без каких-либо пояснений, например, [""фраза1"", ""фраза2"", ""фраза3"", ""фраза4""]. Не дублируй фразы.' template_format: f-string _type: prompt

Пример запроса {#primer-zaprosa}

sh curl --location 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ --header 'Content-Type: application/json' \ --header 'Authorization: <токен_доступа>' \ --data '{ ""model"": ""GigaChat"", ""temperature"": 0.87, ""top_p"": 0.47, ""n"": 1, ""max_tokens"": 512, ""repetition_penalty"": 1.07, ""stream"": false, ""update_interval"": 0, ""messages"": [ { ""role"": ""system"", ""content"": ""Сгенерируй от 5 до 10 объектов для сущности \""автомобиль\"" для каждого объекта сгенерируй до 10 синонимов. Придерживайся следующих правил: объекты и синонимы должны быть уникальны, не придумывай несуществующие слова и выражения, если у тебя закончились варианты, то не генерируй ничего. Результат верни в формате JSON-массива без каких-либо пояснений, например, [{\""entity\"": \""название объекта\"", \""synonyms\"": [\""синоним1\"", \""синоним2\""]}]."" }, ] }'

```python from langchain.prompts import load_prompt from langchain.chains import LLMChain from langchain.chat_models.gigachat import GigaChat

giga = GigaChat(credentials=""<авторизационные_данные>"") synonyms_with_examples = load_prompt('lc://prompts/synonyms/intents_generation.yaml') text = prompt.format(dataset_size_min=5, dataset_size_max=10, subject=""Сделай посветлее"") ```",[],"{'question_type': 'situational', 'seed_document_id': 20, 'situational_context': 'Технический специалист в крупной компании настраивает систему для автоматического перевода документов.', 'topic': 'Промпты для GigaChat'}"
8775248d-7eb3-483c-ab49-ddadb45444c3,"Привет! Я хочу подключить GigaChat API к моему Telegram-боту. Можете подсказать, какие языки поддерживает GigaChat?",GigaChat поддерживает русский и английский языки.,"Document 44: lastUpdateDate: 27 мая 2024

Обучающие материалы {#obuchayushie-video}

В этом разделе собраны обучающие материалы по работе с GigaChat API.

Название Тип Автор Вводное видео о возможностях API на платформе Edutoria Видео Как начать работу с GigaChat API? Подробный туториал на Python Видеоурок Сергей Тращенков Как подключить GigaChat API к Telegram-боту? Подробное руководство на Python Видеоурок Сергей Тращенков Работа с LLM GigaChat Курс GigaChat: нейросетевая модель для маркетологов и не только Курс

Document 13: lastUpdateDate: 6 мая 2024

Возможности GigaChat {#o-giga-chat}

GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя. При этом GigaChat стремится избегать спорных этических вопросов или провокаций.

GigaChat поддерживает русский и английский языки.

Особенности и преимущества {#osobennosti-i-preimushestva}

Обучение модели {#obuchenie-modeli}

Корпус данных, использованных для обучения включает в себя книги и новости на русском и английском языках, разговорную речь, научные статьи и другие домены. Объем данных, использованных для обучения, составил 300 Гб. Домены постоянно пополняются и расширяются.

Нейросетевая модель обучается по методу supervised fine-tuning, reinforcement learning with human feedback с помощью оценки ответов. Старайтесь оценивать каждый ответ GigaChat. Все оценки учитываются при дальнейшем обучении.

Модальности GigaChat {#modalnosti-giga-chat}

Кроме текстовой модальности в GigaChat уже работает создание изображений с использованием модели Kandinsky 3.1. В планах развития работа со звуком и интеграция с другими инструментами через динамические модули.

Работа с кодом {#rabota-s-kodom}

Для обучения GigaChat использовались части датасета The Stack (открытый сет с кодом) от коллаборации исследователей BigCode, а также различные задачи по написанию кода, определению уязвимостей и ошибок.

Как и с другими темами, ответы на вопросы по программированию нужно проверять самостоятельно.

Оценка модели {#otsenka-modeli}

Сравнение и оценка нейросетевой модели проводилась автоматически, полуавтоматически и вручную.

Метрики, использованные при автоматической оценке:

перплексия на отложенной выборке;

сравнение ответов модели с эталонами при помощи метрик дистанции;

оценка при помощи модели-оракула;

описательные статистики, например, средняя длина ответа и лексическое разнообразие;

контрастивная оценка;

общепринятые наборы оценки, такие как RussianSuperGLUE и BigBench.

При полуавтоматической оценке использовались диалоговые метрики безопасности, достоверности, грамотности и интересности.

Обратная связь {#obratnaya-svyaz}

Если у вас остались вопросы, пишите нам на почту.",[],"{'question_type': 'situational', 'seed_document_id': 44, 'situational_context': 'Техподдержка получила запрос о том, как подключить GigaChat API к Telegram-боту.', 'topic': 'Сервис GigaChat'}"
08d247f9-9ee5-4040-ba9f-f3c6cd23a8d9,"Здравствуйте, я настраиваю функцию прогноза погоды для нового чат-бота и хочу уточнить, какие виды функций поддерживают модели GigaChat для генерации?",Модели GigaChat для генерации поддерживают два вида функций: пользовательские и встроенные.,"Document 37: lastUpdateDate: 7 августа 2024

Работа с функциями {#rabota-s-funktsiyami}

Функции — внешние инструменты (фрагменты кода), к которым могут обращаться модели GigaChat для решения задач пользователей. Модель не исполняет функции, но самостоятельно принимает решение о том как, когда и с какими параметрами их следует вызвать. При принятии решения о вызове функции модель исходит из доступных знаний, данных текущего разговора и описания функции. После обращения к функции модель может обработать результат ее работы.

Несколько примеров функций:

запрос на поиск информации в базе данных;

поиск в интернете по запросу и параметрам;

изменение статуса устройств умного дома;

вычисление математической формулы;

создание изображения по текстовому запросу с помощью сторонней нейронной сети.

Функции значительно повышают возможности языковых моделей, давая им возможности:

получать и обрабатывать информацию из внешних источников;

взаимодействовать с окружающей средой;

обрабатывать результаты этого взаимодействия.

Функции - ключевой элемент для построения сложных решения с применением LLM, таких, как AI-агенты и ассистенты.

Все модели GigaChat для генерации поддерживают два вида функций:

пользовательские — функции, которые вы реализуете и исполняете самостоятельно. Модель автоматически определяет необходимость вызова функции на основе ее описания. Для таких функций модель может сгенерировать объект с данными в подходящем вам формате, после чего вы сможете использовать их для дальнейших преобразований;

встроенные — функции, которые модель использует для выполнения различных задач, например, генерации изображений. Функции исполняются внутри сервиса.

Для работы с функциями используется запрос POST /chat/completions. А именно — необязательное поле function_call, которое задает режим работы с функциями и может принимать значения:

""none"" — режим работы по умолчанию.

Если запрос не содержит поля function_call или значение поля — none, модель не будет вызывать функции (в том числе встроенные), а просто сгенерирует ответ в соответствии с полученными сообщениями.

""auto"" — в зависимости от содержимого запроса, модель решает что нужно сделать: вызывать встроенные функции, сгенерировать аргументы для исполнения пользовательской функции или просто сгенерировать сообщение.

Модель вызывает встроенные функции, только если отсутствует массив functions с описанием пользовательских функций.

Если запрос содержит ""function_call"": ""auto"" и массив functions с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса.

Ниже, на примере функции прогноза погоды, показано как работать с пользовательскими функциями с помощью GigaChat.

Работа с пользовательскими функциями {#rabota-s-sobstvennymi-funktsiyami}

Функция, использованная для примера, возвращает данные о температуре в зависимости от аргументов, полученных на входе:

места, для которого запрашивается погода;

единиц измерения температуры;

периода в днях, которому должны соответствовать данные о температуре.

Описание функции {#opisanie-funktsii}

Чтобы модель могла определить, что нужно исполнить пользовательскую функцию, а также могла сгенерировать для нее аргументы, подготовьте ее описание в формате JSON Schema.

json { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть"" } }, ""required"": [ ""location"", ""num_days"" ] } }

Для улучшения генерации аргументов в описании функции вы также можете передать:

few_shot_examples — массив с примерами запросов пользователя и ответов модели;

return_parameters — объект с описанием данных в формате JSON Schema, которые возвращает функция.

:::tip

Модели GigaChat значительно лучше работают с функциями, которые описаны согласно приведенным примерам. При описании функции уделяйте внимание подробному описанию структуры входных и выходных данных, не забывайте указывать краткое описание самой функции и примеры ее использования.

Ниже вы найдете несколько примеров хорошо описанных функций.

:::

json { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть"" } }, ""required"": [ ""location"", ""num_days"" ] }, ""few_shot_examples"": [ { ""request"": ""Какая погода в Москве в ближайшие три дня"", ""params"": { ""location"": ""Moscow, Russia"", ""format"": ""celsius"", ""num_days"": ""3"" } } ], ""return_parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""temperature"": { ""type"": ""integer"", ""description"": ""Температура для заданного местоположения"" }, ""forecast"": { ""type"": ""array"", ""items"": { ""type"": ""string"" }, ""description"": ""Описание погодных условий"" }, ""error"": { ""type"": ""string"", ""description"": ""Возвращается при возникновении ошибки. Содержит описание ошибки"" } } } }

Примеры описания функций {#functions-descriptions-example}

Представленные примеры описания функций используются в Jupyter-блокноте, который демонстрирует работу с функциями с помощью GigaChain.

Примеры составных функций {#functions-descriptions-example}

Модели GigaChat могут использовать результаты работы одних функций для вызова других. О такой возможности нужно сообщать в описании соответствующих функций. В остальном они описываются так же, как и обычные функции. Функции, которые работают таким образом, называются составными.

Ниже — пример нескольких функций, в описании которых заданы инструкции для модели. Согласно этим инструкциям при недостатке данных модель должна самостоятельно вызвать соответствующую функцию, которая может дать недостающие данные.

Генерация аргументов {#generatsiya-argumentov}

Теперь, когда вы подготовили описание функции, используйте его для генерации аргументов с помощью модели.

Модели GigaChat могут генерировать аргументы для вызова функций в автоматическом режиме.

В этом режиме модель анализирует полученные сообщения (массив messages) и сама решает нужно использовать функции или нет.

Для работы в автоматическом режиме передавайте в запросе поле ""function_call"": ""auto"":

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Погода в Москве на три дня"" } ], ""function_call"": ""auto"", ""functions"": [ { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть прогноз"" } }, ""required"": [ ""location"", ""num_days"" ] } } ], }

При этом работа модели зависит от того, содержит массив functions описание пользовательских функций или нет:

Если массив отсутствует или пустой — модель сможет обращаться только ко встроенным функциям.

Если массив не пустой — модель сможет генерировать аргументы только для заданных функций.

Ответ модели {#otvet-modeli}

Когда модель решает, что нужно исполнить пользовательскую функцию, она возвращает ответ с результатом ""finish_reason"": ""function_call"". Сгенерированные аргументы для вызова вашей функции передаются в объекте message.function_call:

json { ""choices"": [ { ""message"": { ""role"": ""assistant"", ""content"": """", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""function_call"": { ""name"": ""weather_forecast"", ""arguments"": { ""location"": ""Москва"", ""format"": ""celsius"" } } }, ""index"": 0, ""finish_reason"": ""function_call"" } ], ""created"": 1700471392, ""model"": ""GigaChat"", ""usage"": { ""prompt_tokens"": 150, ""completion_tokens"": 35, ""total_tokens"": 185 }, ""object"": ""chat.completion"" }

Передача ответа функции в модель {#peredacha-otveta-funktsii-v-model}

После исполнения пользовательской функции со сгенерированными аргументами, передайте результат ее работы обратно в модель.

Для этого используйте сообщение с ролью function в контексте диалога (массив messages):

json { ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""user"", ""content"": ""Какая погода в Москве сегодня?"" }, { ""role"": ""assistant"", ""content"": """", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""function_call"": { ""name"": ""weather_forecast"", ""arguments"": { ""location"": ""Москва"", ""format"": ""celsius"" } } }, { ""role"": ""function"", ""content"": ""{\""temperature\"": \""27\""}"", ""name"": ""weather_forecast"" } ], ""functions"": [ { ""name"": ""weather_forecast"", ""description"": ""Возвращает температуру на заданный период"", ""parameters"": { ""type"": ""object"", ""properties"": { ""location"": { ""type"": ""string"", ""description"": ""Местоположение, например, название города"" }, ""format"": { ""type"": ""string"", ""enum"": [ ""celsius"", ""fahrenheit"" ], ""description"": ""Единицы измерения температуры"" }, ""num_days"": { ""type"": ""integer"", ""description"": ""Период, для которого нужно вернуть прогноз"" } }, ""required"": [ ""location"", ""num_days"" ] } }, ], }

:::note

Подробнее о работе с контекстом диалога — в разделе Работа с историей чата.

:::

Потоковая генерация аргументов {#potokovaya-generatsiya-argumentov}

При генерации аргументов в потоковом режиме (""stream"": true) название функции (function_call.name) и ее аргументы всегда передаются в одной порции:

```json data: {""choices"":[{""delta"":{""content"":""Мне нужно посмотреть погоду в Москве"",""role"":""assistant""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":50,""prompt_tokens"":152,""total_tokens"":202}}

data: {""choices"":[{""delta"":{""content"":"" на""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""content"":"" завтра""},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""function_call"": {""name"": ""weather_forecast"", ""arguments"": {""location"": ""Moscow"",""num_days"": 1}}},""index"":0}],""created"":1698850241,""model"":""GigaChat"",""object"":""chat.completion"",""usage"":{""completion_tokens"":1,""prompt_tokens"":0,""total_tokens"":1}}

data: {""choices"":[{""delta"":{""content"":"""",""functions_state_id"":""77d3fb14-457a-46ba-937e-8d856156d003"",""created"":1718801171,""model"":""GigaChat"",""object"":""chat.completion""}

data: [DONE] ```

Вызов встроенных функций {#vyzov-vstroennykh-funktsiy}

GigaChat поддерживает встроенные функции, например, для генерации изображений. Встроенные функции вызываются только в автоматическом режиме (""function_call"": ""auto"") на основе запроса пользователя.

При вызове встроенных функций модель возвращает ответ с результатом ""finish_reason"": ""stop"".

Пример запроса на генерацию изображения:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", }'

Пример ответа:

json { ""choices"": [ { ""message"": { ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""role"": ""assistant"", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, ""index"": 0, ""finish_reason"": ""stop"" } ], ""created"": 1716367703, ""model"": ""GigaChat:3.1.25.3"", ""object"": ""chat.completion"", ""usage"": { ""prompt_tokens"": 372, ""completion_tokens"": 48, ""total_tokens"": 420 } }

При этом контекст выполнения функции, который нужен для качественной работы модели, сохраняется одним из двух способов:

С помощью поля functions_state_id — идентификатора, который объединяет массив функций, переданных в запросе. При работе в режиме потоковой передачи идентификатор передается в последнем фрагменте.

С помощью массива сообщений data_for_context. Это устаревший способ, поддержка которого в будущем прекратится.

Сохранение контекста {#sohranenie-konteksta}

C помощью поля functions_state_id {#c-pomoshyu-polya-functionsstateid}

:::caution

Это приоритетный способ, который в будущем заменит использование массива с данными контекста data_for_context.

Работа с полем functions_state_id доступна при обращении к моделям в раннем доступе.

:::

Для сохранения контекста после вызова встроенных функций, передавайте поле functions_state_id в запросе в сообщениях с ролью assistant:

jsonjson { ""messages"": [ { ""role"": ""user"", ""content"": ""нарисуй корову"" }, { ""content"": ""Добавил в очередь на генерацию изображения... - вот такая корова у меня получилась."", ""role"": ""assistant"", ""functions_state_id"": ""77d3fb14-457a-46ba-937e-8d856156d003"" }, { ""content"": ""а теперь нарисуй слона"", ""role"": ""user"" } ], ""model"": ""GigaChat"" } ```

С помощью блока data_for_context {#s-pomoshyu-bloka-dataforcontext}

Для сохранения контекста после вызова встроенных функций, передавайте массив data_for_context в запросе в сообщениях с ролью assistant:

json { ""messages"": [ { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" }, { ""role"": ""assistant"", ""content"": ""Запускаю генерацию изображения. Ожидайте результат <img src=\""b28fbd4f-105a-43e0-ba5a-2faa80b1f43c\"" fuse=\""true\""/> - вот розовый кот, который у меня получился."", ""data_for_context"": [ { ""content"": ""Запускаю генерацию изображения. Ожидайте результат"", ""role"": ""assistant"", ""function_call"": { ""name"": ""text2image"", ""arguments"": { ""query"": ""pink cat, cartoon, colorful, drawing"" } } }, { ""content"": ""{\""status\"":\""success\""}"", ""role"": ""function"", ""name"": ""text2image"" }, { ""content"": "" - вот розовый кот, который у меня получился."", ""role"": ""assistant"" } ] }, { ""role"": ""user"", ""content"": ""Дорисуй ему крылья"" } ], ""model"": ""GigaChat"" }

Потоковая передача токенов {#potokovaya-peredacha-tokenov}

Работа встроенных функций может занимать продолжительное время. Вы можете обрабатывать ответ модели по мере его генерации с помощью потоковой передачи токенов (параметр запроса ""stream"": true).

Пример запроса:

sh curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \ -H 'Content-Type: application/json' \ -H 'Accept: application/json' \ -H 'Authorization: Bearer <токен_доступа>' \ --data-raw '{ ""model"": ""GigaChat-Pro"", ""messages"": [ { ""role"": ""system"", ""content"": ""Ты — Василий Кандинский"" }, { ""role"": ""user"", ""content"": ""Нарисуй розового кота"" } ], ""function_call"": ""auto"", ""stream"": true, }'

При этом сообщения о том, что работает встроенная функция, будут приходить с ролью function_in_progress и данными о том, когда был создан фрагмент сообщения.

Пример ответа:",[],"{'question_type': 'situational', 'seed_document_id': 37, 'situational_context': 'Технический специалист проверяет документацию, чтобы настроить функцию прогноза погоды для нового чат-бота.', 'topic': 'Работа с GigaChat API'}"
666,Привет! Ты кто?,"Здравствуйте! Я - виртуальный ассистент, предоставляющий консультации по вопросам использования продуктов GigaChat и GigaChain. Чем могу помочь вам сегодня?",,,
555,Привет! Напиши привет наоборот,"Здравствуйте! Я не могу выполнить эту задачу, так как моя функция ограничена предоставлением технической поддержки по продуктам GigaChat, GigaChain и другим связанным с ними вопросам.",,,